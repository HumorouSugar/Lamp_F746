
Lamp_F746BGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d78  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e88e4  08003f40  08003f40  00013f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080ec824  080ec824  000fc82c  2**0
                  CONTENTS
  4 .ARM          00000000  080ec824  080ec824  000fc82c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080ec824  080ec82c  000fc82c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080ec824  080ec824  000fc824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080ec828  080ec828  000fc828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000fc82c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fc5c  20000000  080ec82c  00100000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003fc5c  080ec82c  000ffc5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000fc82c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000fc85c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002641  00000000  00000000  000fc89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000279  00000000  00000000  000feee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000ff160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009a  00000000  00000000  000ff228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b88e  00000000  00000000  000ff2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a00  00000000  00000000  0011ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bfe4  00000000  00000000  0011d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002bc  00000000  00000000  001b9534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001b97f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003f28 	.word	0x08003f28

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08003f28 	.word	0x08003f28

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	2b00      	cmp	r3, #0
 8000254:	db12      	blt.n	800027c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 021f 	and.w	r2, r3, #31
 800025c:	490a      	ldr	r1, [pc, #40]	; (8000288 <__NVIC_DisableIRQ+0x44>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	2001      	movs	r0, #1
 8000266:	fa00 f202 	lsl.w	r2, r0, r2
 800026a:	3320      	adds	r3, #32
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000270:	f3bf 8f4f 	dsb	sy
}
 8000274:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000276:	f3bf 8f6f 	isb	sy
}
 800027a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	e000e100 	.word	0xe000e100

0800028c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	6039      	str	r1, [r7, #0]
 8000296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029c:	2b00      	cmp	r3, #0
 800029e:	db0a      	blt.n	80002b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	490c      	ldr	r1, [pc, #48]	; (80002d8 <__NVIC_SetPriority+0x4c>)
 80002a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002aa:	0112      	lsls	r2, r2, #4
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	440b      	add	r3, r1
 80002b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b4:	e00a      	b.n	80002cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4908      	ldr	r1, [pc, #32]	; (80002dc <__NVIC_SetPriority+0x50>)
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	3b04      	subs	r3, #4
 80002c4:	0112      	lsls	r2, r2, #4
 80002c6:	b2d2      	uxtb	r2, r2
 80002c8:	440b      	add	r3, r1
 80002ca:	761a      	strb	r2, [r3, #24]
}
 80002cc:	bf00      	nop
 80002ce:	370c      	adds	r7, #12
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000e100 	.word	0xe000e100
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <initialization>:
	80 - Ð¡olon main time ON
 */


void initialization()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002e6:	4b9d      	ldr	r3, [pc, #628]	; (800055c <initialization+0x27c>)
 80002e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ea:	4a9c      	ldr	r2, [pc, #624]	; (800055c <initialization+0x27c>)
 80002ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002f0:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 80002f2:	4b9a      	ldr	r3, [pc, #616]	; (800055c <initialization+0x27c>)
 80002f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002f6:	4a99      	ldr	r2, [pc, #612]	; (800055c <initialization+0x27c>)
 80002f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002fc:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002fe:	4b97      	ldr	r3, [pc, #604]	; (800055c <initialization+0x27c>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a96      	ldr	r2, [pc, #600]	; (800055c <initialization+0x27c>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800030a:	4b94      	ldr	r3, [pc, #592]	; (800055c <initialization+0x27c>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a93      	ldr	r2, [pc, #588]	; (800055c <initialization+0x27c>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000316:	4b91      	ldr	r3, [pc, #580]	; (800055c <initialization+0x27c>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800031a:	4a90      	ldr	r2, [pc, #576]	; (800055c <initialization+0x27c>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000322:	4b8e      	ldr	r3, [pc, #568]	; (800055c <initialization+0x27c>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a8d      	ldr	r2, [pc, #564]	; (800055c <initialization+0x27c>)
 8000328:	f043 0308 	orr.w	r3, r3, #8
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800032e:	4b8b      	ldr	r3, [pc, #556]	; (800055c <initialization+0x27c>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a8a      	ldr	r2, [pc, #552]	; (800055c <initialization+0x27c>)
 8000334:	f043 0310 	orr.w	r3, r3, #16
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 800033a:	4b88      	ldr	r3, [pc, #544]	; (800055c <initialization+0x27c>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a87      	ldr	r2, [pc, #540]	; (800055c <initialization+0x27c>)
 8000340:	f043 0320 	orr.w	r3, r3, #32
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
 8000346:	4b85      	ldr	r3, [pc, #532]	; (800055c <initialization+0x27c>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a84      	ldr	r2, [pc, #528]	; (800055c <initialization+0x27c>)
 800034c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000352:	4b82      	ldr	r3, [pc, #520]	; (800055c <initialization+0x27c>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a81      	ldr	r2, [pc, #516]	; (800055c <initialization+0x27c>)
 8000358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOKEN;
 800035e:	4b7f      	ldr	r3, [pc, #508]	; (800055c <initialization+0x27c>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a7e      	ldr	r2, [pc, #504]	; (800055c <initialization+0x27c>)
 8000364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 800036a:	4b7c      	ldr	r3, [pc, #496]	; (800055c <initialization+0x27c>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a7b      	ldr	r2, [pc, #492]	; (800055c <initialization+0x27c>)
 8000370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM13EN;
 8000376:	4b79      	ldr	r3, [pc, #484]	; (800055c <initialization+0x27c>)
 8000378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800037a:	4a78      	ldr	r2, [pc, #480]	; (800055c <initialization+0x27c>)
 800037c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000380:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB2ENR |= RCC_APB2ENR_TIM11EN;
 8000382:	4b76      	ldr	r3, [pc, #472]	; (800055c <initialization+0x27c>)
 8000384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000386:	4a75      	ldr	r2, [pc, #468]	; (800055c <initialization+0x27c>)
 8000388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800038c:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800038e:	4b73      	ldr	r3, [pc, #460]	; (800055c <initialization+0x27c>)
 8000390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000392:	4a72      	ldr	r2, [pc, #456]	; (800055c <initialization+0x27c>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800039a:	4b70      	ldr	r3, [pc, #448]	; (800055c <initialization+0x27c>)
 800039c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039e:	4a6f      	ldr	r2, [pc, #444]	; (800055c <initialization+0x27c>)
 80003a0:	f043 0302 	orr.w	r3, r3, #2
 80003a4:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80003a6:	4b6d      	ldr	r3, [pc, #436]	; (800055c <initialization+0x27c>)
 80003a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003aa:	4a6c      	ldr	r2, [pc, #432]	; (800055c <initialization+0x27c>)
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80003b2:	4b6a      	ldr	r3, [pc, #424]	; (800055c <initialization+0x27c>)
 80003b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b6:	4a69      	ldr	r2, [pc, #420]	; (800055c <initialization+0x27c>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003be:	4b67      	ldr	r3, [pc, #412]	; (800055c <initialization+0x27c>)
 80003c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c2:	4a66      	ldr	r2, [pc, #408]	; (800055c <initialization+0x27c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c8:	6413      	str	r3, [r2, #64]	; 0x40

	// Freq
	RCC->CR |= RCC_CR_HSION;
 80003ca:	4b64      	ldr	r3, [pc, #400]	; (800055c <initialization+0x27c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a63      	ldr	r2, [pc, #396]	; (800055c <initialization+0x27c>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSIRDY));
 80003d6:	bf00      	nop
 80003d8:	4b60      	ldr	r3, [pc, #384]	; (800055c <initialization+0x27c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0302 	and.w	r3, r3, #2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <initialization+0xf8>
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 80003e4:	4b5e      	ldr	r3, [pc, #376]	; (8000560 <initialization+0x280>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a5d      	ldr	r2, [pc, #372]	; (8000560 <initialization+0x280>)
 80003ea:	f043 0305 	orr.w	r3, r3, #5
 80003ee:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM_Msk;
 80003f0:	4b5a      	ldr	r3, [pc, #360]	; (800055c <initialization+0x27c>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	4a59      	ldr	r2, [pc, #356]	; (800055c <initialization+0x27c>)
 80003f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003fa:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 80003fc:	4b57      	ldr	r3, [pc, #348]	; (800055c <initialization+0x27c>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	4a56      	ldr	r2, [pc, #344]	; (800055c <initialization+0x27c>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_Msk;
 8000408:	4b54      	ldr	r3, [pc, #336]	; (800055c <initialization+0x27c>)
 800040a:	685a      	ldr	r2, [r3, #4]
 800040c:	4953      	ldr	r1, [pc, #332]	; (800055c <initialization+0x27c>)
 800040e:	4b55      	ldr	r3, [pc, #340]	; (8000564 <initialization+0x284>)
 8000410:	4013      	ands	r3, r2
 8000412:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_2 | RCC_PLLCFGR_PLLN_3 | RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_6;
 8000414:	4b51      	ldr	r3, [pc, #324]	; (800055c <initialization+0x27c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a50      	ldr	r2, [pc, #320]	; (800055c <initialization+0x27c>)
 800041a:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 800041e:	6053      	str	r3, [r2, #4]
	//	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_6;
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_Msk;
 8000420:	4b4e      	ldr	r3, [pc, #312]	; (800055c <initialization+0x27c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a4d      	ldr	r2, [pc, #308]	; (800055c <initialization+0x27c>)
 8000426:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800042a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE2_2;
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <initialization+0x27c>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	4a4a      	ldr	r2, [pc, #296]	; (800055c <initialization+0x27c>)
 8000432:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8000436:	6093      	str	r3, [r2, #8]
	//	RCC->CFGR &= ~RCC_CFGR_MCO1_Msk;
	//	RCC->CFGR |= RCC_CFGR_MCO1_0 | RCC_CFGR_MCO1_1;
	//	RCC->CFGR |= RCC_CFGR_MCO1PRE_1|RCC_CFGR_MCO1PRE_2;
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000438:	4b48      	ldr	r3, [pc, #288]	; (800055c <initialization+0x27c>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a47      	ldr	r2, [pc, #284]	; (800055c <initialization+0x27c>)
 800043e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000442:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000444:	4b45      	ldr	r3, [pc, #276]	; (800055c <initialization+0x27c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a44      	ldr	r2, [pc, #272]	; (800055c <initialization+0x27c>)
 800044a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800044e:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000450:	bf00      	nop
 8000452:	4b42      	ldr	r3, [pc, #264]	; (800055c <initialization+0x27c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <initialization+0x172>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800045e:	4b3f      	ldr	r3, [pc, #252]	; (800055c <initialization+0x27c>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a3e      	ldr	r2, [pc, #248]	; (800055c <initialization+0x27c>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800046a:	bf00      	nop
 800046c:	4b3b      	ldr	r3, [pc, #236]	; (800055c <initialization+0x27c>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	f003 030c 	and.w	r3, r3, #12
 8000474:	2b08      	cmp	r3, #8
 8000476:	d1f9      	bne.n	800046c <initialization+0x18c>
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIN_5 | RCC_PLLSAICFGR_PLLSAIN_6;
 8000478:	4b38      	ldr	r3, [pc, #224]	; (800055c <initialization+0x27c>)
 800047a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800047e:	4a37      	ldr	r2, [pc, #220]	; (800055c <initialization+0x27c>)
 8000480:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIR_0 | RCC_PLLSAICFGR_PLLSAIR_2;
 8000488:	4b34      	ldr	r3, [pc, #208]	; (800055c <initialization+0x27c>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048e:	4a33      	ldr	r2, [pc, #204]	; (800055c <initialization+0x27c>)
 8000490:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->DCKCFGR1 	|= RCC_DCKCFGR1_PLLSAIDIVR_0;
 8000498:	4b30      	ldr	r3, [pc, #192]	; (800055c <initialization+0x27c>)
 800049a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800049e:	4a2f      	ldr	r2, [pc, #188]	; (800055c <initialization+0x27c>)
 80004a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->DCKCFGR1 	&= ~RCC_DCKCFGR1_PLLSAIDIVR_1;
 80004a8:	4b2c      	ldr	r3, [pc, #176]	; (800055c <initialization+0x27c>)
 80004aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004ae:	4a2b      	ldr	r2, [pc, #172]	; (800055c <initialization+0x27c>)
 80004b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80004b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->CR |= RCC_CR_PLLSAION;
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <initialization+0x27c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a27      	ldr	r2, [pc, #156]	; (800055c <initialization+0x27c>)
 80004be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c2:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLSAIRDY) == 0);
 80004c4:	bf00      	nop
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <initialization+0x27c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <initialization+0x1e6>
	//	while ((RCC->CR & RCC_CR_PLLSAIRDY) == 0);

	// PMW

	// PMW Lamp
	GPIOC->MODER |= GPIO_MODER_MODER6_1;
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <initialization+0x288>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a24      	ldr	r2, [pc, #144]	; (8000568 <initialization+0x288>)
 80004d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004dc:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= GPIO_AFRL_AFRL6_1;
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <initialization+0x288>)
 80004e0:	6a1b      	ldr	r3, [r3, #32]
 80004e2:	4a21      	ldr	r2, [pc, #132]	; (8000568 <initialization+0x288>)
 80004e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004e8:	6213      	str	r3, [r2, #32]
	TIM3->PSC = 1080;
 80004ea:	4b20      	ldr	r3, [pc, #128]	; (800056c <initialization+0x28c>)
 80004ec:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80004f0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 100;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <initialization+0x28c>)
 80004f4:	2264      	movs	r2, #100	; 0x64
 80004f6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 0;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <initialization+0x28c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <initialization+0x28c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a1a      	ldr	r2, [pc, #104]	; (800056c <initialization+0x28c>)
 8000504:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000508:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;
 800050a:	4b18      	ldr	r3, [pc, #96]	; (800056c <initialization+0x28c>)
 800050c:	6a1b      	ldr	r3, [r3, #32]
 800050e:	4a17      	ldr	r2, [pc, #92]	; (800056c <initialization+0x28c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <initialization+0x28c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <initialization+0x28c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6013      	str	r3, [r2, #0]

	//PWM on LED
	GPIOF->MODER |= GPIO_MODER_MODER8_1;
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <initialization+0x290>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <initialization+0x290>)
 8000528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052c:	6013      	str	r3, [r2, #0]
	GPIOF->AFR[1] |= GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH0_3;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <initialization+0x290>)
 8000530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000532:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <initialization+0x290>)
 8000534:	f043 0309 	orr.w	r3, r3, #9
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
	TIM13->PSC = 108;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <initialization+0x294>)
 800053c:	226c      	movs	r2, #108	; 0x6c
 800053e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM13->ARR = 40;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <initialization+0x294>)
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM13->CCR1 = 0;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <initialization+0x294>)
 8000548:	2200      	movs	r2, #0
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM13->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <initialization+0x294>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <initialization+0x294>)
 8000552:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	e00e      	b.n	8000578 <initialization+0x298>
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800
 8000560:	40023c00 	.word	0x40023c00
 8000564:	ffff803f 	.word	0xffff803f
 8000568:	40020800 	.word	0x40020800
 800056c:	40000400 	.word	0x40000400
 8000570:	40021400 	.word	0x40021400
 8000574:	40001c00 	.word	0x40001c00
	TIM13->CCER |= TIM_CCER_CC1E;
 8000578:	4ba6      	ldr	r3, [pc, #664]	; (8000814 <initialization+0x534>)
 800057a:	6a1b      	ldr	r3, [r3, #32]
 800057c:	4aa5      	ldr	r2, [pc, #660]	; (8000814 <initialization+0x534>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6213      	str	r3, [r2, #32]
	TIM13->CR1 |= TIM_CR1_CEN;
 8000584:	4ba3      	ldr	r3, [pc, #652]	; (8000814 <initialization+0x534>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4aa2      	ldr	r2, [pc, #648]	; (8000814 <initialization+0x534>)
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]
	//PWM on Buzzer
	GPIOF->MODER |= GPIO_MODER_MODER7_1;
 8000590:	4ba1      	ldr	r3, [pc, #644]	; (8000818 <initialization+0x538>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4aa0      	ldr	r2, [pc, #640]	; (8000818 <initialization+0x538>)
 8000596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800059a:	6013      	str	r3, [r2, #0]
	GPIOF->AFR[0] |= GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_1;
 800059c:	4b9e      	ldr	r3, [pc, #632]	; (8000818 <initialization+0x538>)
 800059e:	6a1b      	ldr	r3, [r3, #32]
 80005a0:	4a9d      	ldr	r2, [pc, #628]	; (8000818 <initialization+0x538>)
 80005a2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80005a6:	6213      	str	r3, [r2, #32]
	TIM11->PSC = 108;
 80005a8:	4b9c      	ldr	r3, [pc, #624]	; (800081c <initialization+0x53c>)
 80005aa:	226c      	movs	r2, #108	; 0x6c
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
	TIM11->ARR = 200;
 80005ae:	4b9b      	ldr	r3, [pc, #620]	; (800081c <initialization+0x53c>)
 80005b0:	22c8      	movs	r2, #200	; 0xc8
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM11->CCR1 = 0;
 80005b4:	4b99      	ldr	r3, [pc, #612]	; (800081c <initialization+0x53c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM11->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80005ba:	4b98      	ldr	r3, [pc, #608]	; (800081c <initialization+0x53c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a97      	ldr	r2, [pc, #604]	; (800081c <initialization+0x53c>)
 80005c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80005c4:	6193      	str	r3, [r2, #24]
	TIM11->CCER |= TIM_CCER_CC1E;
 80005c6:	4b95      	ldr	r3, [pc, #596]	; (800081c <initialization+0x53c>)
 80005c8:	6a1b      	ldr	r3, [r3, #32]
 80005ca:	4a94      	ldr	r2, [pc, #592]	; (800081c <initialization+0x53c>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6213      	str	r3, [r2, #32]
	TIM11->CR1 |= TIM_CR1_CEN;
 80005d2:	4b92      	ldr	r3, [pc, #584]	; (800081c <initialization+0x53c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a91      	ldr	r2, [pc, #580]	; (800081c <initialization+0x53c>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]
	//PWM on FAN
	GPIOF->MODER &= ~GPIO_MODER_MODER9;
 80005de:	4b8e      	ldr	r3, [pc, #568]	; (8000818 <initialization+0x538>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a8d      	ldr	r2, [pc, #564]	; (8000818 <initialization+0x538>)
 80005e4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80005e8:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= GPIO_MODER_MODER9_0;
 80005ea:	4b8b      	ldr	r3, [pc, #556]	; (8000818 <initialization+0x538>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a8a      	ldr	r2, [pc, #552]	; (8000818 <initialization+0x538>)
 80005f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005f4:	6013      	str	r3, [r2, #0]
	GPIOF->BSRR |= GPIO_BSRR_BR_9;
 80005f6:	4b88      	ldr	r3, [pc, #544]	; (8000818 <initialization+0x538>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a87      	ldr	r2, [pc, #540]	; (8000818 <initialization+0x538>)
 80005fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000600:	6193      	str	r3, [r2, #24]
//	TIM14->CR1 |= TIM_CR1_CEN;



	// Timers
	TIM2->PSC = 1080;
 8000602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000606:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 6100000;
 800060c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000610:	4a83      	ldr	r2, [pc, #524]	; (8000820 <initialization+0x540>)
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;
 8000614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM2_IRQn, 0);
 8000624:	2100      	movs	r1, #0
 8000626:	201c      	movs	r0, #28
 8000628:	f7ff fe30 	bl	800028c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800062c:	201c      	movs	r0, #28
 800062e:	f7ff fdeb 	bl	8000208 <__NVIC_EnableIRQ>
	TIM2->CR1 |= TIM_CR1_CEN;
 8000632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6013      	str	r3, [r2, #0]

	TIM5->PSC = 1080000;
 8000642:	4b78      	ldr	r3, [pc, #480]	; (8000824 <initialization+0x544>)
 8000644:	4a78      	ldr	r2, [pc, #480]	; (8000828 <initialization+0x548>)
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 1;
 8000648:	4b76      	ldr	r3, [pc, #472]	; (8000824 <initialization+0x544>)
 800064a:	2201      	movs	r2, #1
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM5->DIER |= TIM_DIER_UIE;
 800064e:	4b75      	ldr	r3, [pc, #468]	; (8000824 <initialization+0x544>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4a74      	ldr	r2, [pc, #464]	; (8000824 <initialization+0x544>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	60d3      	str	r3, [r2, #12]
	NVIC_SetPriority(TIM5_IRQn, 15);
 800065a:	210f      	movs	r1, #15
 800065c:	2032      	movs	r0, #50	; 0x32
 800065e:	f7ff fe15 	bl	800028c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM5_IRQn);
 8000662:	2032      	movs	r0, #50	; 0x32
 8000664:	f7ff fdd0 	bl	8000208 <__NVIC_EnableIRQ>

	TIM4->PSC = 108;  // ÐÑÐµÐ´Ð´ÐµÐ»Ð¸ÑÐµÐ»Ñ 100
 8000668:	4b70      	ldr	r3, [pc, #448]	; (800082c <initialization+0x54c>)
 800066a:	226c      	movs	r2, #108	; 0x6c
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 4999;  // ÐÐµÑÐ¸Ð¾Ð´ 5 (Ð·Ð°Ð´ÐµÑÐ¶ÐºÐ° 5 Ð¼Ñ)
 800066e:	4b6f      	ldr	r3, [pc, #444]	; (800082c <initialization+0x54c>)
 8000670:	f241 3287 	movw	r2, #4999	; 0x1387
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->DIER |= TIM_DIER_UIE;
 8000676:	4b6d      	ldr	r3, [pc, #436]	; (800082c <initialization+0x54c>)
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	4a6c      	ldr	r2, [pc, #432]	; (800082c <initialization+0x54c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	60d3      	str	r3, [r2, #12]
	TIM4->CR1 |= TIM_CR1_CEN;
 8000682:	4b6a      	ldr	r3, [pc, #424]	; (800082c <initialization+0x54c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a69      	ldr	r2, [pc, #420]	; (800082c <initialization+0x54c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM4_IRQn);
 800068e:	201e      	movs	r0, #30
 8000690:	f7ff fdba 	bl	8000208 <__NVIC_EnableIRQ>

	// EXTI
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PD | SYSCFG_EXTICR1_EXTI2_PG;
 8000694:	4b66      	ldr	r3, [pc, #408]	; (8000830 <initialization+0x550>)
 8000696:	689a      	ldr	r2, [r3, #8]
 8000698:	4965      	ldr	r1, [pc, #404]	; (8000830 <initialization+0x550>)
 800069a:	f240 6303 	movw	r3, #1539	; 0x603
 800069e:	4313      	orrs	r3, r2
 80006a0:	608b      	str	r3, [r1, #8]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI4_PD | SYSCFG_EXTICR2_EXTI5_PG;
 80006a2:	4b63      	ldr	r3, [pc, #396]	; (8000830 <initialization+0x550>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	4a62      	ldr	r2, [pc, #392]	; (8000830 <initialization+0x550>)
 80006a8:	f043 0363 	orr.w	r3, r3, #99	; 0x63
 80006ac:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[2] |= SYSCFG_EXTICR3_EXTI8_PE;
 80006ae:	4b60      	ldr	r3, [pc, #384]	; (8000830 <initialization+0x550>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	4a5f      	ldr	r2, [pc, #380]	; (8000830 <initialization+0x550>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6113      	str	r3, [r2, #16]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI15_PF;
 80006ba:	4b5d      	ldr	r3, [pc, #372]	; (8000830 <initialization+0x550>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a5c      	ldr	r2, [pc, #368]	; (8000830 <initialization+0x550>)
 80006c0:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80006c4:	6153      	str	r3, [r2, #20]
	EXTI->IMR |= EXTI_IMR_MR0 | EXTI_IMR_MR2 | EXTI_IMR_MR4 | EXTI_IMR_MR5 | EXTI_IMR_MR8 | EXTI_IMR_MR15;
 80006c6:	4b5b      	ldr	r3, [pc, #364]	; (8000834 <initialization+0x554>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	495a      	ldr	r1, [pc, #360]	; (8000834 <initialization+0x554>)
 80006cc:	f248 1335 	movw	r3, #33077	; 0x8135
 80006d0:	4313      	orrs	r3, r2
 80006d2:	600b      	str	r3, [r1, #0]

	EXTI->FTSR |= EXTI_FTSR_TR0 | EXTI_FTSR_TR2 | EXTI_FTSR_TR4 | EXTI_FTSR_TR5 | EXTI_FTSR_TR8 | EXTI_FTSR_TR15;
 80006d4:	4b57      	ldr	r3, [pc, #348]	; (8000834 <initialization+0x554>)
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	4956      	ldr	r1, [pc, #344]	; (8000834 <initialization+0x554>)
 80006da:	f248 1335 	movw	r3, #33077	; 0x8135
 80006de:	4313      	orrs	r3, r2
 80006e0:	60cb      	str	r3, [r1, #12]
	//	EXTI->RTSR |= EXTI_RTSR_TR0 | EXTI_RTSR_TR2 | EXTI_RTSR_TR4  | EXTI_RTSR_TR5 | EXTI_RTSR_TR8 | EXTI_RTSR_TR15;
	EXTI->RTSR |= EXTI_RTSR_TR4;
 80006e2:	4b54      	ldr	r3, [pc, #336]	; (8000834 <initialization+0x554>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	4a53      	ldr	r2, [pc, #332]	; (8000834 <initialization+0x554>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	6093      	str	r3, [r2, #8]

	NVIC_SetPriority(EXTI0_IRQn, 15);
 80006ee:	210f      	movs	r1, #15
 80006f0:	2006      	movs	r0, #6
 80006f2:	f7ff fdcb 	bl	800028c <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI2_IRQn, 15);
 80006f6:	210f      	movs	r1, #15
 80006f8:	2008      	movs	r0, #8
 80006fa:	f7ff fdc7 	bl	800028c <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI4_IRQn, 15);
 80006fe:	210f      	movs	r1, #15
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff fdc3 	bl	800028c <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI9_5_IRQn, 15);
 8000706:	210f      	movs	r1, #15
 8000708:	2017      	movs	r0, #23
 800070a:	f7ff fdbf 	bl	800028c <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI15_10_IRQn, 15);
 800070e:	210f      	movs	r1, #15
 8000710:	2028      	movs	r0, #40	; 0x28
 8000712:	f7ff fdbb 	bl	800028c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000716:	2006      	movs	r0, #6
 8000718:	f7ff fd76 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 800071c:	2008      	movs	r0, #8
 800071e:	f7ff fd73 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000722:	200a      	movs	r0, #10
 8000724:	f7ff fd70 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000728:	2017      	movs	r0, #23
 800072a:	f7ff fd6d 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f7ff fd6a 	bl	8000208 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000734:	b662      	cpsie	i
}
 8000736:	bf00      	nop
	//	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1 | GPIO_OSPEEDER_OSPEEDR8_0;
	//	GPIOA->AFR[1] &= ~GPIO_AFRH_AFRH0_Msk;
	//	GPIOA->AFR[1] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
	///
	//B0 PE4
	GPIOE->MODER   &= ~GPIO_MODER_MODER4;
 8000738:	4b3f      	ldr	r3, [pc, #252]	; (8000838 <initialization+0x558>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a3e      	ldr	r2, [pc, #248]	; (8000838 <initialization+0x558>)
 800073e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000742:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |= GPIO_MODER_MODER4_1;
 8000744:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <initialization+0x558>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a3b      	ldr	r2, [pc, #236]	; (8000838 <initialization+0x558>)
 800074a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074e:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <initialization+0x558>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	4a38      	ldr	r2, [pc, #224]	; (8000838 <initialization+0x558>)
 8000756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075a:	6093      	str	r3, [r2, #8]
	GPIOE->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <initialization+0x558>)
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	4a35      	ldr	r2, [pc, #212]	; (8000838 <initialization+0x558>)
 8000762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000766:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <initialization+0x558>)
 800076a:	6a1b      	ldr	r3, [r3, #32]
 800076c:	4a32      	ldr	r2, [pc, #200]	; (8000838 <initialization+0x558>)
 800076e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000772:	6213      	str	r3, [r2, #32]

	//B1 PJ13
	GPIOJ->MODER   &= ~GPIO_MODER_MODER13;
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <initialization+0x55c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a30      	ldr	r2, [pc, #192]	; (800083c <initialization+0x55c>)
 800077a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800077e:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER13_1;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <initialization+0x55c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <initialization+0x55c>)
 8000786:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800078a:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1;
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <initialization+0x55c>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4a2a      	ldr	r2, [pc, #168]	; (800083c <initialization+0x55c>)
 8000792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000796:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL5_0;
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <initialization+0x55c>)
 800079a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <initialization+0x55c>)
 800079e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007a2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <initialization+0x55c>)
 80007a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a8:	4a24      	ldr	r2, [pc, #144]	; (800083c <initialization+0x55c>)
 80007aa:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80007ae:	6253      	str	r3, [r2, #36]	; 0x24

	//B2 PJ14
	GPIOJ->MODER   &= ~GPIO_MODER_MODER14;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <initialization+0x55c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <initialization+0x55c>)
 80007b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80007ba:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER14_1;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <initialization+0x55c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <initialization+0x55c>)
 80007c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007c6:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <initialization+0x55c>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <initialization+0x55c>)
 80007ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007d2:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <initialization+0x55c>)
 80007d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <initialization+0x55c>)
 80007da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007de:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <initialization+0x55c>)
 80007e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e4:	4a15      	ldr	r2, [pc, #84]	; (800083c <initialization+0x55c>)
 80007e6:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80007ea:	6253      	str	r3, [r2, #36]	; 0x24

	//B3 PJ15
	GPIOJ->MODER   &= ~GPIO_MODER_MODER15;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <initialization+0x55c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <initialization+0x55c>)
 80007f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80007f6:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER15_1;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <initialization+0x55c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0f      	ldr	r2, [pc, #60]	; (800083c <initialization+0x55c>)
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <initialization+0x55c>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <initialization+0x55c>)
 800080a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800080e:	6093      	str	r3, [r2, #8]
 8000810:	e016      	b.n	8000840 <initialization+0x560>
 8000812:	bf00      	nop
 8000814:	40001c00 	.word	0x40001c00
 8000818:	40021400 	.word	0x40021400
 800081c:	40014800 	.word	0x40014800
 8000820:	005d1420 	.word	0x005d1420
 8000824:	40000c00 	.word	0x40000c00
 8000828:	00107ac0 	.word	0x00107ac0
 800082c:	40000800 	.word	0x40000800
 8000830:	40013800 	.word	0x40013800
 8000834:	40013c00 	.word	0x40013c00
 8000838:	40021000 	.word	0x40021000
 800083c:	40022400 	.word	0x40022400
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 8000840:	4b98      	ldr	r3, [pc, #608]	; (8000aa4 <initialization+0x7c4>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	4a97      	ldr	r2, [pc, #604]	; (8000aa4 <initialization+0x7c4>)
 8000846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800084a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800084c:	4b95      	ldr	r3, [pc, #596]	; (8000aa4 <initialization+0x7c4>)
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	4a94      	ldr	r2, [pc, #592]	; (8000aa4 <initialization+0x7c4>)
 8000852:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000856:	6253      	str	r3, [r2, #36]	; 0x24

	//B4 PJ12
	GPIOJ->MODER   &= ~GPIO_MODER_MODER12;
 8000858:	4b92      	ldr	r3, [pc, #584]	; (8000aa4 <initialization+0x7c4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a91      	ldr	r2, [pc, #580]	; (8000aa4 <initialization+0x7c4>)
 800085e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000862:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER12_1;
 8000864:	4b8f      	ldr	r3, [pc, #572]	; (8000aa4 <initialization+0x7c4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a8e      	ldr	r2, [pc, #568]	; (8000aa4 <initialization+0x7c4>)
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086e:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12_1;
 8000870:	4b8c      	ldr	r3, [pc, #560]	; (8000aa4 <initialization+0x7c4>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4a8b      	ldr	r2, [pc, #556]	; (8000aa4 <initialization+0x7c4>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800087a:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL4_0;
 800087c:	4b89      	ldr	r3, [pc, #548]	; (8000aa4 <initialization+0x7c4>)
 800087e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000880:	4a88      	ldr	r2, [pc, #544]	; (8000aa4 <initialization+0x7c4>)
 8000882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000886:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000888:	4b86      	ldr	r3, [pc, #536]	; (8000aa4 <initialization+0x7c4>)
 800088a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088c:	4a85      	ldr	r2, [pc, #532]	; (8000aa4 <initialization+0x7c4>)
 800088e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000892:	6253      	str	r3, [r2, #36]	; 0x24

	//B5 PK4
	GPIOK->MODER   &= ~GPIO_MODER_MODER4;
 8000894:	4b84      	ldr	r3, [pc, #528]	; (8000aa8 <initialization+0x7c8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a83      	ldr	r2, [pc, #524]	; (8000aa8 <initialization+0x7c8>)
 800089a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800089e:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER4_1;
 80008a0:	4b81      	ldr	r3, [pc, #516]	; (8000aa8 <initialization+0x7c8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a80      	ldr	r2, [pc, #512]	; (8000aa8 <initialization+0x7c8>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008aa:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 80008ac:	4b7e      	ldr	r3, [pc, #504]	; (8000aa8 <initialization+0x7c8>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4a7d      	ldr	r2, [pc, #500]	; (8000aa8 <initialization+0x7c8>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b6:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 80008b8:	4b7b      	ldr	r3, [pc, #492]	; (8000aa8 <initialization+0x7c8>)
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4a7a      	ldr	r2, [pc, #488]	; (8000aa8 <initialization+0x7c8>)
 80008be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c2:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 80008c4:	4b78      	ldr	r3, [pc, #480]	; (8000aa8 <initialization+0x7c8>)
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	4a77      	ldr	r2, [pc, #476]	; (8000aa8 <initialization+0x7c8>)
 80008ca:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80008ce:	6213      	str	r3, [r2, #32]

	//B6 PK5
	GPIOK->MODER   &= ~GPIO_MODER_MODER5;
 80008d0:	4b75      	ldr	r3, [pc, #468]	; (8000aa8 <initialization+0x7c8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a74      	ldr	r2, [pc, #464]	; (8000aa8 <initialization+0x7c8>)
 80008d6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008da:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER5_1;
 80008dc:	4b72      	ldr	r3, [pc, #456]	; (8000aa8 <initialization+0x7c8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a71      	ldr	r2, [pc, #452]	; (8000aa8 <initialization+0x7c8>)
 80008e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008e6:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 80008e8:	4b6f      	ldr	r3, [pc, #444]	; (8000aa8 <initialization+0x7c8>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	4a6e      	ldr	r2, [pc, #440]	; (8000aa8 <initialization+0x7c8>)
 80008ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f2:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 80008f4:	4b6c      	ldr	r3, [pc, #432]	; (8000aa8 <initialization+0x7c8>)
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4a6b      	ldr	r2, [pc, #428]	; (8000aa8 <initialization+0x7c8>)
 80008fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80008fe:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000900:	4b69      	ldr	r3, [pc, #420]	; (8000aa8 <initialization+0x7c8>)
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	4a68      	ldr	r2, [pc, #416]	; (8000aa8 <initialization+0x7c8>)
 8000906:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800090a:	6213      	str	r3, [r2, #32]

	//B7 PK6
	GPIOK->MODER   &= ~GPIO_MODER_MODER6;
 800090c:	4b66      	ldr	r3, [pc, #408]	; (8000aa8 <initialization+0x7c8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a65      	ldr	r2, [pc, #404]	; (8000aa8 <initialization+0x7c8>)
 8000912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000916:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER6_1;
 8000918:	4b63      	ldr	r3, [pc, #396]	; (8000aa8 <initialization+0x7c8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a62      	ldr	r2, [pc, #392]	; (8000aa8 <initialization+0x7c8>)
 800091e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000922:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 8000924:	4b60      	ldr	r3, [pc, #384]	; (8000aa8 <initialization+0x7c8>)
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	4a5f      	ldr	r2, [pc, #380]	; (8000aa8 <initialization+0x7c8>)
 800092a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800092e:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 8000930:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <initialization+0x7c8>)
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4a5c      	ldr	r2, [pc, #368]	; (8000aa8 <initialization+0x7c8>)
 8000936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800093a:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 800093c:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <initialization+0x7c8>)
 800093e:	6a1b      	ldr	r3, [r3, #32]
 8000940:	4a59      	ldr	r2, [pc, #356]	; (8000aa8 <initialization+0x7c8>)
 8000942:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000946:	6213      	str	r3, [r2, #32]

	//R0 PI15
	GPIOI->MODER   &= ~GPIO_MODER_MODER15;
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <initialization+0x7cc>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a57      	ldr	r2, [pc, #348]	; (8000aac <initialization+0x7cc>)
 800094e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000952:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER15_1;
 8000954:	4b55      	ldr	r3, [pc, #340]	; (8000aac <initialization+0x7cc>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a54      	ldr	r2, [pc, #336]	; (8000aac <initialization+0x7cc>)
 800095a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095e:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <initialization+0x7cc>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	4a51      	ldr	r2, [pc, #324]	; (8000aac <initialization+0x7cc>)
 8000966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800096a:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 800096c:	4b4f      	ldr	r3, [pc, #316]	; (8000aac <initialization+0x7cc>)
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	4a4e      	ldr	r2, [pc, #312]	; (8000aac <initialization+0x7cc>)
 8000972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000976:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000978:	4b4c      	ldr	r3, [pc, #304]	; (8000aac <initialization+0x7cc>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	4a4b      	ldr	r2, [pc, #300]	; (8000aac <initialization+0x7cc>)
 800097e:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000982:	6253      	str	r3, [r2, #36]	; 0x24

	//R1 PJ0
	GPIOJ->MODER   &= ~GPIO_MODER_MODER0;
 8000984:	4b47      	ldr	r3, [pc, #284]	; (8000aa4 <initialization+0x7c4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a46      	ldr	r2, [pc, #280]	; (8000aa4 <initialization+0x7c4>)
 800098a:	f023 0303 	bic.w	r3, r3, #3
 800098e:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER0_1;
 8000990:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <initialization+0x7c4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a43      	ldr	r2, [pc, #268]	; (8000aa4 <initialization+0x7c4>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <initialization+0x7c4>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <initialization+0x7c4>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <initialization+0x7c4>)
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	4a3d      	ldr	r2, [pc, #244]	; (8000aa4 <initialization+0x7c4>)
 80009ae:	f023 0301 	bic.w	r3, r3, #1
 80009b2:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 80009b4:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <initialization+0x7c4>)
 80009b6:	6a1b      	ldr	r3, [r3, #32]
 80009b8:	4a3a      	ldr	r2, [pc, #232]	; (8000aa4 <initialization+0x7c4>)
 80009ba:	f043 030e 	orr.w	r3, r3, #14
 80009be:	6213      	str	r3, [r2, #32]

	//R2 PJ1
	GPIOJ->MODER   &= ~GPIO_MODER_MODER1;
 80009c0:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <initialization+0x7c4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a37      	ldr	r2, [pc, #220]	; (8000aa4 <initialization+0x7c4>)
 80009c6:	f023 030c 	bic.w	r3, r3, #12
 80009ca:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER1_1;
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <initialization+0x7c4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a34      	ldr	r2, [pc, #208]	; (8000aa4 <initialization+0x7c4>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <initialization+0x7c4>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	4a31      	ldr	r2, [pc, #196]	; (8000aa4 <initialization+0x7c4>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <initialization+0x7c4>)
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <initialization+0x7c4>)
 80009ea:	f023 0310 	bic.w	r3, r3, #16
 80009ee:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <initialization+0x7c4>)
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <initialization+0x7c4>)
 80009f6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009fa:	6213      	str	r3, [r2, #32]

	//R3 PJ2
	GPIOJ->MODER   &= ~GPIO_MODER_MODER2;
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <initialization+0x7c4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <initialization+0x7c4>)
 8000a02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a06:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER2_1;
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <initialization+0x7c4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a25      	ldr	r2, [pc, #148]	; (8000aa4 <initialization+0x7c4>)
 8000a0e:	f043 0320 	orr.w	r3, r3, #32
 8000a12:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <initialization+0x7c4>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <initialization+0x7c4>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <initialization+0x7c4>)
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <initialization+0x7c4>)
 8000a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a2a:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <initialization+0x7c4>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <initialization+0x7c4>)
 8000a32:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000a36:	6213      	str	r3, [r2, #32]

	//R4 PJ3

	GPIOJ->MODER   &= ~GPIO_MODER_MODER3;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <initialization+0x7c4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <initialization+0x7c4>)
 8000a3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000a42:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER3_1;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <initialization+0x7c4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <initialization+0x7c4>)
 8000a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a4e:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3_1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <initialization+0x7c4>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <initialization+0x7c4>)
 8000a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5a:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL3_0;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <initialization+0x7c4>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <initialization+0x7c4>)
 8000a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a66:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <initialization+0x7c4>)
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <initialization+0x7c4>)
 8000a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000a72:	6213      	str	r3, [r2, #32]

	//R5 PJ4
	GPIOJ->MODER   &= ~GPIO_MODER_MODER4;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <initialization+0x7c4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <initialization+0x7c4>)
 8000a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a7e:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER4_1;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <initialization+0x7c4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <initialization+0x7c4>)
 8000a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8a:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <initialization+0x7c4>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <initialization+0x7c4>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <initialization+0x7c4>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	4a01      	ldr	r2, [pc, #4]	; (8000aa4 <initialization+0x7c4>)
 8000a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa2:	e005      	b.n	8000ab0 <initialization+0x7d0>
 8000aa4:	40022400 	.word	0x40022400
 8000aa8:	40022800 	.word	0x40022800
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000ab2:	4b99      	ldr	r3, [pc, #612]	; (8000d18 <initialization+0xa38>)
 8000ab4:	6a1b      	ldr	r3, [r3, #32]
 8000ab6:	4a98      	ldr	r2, [pc, #608]	; (8000d18 <initialization+0xa38>)
 8000ab8:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000abc:	6213      	str	r3, [r2, #32]

	//R6 PJ5
	GPIOJ->MODER   &= ~GPIO_MODER_MODER5;
 8000abe:	4b96      	ldr	r3, [pc, #600]	; (8000d18 <initialization+0xa38>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a95      	ldr	r2, [pc, #596]	; (8000d18 <initialization+0xa38>)
 8000ac4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ac8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER5_1;
 8000aca:	4b93      	ldr	r3, [pc, #588]	; (8000d18 <initialization+0xa38>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a92      	ldr	r2, [pc, #584]	; (8000d18 <initialization+0xa38>)
 8000ad0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ad4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 8000ad6:	4b90      	ldr	r3, [pc, #576]	; (8000d18 <initialization+0xa38>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4a8f      	ldr	r2, [pc, #572]	; (8000d18 <initialization+0xa38>)
 8000adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 8000ae2:	4b8d      	ldr	r3, [pc, #564]	; (8000d18 <initialization+0xa38>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	4a8c      	ldr	r2, [pc, #560]	; (8000d18 <initialization+0xa38>)
 8000ae8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000aec:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000aee:	4b8a      	ldr	r3, [pc, #552]	; (8000d18 <initialization+0xa38>)
 8000af0:	6a1b      	ldr	r3, [r3, #32]
 8000af2:	4a89      	ldr	r2, [pc, #548]	; (8000d18 <initialization+0xa38>)
 8000af4:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 8000af8:	6213      	str	r3, [r2, #32]

	//R7 PJ6
	GPIOJ->MODER   &= ~GPIO_MODER_MODER6;
 8000afa:	4b87      	ldr	r3, [pc, #540]	; (8000d18 <initialization+0xa38>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a86      	ldr	r2, [pc, #536]	; (8000d18 <initialization+0xa38>)
 8000b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b04:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER6_1;
 8000b06:	4b84      	ldr	r3, [pc, #528]	; (8000d18 <initialization+0xa38>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a83      	ldr	r2, [pc, #524]	; (8000d18 <initialization+0xa38>)
 8000b0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b10:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 8000b12:	4b81      	ldr	r3, [pc, #516]	; (8000d18 <initialization+0xa38>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	4a80      	ldr	r2, [pc, #512]	; (8000d18 <initialization+0xa38>)
 8000b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b1c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 8000b1e:	4b7e      	ldr	r3, [pc, #504]	; (8000d18 <initialization+0xa38>)
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	4a7d      	ldr	r2, [pc, #500]	; (8000d18 <initialization+0xa38>)
 8000b24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b28:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <initialization+0xa38>)
 8000b2c:	6a1b      	ldr	r3, [r3, #32]
 8000b2e:	4a7a      	ldr	r2, [pc, #488]	; (8000d18 <initialization+0xa38>)
 8000b30:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000b34:	6213      	str	r3, [r2, #32]

	//G0 PJ7
	GPIOJ->MODER   &= ~GPIO_MODER_MODER7;
 8000b36:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <initialization+0xa38>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a77      	ldr	r2, [pc, #476]	; (8000d18 <initialization+0xa38>)
 8000b3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b40:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER7_1;
 8000b42:	4b75      	ldr	r3, [pc, #468]	; (8000d18 <initialization+0xa38>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a74      	ldr	r2, [pc, #464]	; (8000d18 <initialization+0xa38>)
 8000b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b4c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000b4e:	4b72      	ldr	r3, [pc, #456]	; (8000d18 <initialization+0xa38>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	4a71      	ldr	r2, [pc, #452]	; (8000d18 <initialization+0xa38>)
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 8000b5a:	4b6f      	ldr	r3, [pc, #444]	; (8000d18 <initialization+0xa38>)
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4a6e      	ldr	r2, [pc, #440]	; (8000d18 <initialization+0xa38>)
 8000b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000b66:	4b6c      	ldr	r3, [pc, #432]	; (8000d18 <initialization+0xa38>)
 8000b68:	6a1b      	ldr	r3, [r3, #32]
 8000b6a:	4a6b      	ldr	r2, [pc, #428]	; (8000d18 <initialization+0xa38>)
 8000b6c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000b70:	6213      	str	r3, [r2, #32]

	//G1 PJ8
	GPIOJ->MODER   &= ~GPIO_MODER_MODER8;
 8000b72:	4b69      	ldr	r3, [pc, #420]	; (8000d18 <initialization+0xa38>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a68      	ldr	r2, [pc, #416]	; (8000d18 <initialization+0xa38>)
 8000b78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b7c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER8_1;
 8000b7e:	4b66      	ldr	r3, [pc, #408]	; (8000d18 <initialization+0xa38>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a65      	ldr	r2, [pc, #404]	; (8000d18 <initialization+0xa38>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1;
 8000b8a:	4b63      	ldr	r3, [pc, #396]	; (8000d18 <initialization+0xa38>)
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	4a62      	ldr	r2, [pc, #392]	; (8000d18 <initialization+0xa38>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL0_0;
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <initialization+0xa38>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	4a5f      	ldr	r2, [pc, #380]	; (8000d18 <initialization+0xa38>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	; (8000d18 <initialization+0xa38>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	4a5c      	ldr	r2, [pc, #368]	; (8000d18 <initialization+0xa38>)
 8000ba8:	f043 030e 	orr.w	r3, r3, #14
 8000bac:	6253      	str	r3, [r2, #36]	; 0x24

	//G2 PJ9
	GPIOJ->MODER   &= ~GPIO_MODER_MODER9;
 8000bae:	4b5a      	ldr	r3, [pc, #360]	; (8000d18 <initialization+0xa38>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a59      	ldr	r2, [pc, #356]	; (8000d18 <initialization+0xa38>)
 8000bb4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000bb8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER9_1;
 8000bba:	4b57      	ldr	r3, [pc, #348]	; (8000d18 <initialization+0xa38>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a56      	ldr	r2, [pc, #344]	; (8000d18 <initialization+0xa38>)
 8000bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 8000bc6:	4b54      	ldr	r3, [pc, #336]	; (8000d18 <initialization+0xa38>)
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	4a53      	ldr	r2, [pc, #332]	; (8000d18 <initialization+0xa38>)
 8000bcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000bd2:	4b51      	ldr	r3, [pc, #324]	; (8000d18 <initialization+0xa38>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <initialization+0xa38>)
 8000bd8:	f023 0310 	bic.w	r3, r3, #16
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000bde:	4b4e      	ldr	r3, [pc, #312]	; (8000d18 <initialization+0xa38>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	4a4d      	ldr	r2, [pc, #308]	; (8000d18 <initialization+0xa38>)
 8000be4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000be8:	6253      	str	r3, [r2, #36]	; 0x24

	//G3 PJ10
	GPIOJ->MODER   &= ~GPIO_MODER_MODER10;
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <initialization+0xa38>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a4a      	ldr	r2, [pc, #296]	; (8000d18 <initialization+0xa38>)
 8000bf0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000bf4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER10_1;
 8000bf6:	4b48      	ldr	r3, [pc, #288]	; (8000d18 <initialization+0xa38>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a47      	ldr	r2, [pc, #284]	; (8000d18 <initialization+0xa38>)
 8000bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c00:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000c02:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <initialization+0xa38>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <initialization+0xa38>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <initialization+0xa38>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	4a41      	ldr	r2, [pc, #260]	; (8000d18 <initialization+0xa38>)
 8000c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c18:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <initialization+0xa38>)
 8000c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1e:	4a3e      	ldr	r2, [pc, #248]	; (8000d18 <initialization+0xa38>)
 8000c20:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000c24:	6253      	str	r3, [r2, #36]	; 0x24

	//G4 PJ11
	GPIOJ->MODER   &= ~GPIO_MODER_MODER11;
 8000c26:	4b3c      	ldr	r3, [pc, #240]	; (8000d18 <initialization+0xa38>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a3b      	ldr	r2, [pc, #236]	; (8000d18 <initialization+0xa38>)
 8000c2c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000c30:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER11_1;
 8000c32:	4b39      	ldr	r3, [pc, #228]	; (8000d18 <initialization+0xa38>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a38      	ldr	r2, [pc, #224]	; (8000d18 <initialization+0xa38>)
 8000c38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c3c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_1;
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <initialization+0xa38>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <initialization+0xa38>)
 8000c44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c48:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL3_0;
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <initialization+0xa38>)
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4e:	4a32      	ldr	r2, [pc, #200]	; (8000d18 <initialization+0xa38>)
 8000c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c54:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <initialization+0xa38>)
 8000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <initialization+0xa38>)
 8000c5c:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c60:	6253      	str	r3, [r2, #36]	; 0x24

	//G5 PK0
	GPIOK->MODER   &= ~GPIO_MODER_MODER0;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <initialization+0xa3c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a2d      	ldr	r2, [pc, #180]	; (8000d1c <initialization+0xa3c>)
 8000c68:	f023 0303 	bic.w	r3, r3, #3
 8000c6c:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER0_1;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <initialization+0xa3c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <initialization+0xa3c>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <initialization+0xa3c>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <initialization+0xa3c>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <initialization+0xa3c>)
 8000c88:	6a1b      	ldr	r3, [r3, #32]
 8000c8a:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <initialization+0xa3c>)
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <initialization+0xa3c>)
 8000c94:	6a1b      	ldr	r3, [r3, #32]
 8000c96:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <initialization+0xa3c>)
 8000c98:	f043 030e 	orr.w	r3, r3, #14
 8000c9c:	6213      	str	r3, [r2, #32]

	//G6 PK1
	GPIOK->MODER   &= ~GPIO_MODER_MODER1;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <initialization+0xa3c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <initialization+0xa3c>)
 8000ca4:	f023 030c 	bic.w	r3, r3, #12
 8000ca8:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER1_1;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <initialization+0xa3c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <initialization+0xa3c>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <initialization+0xa3c>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <initialization+0xa3c>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <initialization+0xa3c>)
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <initialization+0xa3c>)
 8000cc8:	f023 0310 	bic.w	r3, r3, #16
 8000ccc:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <initialization+0xa3c>)
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <initialization+0xa3c>)
 8000cd4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000cd8:	6213      	str	r3, [r2, #32]

	//G7 PK2
	GPIOK->MODER   &= ~GPIO_MODER_MODER2;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <initialization+0xa3c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <initialization+0xa3c>)
 8000ce0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ce4:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER2_1;
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <initialization+0xa3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <initialization+0xa3c>)
 8000cec:	f043 0320 	orr.w	r3, r3, #32
 8000cf0:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <initialization+0xa3c>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <initialization+0xa3c>)
 8000cf8:	f043 0320 	orr.w	r3, r3, #32
 8000cfc:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <initialization+0xa3c>)
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <initialization+0xa3c>)
 8000d04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d08:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000d0a:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <initialization+0xa3c>)
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <initialization+0xa3c>)
 8000d10:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000d14:	e004      	b.n	8000d20 <initialization+0xa40>
 8000d16:	bf00      	nop
 8000d18:	40022400 	.word	0x40022400
 8000d1c:	40022800 	.word	0x40022800
 8000d20:	6213      	str	r3, [r2, #32]

	//VSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER9;
 8000d22:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <initialization+0xc28>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a78      	ldr	r2, [pc, #480]	; (8000f08 <initialization+0xc28>)
 8000d28:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000d2c:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER9_1;
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <initialization+0xc28>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a75      	ldr	r2, [pc, #468]	; (8000f08 <initialization+0xc28>)
 8000d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d38:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 8000d3a:	4b73      	ldr	r3, [pc, #460]	; (8000f08 <initialization+0xc28>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	4a72      	ldr	r2, [pc, #456]	; (8000f08 <initialization+0xc28>)
 8000d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d44:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000d46:	4b70      	ldr	r3, [pc, #448]	; (8000f08 <initialization+0xc28>)
 8000d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4a:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <initialization+0xc28>)
 8000d4c:	f023 0310 	bic.w	r3, r3, #16
 8000d50:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000d52:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <initialization+0xc28>)
 8000d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d56:	4a6c      	ldr	r2, [pc, #432]	; (8000f08 <initialization+0xc28>)
 8000d58:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000d5c:	6253      	str	r3, [r2, #36]	; 0x24

	//HSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER10;
 8000d5e:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <initialization+0xc28>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a69      	ldr	r2, [pc, #420]	; (8000f08 <initialization+0xc28>)
 8000d64:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000d68:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER10_1;
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <initialization+0xc28>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <initialization+0xc28>)
 8000d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d74:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <initialization+0xc28>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <initialization+0xc28>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d80:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000d82:	4b61      	ldr	r3, [pc, #388]	; (8000f08 <initialization+0xc28>)
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	4a60      	ldr	r2, [pc, #384]	; (8000f08 <initialization+0xc28>)
 8000d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d8c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000d8e:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <initialization+0xc28>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	4a5d      	ldr	r2, [pc, #372]	; (8000f08 <initialization+0xc28>)
 8000d94:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000d98:	6253      	str	r3, [r2, #36]	; 0x24

	//CLK
	GPIOI->MODER   &= ~GPIO_MODER_MODER14;
 8000d9a:	4b5b      	ldr	r3, [pc, #364]	; (8000f08 <initialization+0xc28>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a5a      	ldr	r2, [pc, #360]	; (8000f08 <initialization+0xc28>)
 8000da0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000da4:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER14_1;
 8000da6:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <initialization+0xc28>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <initialization+0xc28>)
 8000dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000db0:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 8000db2:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <initialization+0xc28>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a54      	ldr	r2, [pc, #336]	; (8000f08 <initialization+0xc28>)
 8000db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dbc:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000dbe:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <initialization+0xc28>)
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	4a51      	ldr	r2, [pc, #324]	; (8000f08 <initialization+0xc28>)
 8000dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dc8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000dca:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <initialization+0xc28>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	4a4e      	ldr	r2, [pc, #312]	; (8000f08 <initialization+0xc28>)
 8000dd0:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000dd4:	6253      	str	r3, [r2, #36]	; 0x24

	//DE
	GPIOK->MODER   &= ~GPIO_MODER_MODER7;
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <initialization+0xc2c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a4c      	ldr	r2, [pc, #304]	; (8000f0c <initialization+0xc2c>)
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000de0:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER7_1;
 8000de2:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <initialization+0xc2c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a49      	ldr	r2, [pc, #292]	; (8000f0c <initialization+0xc2c>)
 8000de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dec:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000dee:	4b47      	ldr	r3, [pc, #284]	; (8000f0c <initialization+0xc2c>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	4a46      	ldr	r2, [pc, #280]	; (8000f0c <initialization+0xc2c>)
 8000df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df8:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 8000dfa:	4b44      	ldr	r3, [pc, #272]	; (8000f0c <initialization+0xc2c>)
 8000dfc:	6a1b      	ldr	r3, [r3, #32]
 8000dfe:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <initialization+0xc2c>)
 8000e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e04:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <initialization+0xc2c>)
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	4a40      	ldr	r2, [pc, #256]	; (8000f0c <initialization+0xc2c>)
 8000e0c:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000e10:	6213      	str	r3, [r2, #32]

	//LED
	TIM13->CCR1 = 40;
 8000e12:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <initialization+0xc30>)
 8000e14:	2228      	movs	r2, #40	; 0x28
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34

	//DE
	GPIOI->MODER &= ~GPIO_MODER_MODER12;
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <initialization+0xc28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a3a      	ldr	r2, [pc, #232]	; (8000f08 <initialization+0xc28>)
 8000e1e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000e22:	6013      	str	r3, [r2, #0]
	GPIOI->MODER |= GPIO_MODER_MODER12_0;
 8000e24:	4b38      	ldr	r3, [pc, #224]	; (8000f08 <initialization+0xc28>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a37      	ldr	r2, [pc, #220]	; (8000f08 <initialization+0xc28>)
 8000e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e2e:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BS_12;
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <initialization+0xc28>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <initialization+0xc28>)
 8000e36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3a:	6193      	str	r3, [r2, #24]

	LTDC->SSCR |= ((DISPLAY_HSYNC - 1) << 16 | (DISPLAY_VSYNC - 1));
 8000e3c:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <initialization+0xc34>)
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4934      	ldr	r1, [pc, #208]	; (8000f14 <initialization+0xc34>)
 8000e42:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <initialization+0xc38>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	608b      	str	r3, [r1, #8]
	LTDC->BPCR |= ((DISPLAY_HSYNC+DISPLAY_HBP-1) << 16 | (DISPLAY_VSYNC+DISPLAY_VBP-1));
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <initialization+0xc34>)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	4931      	ldr	r1, [pc, #196]	; (8000f14 <initialization+0xc34>)
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <initialization+0xc3c>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60cb      	str	r3, [r1, #12]
	LTDC->AWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP - 1) << 16 | (DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1));
 8000e54:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <initialization+0xc34>)
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	492e      	ldr	r1, [pc, #184]	; (8000f14 <initialization+0xc34>)
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <initialization+0xc40>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	610b      	str	r3, [r1, #16]
	LTDC->TWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP + DISPLAY_HFP -1)<< 16 |(DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP + DISPLAY_VFP - 1));
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <initialization+0xc34>)
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	492b      	ldr	r1, [pc, #172]	; (8000f14 <initialization+0xc34>)
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <initialization+0xc44>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	614b      	str	r3, [r1, #20]
	LTDC_Layer2->WHPCR |= (((DISPLAY_WIDTH + DISPLAY_HBP + DISPLAY_HSYNC - 1) << 16) | (DISPLAY_HBP + DISPLAY_HSYNC));
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <initialization+0xc48>)
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	492d      	ldr	r1, [pc, #180]	; (8000f28 <initialization+0xc48>)
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <initialization+0xc4c>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	604b      	str	r3, [r1, #4]
	LTDC_Layer2->WVPCR |= (((DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1) << 16) |(DISPLAY_VSYNC + DISPLAY_VBP));
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <initialization+0xc48>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	492a      	ldr	r1, [pc, #168]	; (8000f28 <initialization+0xc48>)
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <initialization+0xc50>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	608b      	str	r3, [r1, #8]
	LTDC_Layer2->PFCR = 2;
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <initialization+0xc48>)
 8000e86:	2202      	movs	r2, #2
 8000e88:	611a      	str	r2, [r3, #16]
	LTDC_Layer2->BFCR |= ((4 << 8) | 5);
 8000e8a:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <initialization+0xc48>)
 8000e8c:	69da      	ldr	r2, [r3, #28]
 8000e8e:	4926      	ldr	r1, [pc, #152]	; (8000f28 <initialization+0xc48>)
 8000e90:	f240 4305 	movw	r3, #1029	; 0x405
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61cb      	str	r3, [r1, #28]
	LTDC_Layer2->CACR = 0xff;
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <initialization+0xc48>)
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	615a      	str	r2, [r3, #20]
	LTDC_Layer2->CFBLR |= (((PIXEL_SIZE * DISPLAY_WIDTH) << 16) | (PIXEL_SIZE * DISPLAY_WIDTH + 3));
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <initialization+0xc48>)
 8000ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea2:	4921      	ldr	r1, [pc, #132]	; (8000f28 <initialization+0xc48>)
 8000ea4:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <initialization+0xc54>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
	LTDC_Layer2->CFBLNR |= DISPLAY_HEIGHT;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <initialization+0xc48>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <initialization+0xc48>)
 8000eb0:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
	LTDC_Layer2->CR |= LTDC_LxCR_LEN;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <initialization+0xc48>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <initialization+0xc48>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6013      	str	r3, [r2, #0]
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <initialization+0xc34>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <initialization+0xc34>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6253      	str	r3, [r2, #36]	; 0x24
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <initialization+0xc34>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <initialization+0xc34>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]

	for(int i = 0; i <= 130559; ++i)
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	e00a      	b.n	8000ef6 <initialization+0xc16>
		screen[i] = main_picture[i];
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <initialization+0xc58>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <initialization+0xc5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 130559; ++i)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000efc:	dbf0      	blt.n	8000ee0 <initialization+0xc00>
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40022000 	.word	0x40022000
 8000f0c:	40022800 	.word	0x40022800
 8000f10:	40001c00 	.word	0x40001c00
 8000f14:	40016800 	.word	0x40016800
 8000f18:	001d0009 	.word	0x001d0009
 8000f1c:	002a000b 	.word	0x002a000b
 8000f20:	020a011b 	.word	0x020a011b
 8000f24:	022a011d 	.word	0x022a011d
 8000f28:	40016904 	.word	0x40016904
 8000f2c:	020a002b 	.word	0x020a002b
 8000f30:	011b000c 	.word	0x011b000c
 8000f34:	07800783 	.word	0x07800783
 8000f38:	080acc24 	.word	0x080acc24
 8000f3c:	2000001c 	.word	0x2000001c

08000f40 <change_digit_set_time>:


void change_digit_set_time(int pozition, int digit)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b09b      	sub	sp, #108	; 0x6c
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	int x = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	667b      	str	r3, [r7, #100]	; 0x64
	int k = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	663b      	str	r3, [r7, #96]	; 0x60

	if(pozition==1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <change_digit_set_time+0x1c>
		x = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	667b      	str	r3, [r7, #100]	; 0x64
	if(pozition==2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d101      	bne.n	8000f66 <change_digit_set_time+0x26>
		x = 38;
 8000f62:	2326      	movs	r3, #38	; 0x26
 8000f64:	667b      	str	r3, [r7, #100]	; 0x64
	if(pozition==3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d101      	bne.n	8000f70 <change_digit_set_time+0x30>
		x = 86;
 8000f6c:	2356      	movs	r3, #86	; 0x56
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
	if(pozition==4)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d101      	bne.n	8000f7a <change_digit_set_time+0x3a>
		x = 124;
 8000f76:	237c      	movs	r3, #124	; 0x7c
 8000f78:	667b      	str	r3, [r7, #100]	; 0x64

	if(digit==10)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b0a      	cmp	r3, #10
 8000f7e:	d126      	bne.n	8000fce <change_digit_set_time+0x8e>
		for(int i = 0; i <= 57; ++i)
 8000f80:	2300      	movs	r3, #0
 8000f82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f84:	e020      	b.n	8000fc8 <change_digit_set_time+0x88>
			for(int j = 0; j <= 32; ++j)
 8000f86:	2300      	movs	r3, #0
 8000f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f8a:	e017      	b.n	8000fbc <change_digit_set_time+0x7c>
				screen[x+5113+i*480+j] = none_picture_3[k++];
 8000f8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f8e:	1c4b      	adds	r3, r1, #1
 8000f90:	663b      	str	r3, [r7, #96]	; 0x60
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000f98:	441a      	add	r2, r3
 8000f9a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	1a1b      	subs	r3, r3, r0
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	441a      	add	r2, r3
 8000fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fa8:	4413      	add	r3, r2
 8000faa:	4aa0      	ldr	r2, [pc, #640]	; (800122c <change_digit_set_time+0x2ec>)
 8000fac:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000fb0:	4a9f      	ldr	r2, [pc, #636]	; (8001230 <change_digit_set_time+0x2f0>)
 8000fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fb8:	3301      	adds	r3, #1
 8000fba:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fbe:	2b20      	cmp	r3, #32
 8000fc0:	dde4      	ble.n	8000f8c <change_digit_set_time+0x4c>
		for(int i = 0; i <= 57; ++i)
 8000fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fca:	2b39      	cmp	r3, #57	; 0x39
 8000fcc:	dddb      	ble.n	8000f86 <change_digit_set_time+0x46>
	if(digit==0)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d126      	bne.n	8001022 <change_digit_set_time+0xe2>
		for(int i = 0; i <= 57; ++i)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8000fd8:	e020      	b.n	800101c <change_digit_set_time+0xdc>
			for(int j = 0; j <= 32; ++j)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	653b      	str	r3, [r7, #80]	; 0x50
 8000fde:	e017      	b.n	8001010 <change_digit_set_time+0xd0>
				screen[x+5113+i*480+j] = zero_picture_1[k++];
 8000fe0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000fe2:	1c4b      	adds	r3, r1, #1
 8000fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8000fe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fe8:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000fec:	441a      	add	r2, r3
 8000fee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	1a1b      	subs	r3, r3, r0
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	441a      	add	r2, r3
 8000ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a8d      	ldr	r2, [pc, #564]	; (8001234 <change_digit_set_time+0x2f4>)
 8001000:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001004:	4a8a      	ldr	r2, [pc, #552]	; (8001230 <change_digit_set_time+0x2f0>)
 8001006:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800100a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800100c:	3301      	adds	r3, #1
 800100e:	653b      	str	r3, [r7, #80]	; 0x50
 8001010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001012:	2b20      	cmp	r3, #32
 8001014:	dde4      	ble.n	8000fe0 <change_digit_set_time+0xa0>
		for(int i = 0; i <= 57; ++i)
 8001016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001018:	3301      	adds	r3, #1
 800101a:	657b      	str	r3, [r7, #84]	; 0x54
 800101c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800101e:	2b39      	cmp	r3, #57	; 0x39
 8001020:	dddb      	ble.n	8000fda <change_digit_set_time+0x9a>
	if(digit==1)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d126      	bne.n	8001076 <change_digit_set_time+0x136>
		for(int i = 0; i <= 57; ++i)
 8001028:	2300      	movs	r3, #0
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800102c:	e020      	b.n	8001070 <change_digit_set_time+0x130>
			for(int j = 0; j <= 32; ++j)
 800102e:	2300      	movs	r3, #0
 8001030:	64bb      	str	r3, [r7, #72]	; 0x48
 8001032:	e017      	b.n	8001064 <change_digit_set_time+0x124>
				screen[x+5113+i*480+j] = one_picture_1[k++];
 8001034:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001036:	1c4b      	adds	r3, r1, #1
 8001038:	663b      	str	r3, [r7, #96]	; 0x60
 800103a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800103c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001040:	441a      	add	r2, r3
 8001042:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001044:	4603      	mov	r3, r0
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	1a1b      	subs	r3, r3, r0
 800104a:	015b      	lsls	r3, r3, #5
 800104c:	441a      	add	r2, r3
 800104e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001050:	4413      	add	r3, r2
 8001052:	4a79      	ldr	r2, [pc, #484]	; (8001238 <change_digit_set_time+0x2f8>)
 8001054:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001058:	4a75      	ldr	r2, [pc, #468]	; (8001230 <change_digit_set_time+0x2f0>)
 800105a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800105e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001060:	3301      	adds	r3, #1
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
 8001064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001066:	2b20      	cmp	r3, #32
 8001068:	dde4      	ble.n	8001034 <change_digit_set_time+0xf4>
		for(int i = 0; i <= 57; ++i)
 800106a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800106c:	3301      	adds	r3, #1
 800106e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001072:	2b39      	cmp	r3, #57	; 0x39
 8001074:	dddb      	ble.n	800102e <change_digit_set_time+0xee>
	if(digit==2)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d126      	bne.n	80010ca <change_digit_set_time+0x18a>
		for(int i = 0; i <= 57; ++i)
 800107c:	2300      	movs	r3, #0
 800107e:	647b      	str	r3, [r7, #68]	; 0x44
 8001080:	e020      	b.n	80010c4 <change_digit_set_time+0x184>
			for(int j = 0; j <= 32; ++j)
 8001082:	2300      	movs	r3, #0
 8001084:	643b      	str	r3, [r7, #64]	; 0x40
 8001086:	e017      	b.n	80010b8 <change_digit_set_time+0x178>
				screen[x+5113+i*480+j] = two_picture_1[k++];
 8001088:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800108a:	1c4b      	adds	r3, r1, #1
 800108c:	663b      	str	r3, [r7, #96]	; 0x60
 800108e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001090:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001094:	441a      	add	r2, r3
 8001096:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001098:	4603      	mov	r3, r0
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	1a1b      	subs	r3, r3, r0
 800109e:	015b      	lsls	r3, r3, #5
 80010a0:	441a      	add	r2, r3
 80010a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010a4:	4413      	add	r3, r2
 80010a6:	4a65      	ldr	r2, [pc, #404]	; (800123c <change_digit_set_time+0x2fc>)
 80010a8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80010ac:	4a60      	ldr	r2, [pc, #384]	; (8001230 <change_digit_set_time+0x2f0>)
 80010ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80010b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b4:	3301      	adds	r3, #1
 80010b6:	643b      	str	r3, [r7, #64]	; 0x40
 80010b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010ba:	2b20      	cmp	r3, #32
 80010bc:	dde4      	ble.n	8001088 <change_digit_set_time+0x148>
		for(int i = 0; i <= 57; ++i)
 80010be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c0:	3301      	adds	r3, #1
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
 80010c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010c6:	2b39      	cmp	r3, #57	; 0x39
 80010c8:	dddb      	ble.n	8001082 <change_digit_set_time+0x142>
	if(digit==3)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d126      	bne.n	800111e <change_digit_set_time+0x1de>
		for(int i = 0; i <= 57; ++i)
 80010d0:	2300      	movs	r3, #0
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010d4:	e020      	b.n	8001118 <change_digit_set_time+0x1d8>
			for(int j = 0; j <= 32; ++j)
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80010da:	e017      	b.n	800110c <change_digit_set_time+0x1cc>
				screen[x+5113+i*480+j] = three_picture_1[k++];
 80010dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010de:	1c4b      	adds	r3, r1, #1
 80010e0:	663b      	str	r3, [r7, #96]	; 0x60
 80010e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e4:	f241 32f9 	movw	r2, #5113	; 0x13f9
 80010e8:	441a      	add	r2, r3
 80010ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80010ec:	4603      	mov	r3, r0
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	1a1b      	subs	r3, r3, r0
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	441a      	add	r2, r3
 80010f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f8:	4413      	add	r3, r2
 80010fa:	4a51      	ldr	r2, [pc, #324]	; (8001240 <change_digit_set_time+0x300>)
 80010fc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <change_digit_set_time+0x2f0>)
 8001102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001108:	3301      	adds	r3, #1
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
 800110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110e:	2b20      	cmp	r3, #32
 8001110:	dde4      	ble.n	80010dc <change_digit_set_time+0x19c>
		for(int i = 0; i <= 57; ++i)
 8001112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001114:	3301      	adds	r3, #1
 8001116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800111a:	2b39      	cmp	r3, #57	; 0x39
 800111c:	dddb      	ble.n	80010d6 <change_digit_set_time+0x196>
	if(digit==4)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d126      	bne.n	8001172 <change_digit_set_time+0x232>
		for(int i = 0; i <= 57; ++i)
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34
 8001128:	e020      	b.n	800116c <change_digit_set_time+0x22c>
			for(int j = 0; j <= 32; ++j)
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
 800112e:	e017      	b.n	8001160 <change_digit_set_time+0x220>
				screen[x+5113+i*480+j] = four_picture_1[k++];
 8001130:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001132:	1c4b      	adds	r3, r1, #1
 8001134:	663b      	str	r3, [r7, #96]	; 0x60
 8001136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001138:	f241 32f9 	movw	r2, #5113	; 0x13f9
 800113c:	441a      	add	r2, r3
 800113e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001140:	4603      	mov	r3, r0
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	1a1b      	subs	r3, r3, r0
 8001146:	015b      	lsls	r3, r3, #5
 8001148:	441a      	add	r2, r3
 800114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114c:	4413      	add	r3, r2
 800114e:	4a3d      	ldr	r2, [pc, #244]	; (8001244 <change_digit_set_time+0x304>)
 8001150:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001154:	4a36      	ldr	r2, [pc, #216]	; (8001230 <change_digit_set_time+0x2f0>)
 8001156:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800115c:	3301      	adds	r3, #1
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
 8001160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001162:	2b20      	cmp	r3, #32
 8001164:	dde4      	ble.n	8001130 <change_digit_set_time+0x1f0>
		for(int i = 0; i <= 57; ++i)
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	3301      	adds	r3, #1
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
 800116c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800116e:	2b39      	cmp	r3, #57	; 0x39
 8001170:	dddb      	ble.n	800112a <change_digit_set_time+0x1ea>
	if(digit==5)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d126      	bne.n	80011c6 <change_digit_set_time+0x286>
		for(int i = 0; i <= 57; ++i)
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800117c:	e020      	b.n	80011c0 <change_digit_set_time+0x280>
			for(int j = 0; j <= 32; ++j)
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
 8001182:	e017      	b.n	80011b4 <change_digit_set_time+0x274>
				screen[x+5113+i*480+j] = five_picture_1[k++];
 8001184:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001186:	1c4b      	adds	r3, r1, #1
 8001188:	663b      	str	r3, [r7, #96]	; 0x60
 800118a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800118c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001190:	441a      	add	r2, r3
 8001192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001194:	4603      	mov	r3, r0
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	1a1b      	subs	r3, r3, r0
 800119a:	015b      	lsls	r3, r3, #5
 800119c:	441a      	add	r2, r3
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	4413      	add	r3, r2
 80011a2:	4a29      	ldr	r2, [pc, #164]	; (8001248 <change_digit_set_time+0x308>)
 80011a4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <change_digit_set_time+0x2f0>)
 80011aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	3301      	adds	r3, #1
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	2b20      	cmp	r3, #32
 80011b8:	dde4      	ble.n	8001184 <change_digit_set_time+0x244>
		for(int i = 0; i <= 57; ++i)
 80011ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011bc:	3301      	adds	r3, #1
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	2b39      	cmp	r3, #57	; 0x39
 80011c4:	dddb      	ble.n	800117e <change_digit_set_time+0x23e>
	if(digit==6)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d126      	bne.n	800121a <change_digit_set_time+0x2da>
		for(int i = 0; i <= 57; ++i)
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
 80011d0:	e020      	b.n	8001214 <change_digit_set_time+0x2d4>
			for(int j = 0; j <= 32; ++j)
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	e017      	b.n	8001208 <change_digit_set_time+0x2c8>
				screen[x+5113+i*480+j] = six_picture_1[k++];
 80011d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80011da:	1c4b      	adds	r3, r1, #1
 80011dc:	663b      	str	r3, [r7, #96]	; 0x60
 80011de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011e0:	f241 32f9 	movw	r2, #5113	; 0x13f9
 80011e4:	441a      	add	r2, r3
 80011e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011e8:	4603      	mov	r3, r0
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	1a1b      	subs	r3, r3, r0
 80011ee:	015b      	lsls	r3, r3, #5
 80011f0:	441a      	add	r2, r3
 80011f2:	6a3b      	ldr	r3, [r7, #32]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <change_digit_set_time+0x30c>)
 80011f8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <change_digit_set_time+0x2f0>)
 80011fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	3301      	adds	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	2b20      	cmp	r3, #32
 800120c:	dde4      	ble.n	80011d8 <change_digit_set_time+0x298>
		for(int i = 0; i <= 57; ++i)
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3301      	adds	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	2b39      	cmp	r3, #57	; 0x39
 8001218:	dddb      	ble.n	80011d2 <change_digit_set_time+0x292>
	if(digit==7)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d138      	bne.n	8001292 <change_digit_set_time+0x352>
		for(int i = 0; i <= 57; ++i)
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	e032      	b.n	800128c <change_digit_set_time+0x34c>
			for(int j = 0; j <= 32; ++j)
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	e029      	b.n	8001280 <change_digit_set_time+0x340>
 800122c:	0806436c 	.word	0x0806436c
 8001230:	2000001c 	.word	0x2000001c
 8001234:	0800b6e0 	.word	0x0800b6e0
 8001238:	08006c1c 	.word	0x08006c1c
 800123c:	0800a7ec 	.word	0x0800a7ec
 8001240:	080098f8 	.word	0x080098f8
 8001244:	08004e34 	.word	0x08004e34
 8001248:	08003f40 	.word	0x08003f40
 800124c:	08008a04 	.word	0x08008a04
				screen[x+5113+i*480+j] = seven_picture_1[k++];
 8001250:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001252:	1c4b      	adds	r3, r1, #1
 8001254:	663b      	str	r3, [r7, #96]	; 0x60
 8001256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001258:	f241 32f9 	movw	r2, #5113	; 0x13f9
 800125c:	441a      	add	r2, r3
 800125e:	69f8      	ldr	r0, [r7, #28]
 8001260:	4603      	mov	r3, r0
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	1a1b      	subs	r3, r3, r0
 8001266:	015b      	lsls	r3, r3, #5
 8001268:	441a      	add	r2, r3
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	4413      	add	r3, r2
 800126e:	4a3a      	ldr	r2, [pc, #232]	; (8001358 <change_digit_set_time+0x418>)
 8001270:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001274:	4a39      	ldr	r2, [pc, #228]	; (800135c <change_digit_set_time+0x41c>)
 8001276:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3301      	adds	r3, #1
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b20      	cmp	r3, #32
 8001284:	dde4      	ble.n	8001250 <change_digit_set_time+0x310>
		for(int i = 0; i <= 57; ++i)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b39      	cmp	r3, #57	; 0x39
 8001290:	ddc9      	ble.n	8001226 <change_digit_set_time+0x2e6>
	if(digit==8)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d126      	bne.n	80012e6 <change_digit_set_time+0x3a6>
		for(int i = 0; i <= 57; ++i)
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e020      	b.n	80012e0 <change_digit_set_time+0x3a0>
			for(int j = 0; j <= 32; ++j)
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e017      	b.n	80012d4 <change_digit_set_time+0x394>
				screen[x+5113+i*480+j] = eigth_picture_1[k++];
 80012a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012a6:	1c4b      	adds	r3, r1, #1
 80012a8:	663b      	str	r3, [r7, #96]	; 0x60
 80012aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ac:	f241 32f9 	movw	r2, #5113	; 0x13f9
 80012b0:	441a      	add	r2, r3
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	4603      	mov	r3, r0
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	1a1b      	subs	r3, r3, r0
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	441a      	add	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4413      	add	r3, r2
 80012c2:	4a27      	ldr	r2, [pc, #156]	; (8001360 <change_digit_set_time+0x420>)
 80012c4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80012c8:	4a24      	ldr	r2, [pc, #144]	; (800135c <change_digit_set_time+0x41c>)
 80012ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	3301      	adds	r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	dde4      	ble.n	80012a4 <change_digit_set_time+0x364>
		for(int i = 0; i <= 57; ++i)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b39      	cmp	r3, #57	; 0x39
 80012e4:	dddb      	ble.n	800129e <change_digit_set_time+0x35e>
	if(digit==9)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d126      	bne.n	800133a <change_digit_set_time+0x3fa>
		for(int i = 0; i <= 57; ++i)
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	e020      	b.n	8001334 <change_digit_set_time+0x3f4>
			for(int j = 0; j <= 32; ++j)
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	e017      	b.n	8001328 <change_digit_set_time+0x3e8>
				screen[x+5113+i*480+j] = nine_picture_1[k++];
 80012f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80012fa:	1c4b      	adds	r3, r1, #1
 80012fc:	663b      	str	r3, [r7, #96]	; 0x60
 80012fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001300:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001304:	441a      	add	r2, r3
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	4603      	mov	r3, r0
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	1a1b      	subs	r3, r3, r0
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	441a      	add	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4413      	add	r3, r2
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <change_digit_set_time+0x424>)
 8001318:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <change_digit_set_time+0x41c>)
 800131e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	3301      	adds	r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	2b20      	cmp	r3, #32
 800132c:	dde4      	ble.n	80012f8 <change_digit_set_time+0x3b8>
		for(int i = 0; i <= 57; ++i)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3301      	adds	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b39      	cmp	r3, #57	; 0x39
 8001338:	dddb      	ble.n	80012f2 <change_digit_set_time+0x3b2>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <change_digit_set_time+0x428>)
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <change_digit_set_time+0x41c>)
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <change_digit_set_time+0x42c>)
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <change_digit_set_time+0x42c>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800134c:	bf00      	nop
 800134e:	376c      	adds	r7, #108	; 0x6c
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	08007b10 	.word	0x08007b10
 800135c:	2000001c 	.word	0x2000001c
 8001360:	0800c5d4 	.word	0x0800c5d4
 8001364:	08005d28 	.word	0x08005d28
 8001368:	40016904 	.word	0x40016904
 800136c:	40016800 	.word	0x40016800

08001370 <change_digit_main_time>:


void change_digit_main_time(int pozition, int digit)
{
 8001370:	b480      	push	{r7}
 8001372:	b099      	sub	sp, #100	; 0x64
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	int x = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	65bb      	str	r3, [r7, #88]	; 0x58

	if(pozition==1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <change_digit_main_time+0x1c>
		x = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(pozition==2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d101      	bne.n	8001396 <change_digit_main_time+0x26>
		x = 110;
 8001392:	236e      	movs	r3, #110	; 0x6e
 8001394:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(pozition==3)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d101      	bne.n	80013a0 <change_digit_main_time+0x30>
		x = 246;
 800139c:	23f6      	movs	r3, #246	; 0xf6
 800139e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(pozition==4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d102      	bne.n	80013ac <change_digit_main_time+0x3c>
		x = 356;
 80013a6:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80013aa:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(digit==0)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d126      	bne.n	8001400 <change_digit_main_time+0x90>
		for(int i = 0; i <= 173; ++i)
 80013b2:	2300      	movs	r3, #0
 80013b4:	657b      	str	r3, [r7, #84]	; 0x54
 80013b6:	e020      	b.n	80013fa <change_digit_main_time+0x8a>
			for(int j = 0; j <= 98; ++j)
 80013b8:	2300      	movs	r3, #0
 80013ba:	653b      	str	r3, [r7, #80]	; 0x50
 80013bc:	e017      	b.n	80013ee <change_digit_main_time+0x7e>
				screen[x+42253+i*480+j] = zero_picture_2[k++];
 80013be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80013c0:	1c4b      	adds	r3, r1, #1
 80013c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80013c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c6:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80013ca:	441a      	add	r2, r3
 80013cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80013ce:	4603      	mov	r3, r0
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	1a1b      	subs	r3, r3, r0
 80013d4:	015b      	lsls	r3, r3, #5
 80013d6:	441a      	add	r2, r3
 80013d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013da:	4413      	add	r3, r2
 80013dc:	4aa0      	ldr	r2, [pc, #640]	; (8001660 <change_digit_main_time+0x2f0>)
 80013de:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80013e2:	4aa0      	ldr	r2, [pc, #640]	; (8001664 <change_digit_main_time+0x2f4>)
 80013e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80013e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ea:	3301      	adds	r3, #1
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
 80013ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f0:	2b62      	cmp	r3, #98	; 0x62
 80013f2:	dde4      	ble.n	80013be <change_digit_main_time+0x4e>
		for(int i = 0; i <= 173; ++i)
 80013f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f6:	3301      	adds	r3, #1
 80013f8:	657b      	str	r3, [r7, #84]	; 0x54
 80013fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fc:	2bad      	cmp	r3, #173	; 0xad
 80013fe:	dddb      	ble.n	80013b8 <change_digit_main_time+0x48>
	if(digit==1)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d126      	bne.n	8001454 <change_digit_main_time+0xe4>
		for(int i = 0; i <= 173; ++i)
 8001406:	2300      	movs	r3, #0
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800140a:	e020      	b.n	800144e <change_digit_main_time+0xde>
			for(int j = 0; j <= 98; ++j)
 800140c:	2300      	movs	r3, #0
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001410:	e017      	b.n	8001442 <change_digit_main_time+0xd2>
				screen[x+42253+i*480+j] = one_picture_2[k++];
 8001412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001414:	1c4b      	adds	r3, r1, #1
 8001416:	65bb      	str	r3, [r7, #88]	; 0x58
 8001418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141a:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800141e:	441a      	add	r2, r3
 8001420:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001422:	4603      	mov	r3, r0
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	1a1b      	subs	r3, r3, r0
 8001428:	015b      	lsls	r3, r3, #5
 800142a:	441a      	add	r2, r3
 800142c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800142e:	4413      	add	r3, r2
 8001430:	4a8d      	ldr	r2, [pc, #564]	; (8001668 <change_digit_main_time+0x2f8>)
 8001432:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001436:	4a8b      	ldr	r2, [pc, #556]	; (8001664 <change_digit_main_time+0x2f4>)
 8001438:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800143e:	3301      	adds	r3, #1
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
 8001442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001444:	2b62      	cmp	r3, #98	; 0x62
 8001446:	dde4      	ble.n	8001412 <change_digit_main_time+0xa2>
		for(int i = 0; i <= 173; ++i)
 8001448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800144a:	3301      	adds	r3, #1
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800144e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001450:	2bad      	cmp	r3, #173	; 0xad
 8001452:	dddb      	ble.n	800140c <change_digit_main_time+0x9c>
	if(digit==2)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d126      	bne.n	80014a8 <change_digit_main_time+0x138>
		for(int i = 0; i <= 173; ++i)
 800145a:	2300      	movs	r3, #0
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
 800145e:	e020      	b.n	80014a2 <change_digit_main_time+0x132>
			for(int j = 0; j <= 98; ++j)
 8001460:	2300      	movs	r3, #0
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
 8001464:	e017      	b.n	8001496 <change_digit_main_time+0x126>
				screen[x+42253+i*480+j] = two_picture_2[k++];
 8001466:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001468:	1c4b      	adds	r3, r1, #1
 800146a:	65bb      	str	r3, [r7, #88]	; 0x58
 800146c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800146e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001472:	441a      	add	r2, r3
 8001474:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001476:	4603      	mov	r3, r0
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	1a1b      	subs	r3, r3, r0
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	441a      	add	r2, r3
 8001480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001482:	4413      	add	r3, r2
 8001484:	4a79      	ldr	r2, [pc, #484]	; (800166c <change_digit_main_time+0x2fc>)
 8001486:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800148a:	4a76      	ldr	r2, [pc, #472]	; (8001664 <change_digit_main_time+0x2f4>)
 800148c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001492:	3301      	adds	r3, #1
 8001494:	643b      	str	r3, [r7, #64]	; 0x40
 8001496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001498:	2b62      	cmp	r3, #98	; 0x62
 800149a:	dde4      	ble.n	8001466 <change_digit_main_time+0xf6>
		for(int i = 0; i <= 173; ++i)
 800149c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800149e:	3301      	adds	r3, #1
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
 80014a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a4:	2bad      	cmp	r3, #173	; 0xad
 80014a6:	dddb      	ble.n	8001460 <change_digit_main_time+0xf0>
	if(digit==3)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d126      	bne.n	80014fc <change_digit_main_time+0x18c>
		for(int i = 0; i <= 173; ++i)
 80014ae:	2300      	movs	r3, #0
 80014b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b2:	e020      	b.n	80014f6 <change_digit_main_time+0x186>
			for(int j = 0; j <= 98; ++j)
 80014b4:	2300      	movs	r3, #0
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80014b8:	e017      	b.n	80014ea <change_digit_main_time+0x17a>
				screen[x+42253+i*480+j] = three_picture_2[k++];
 80014ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014bc:	1c4b      	adds	r3, r1, #1
 80014be:	65bb      	str	r3, [r7, #88]	; 0x58
 80014c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014c2:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80014c6:	441a      	add	r2, r3
 80014c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014ca:	4603      	mov	r3, r0
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	1a1b      	subs	r3, r3, r0
 80014d0:	015b      	lsls	r3, r3, #5
 80014d2:	441a      	add	r2, r3
 80014d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d6:	4413      	add	r3, r2
 80014d8:	4a65      	ldr	r2, [pc, #404]	; (8001670 <change_digit_main_time+0x300>)
 80014da:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80014de:	4a61      	ldr	r2, [pc, #388]	; (8001664 <change_digit_main_time+0x2f4>)
 80014e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80014e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e6:	3301      	adds	r3, #1
 80014e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	2b62      	cmp	r3, #98	; 0x62
 80014ee:	dde4      	ble.n	80014ba <change_digit_main_time+0x14a>
		for(int i = 0; i <= 173; ++i)
 80014f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f2:	3301      	adds	r3, #1
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f8:	2bad      	cmp	r3, #173	; 0xad
 80014fa:	dddb      	ble.n	80014b4 <change_digit_main_time+0x144>
	if(digit==4)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d126      	bne.n	8001550 <change_digit_main_time+0x1e0>
		for(int i = 0; i <= 173; ++i)
 8001502:	2300      	movs	r3, #0
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
 8001506:	e020      	b.n	800154a <change_digit_main_time+0x1da>
			for(int j = 0; j <= 98; ++j)
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
 800150c:	e017      	b.n	800153e <change_digit_main_time+0x1ce>
				screen[x+42253+i*480+j] = four_picture_2[k++];
 800150e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001510:	1c4b      	adds	r3, r1, #1
 8001512:	65bb      	str	r3, [r7, #88]	; 0x58
 8001514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001516:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800151a:	441a      	add	r2, r3
 800151c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800151e:	4603      	mov	r3, r0
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	1a1b      	subs	r3, r3, r0
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	441a      	add	r2, r3
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	4413      	add	r3, r2
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <change_digit_main_time+0x304>)
 800152e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001532:	4a4c      	ldr	r2, [pc, #304]	; (8001664 <change_digit_main_time+0x2f4>)
 8001534:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153a:	3301      	adds	r3, #1
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
 800153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001540:	2b62      	cmp	r3, #98	; 0x62
 8001542:	dde4      	ble.n	800150e <change_digit_main_time+0x19e>
		for(int i = 0; i <= 173; ++i)
 8001544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001546:	3301      	adds	r3, #1
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	2bad      	cmp	r3, #173	; 0xad
 800154e:	dddb      	ble.n	8001508 <change_digit_main_time+0x198>
	if(digit==5)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2b05      	cmp	r3, #5
 8001554:	d126      	bne.n	80015a4 <change_digit_main_time+0x234>
		for(int i = 0; i <= 173; ++i)
 8001556:	2300      	movs	r3, #0
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155a:	e020      	b.n	800159e <change_digit_main_time+0x22e>
			for(int j = 0; j <= 98; ++j)
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001560:	e017      	b.n	8001592 <change_digit_main_time+0x222>
				screen[x+42253+i*480+j] = five_picture_2[k++];
 8001562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001564:	1c4b      	adds	r3, r1, #1
 8001566:	65bb      	str	r3, [r7, #88]	; 0x58
 8001568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800156a:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800156e:	441a      	add	r2, r3
 8001570:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001572:	4603      	mov	r3, r0
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	1a1b      	subs	r3, r3, r0
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	441a      	add	r2, r3
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	4413      	add	r3, r2
 8001580:	4a3d      	ldr	r2, [pc, #244]	; (8001678 <change_digit_main_time+0x308>)
 8001582:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001586:	4a37      	ldr	r2, [pc, #220]	; (8001664 <change_digit_main_time+0x2f4>)
 8001588:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	3301      	adds	r3, #1
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	2b62      	cmp	r3, #98	; 0x62
 8001596:	dde4      	ble.n	8001562 <change_digit_main_time+0x1f2>
		for(int i = 0; i <= 173; ++i)
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	3301      	adds	r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	2bad      	cmp	r3, #173	; 0xad
 80015a2:	dddb      	ble.n	800155c <change_digit_main_time+0x1ec>
	if(digit==6)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d126      	bne.n	80015f8 <change_digit_main_time+0x288>
		for(int i = 0; i <= 173; ++i)
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e020      	b.n	80015f2 <change_digit_main_time+0x282>
			for(int j = 0; j <= 98; ++j)
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
 80015b4:	e017      	b.n	80015e6 <change_digit_main_time+0x276>
				screen[x+42253+i*480+j] = six_picture_2[k++];
 80015b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015b8:	1c4b      	adds	r3, r1, #1
 80015ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80015bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015be:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80015c2:	441a      	add	r2, r3
 80015c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015c6:	4603      	mov	r3, r0
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	1a1b      	subs	r3, r3, r0
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	441a      	add	r2, r3
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <change_digit_main_time+0x30c>)
 80015d6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <change_digit_main_time+0x2f4>)
 80015dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	3301      	adds	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	2b62      	cmp	r3, #98	; 0x62
 80015ea:	dde4      	ble.n	80015b6 <change_digit_main_time+0x246>
		for(int i = 0; i <= 173; ++i)
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3301      	adds	r3, #1
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	2bad      	cmp	r3, #173	; 0xad
 80015f6:	dddb      	ble.n	80015b0 <change_digit_main_time+0x240>
	if(digit==7)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b07      	cmp	r3, #7
 80015fc:	d126      	bne.n	800164c <change_digit_main_time+0x2dc>
		for(int i = 0; i <= 173; ++i)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e020      	b.n	8001646 <change_digit_main_time+0x2d6>
			for(int j = 0; j <= 98; ++j)
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	e017      	b.n	800163a <change_digit_main_time+0x2ca>
				screen[x+42253+i*480+j] = seven_picture_2[k++];
 800160a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800160c:	1c4b      	adds	r3, r1, #1
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001616:	441a      	add	r2, r3
 8001618:	69f8      	ldr	r0, [r7, #28]
 800161a:	4603      	mov	r3, r0
 800161c:	011b      	lsls	r3, r3, #4
 800161e:	1a1b      	subs	r3, r3, r0
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	441a      	add	r2, r3
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4413      	add	r3, r2
 8001628:	4a15      	ldr	r2, [pc, #84]	; (8001680 <change_digit_main_time+0x310>)
 800162a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <change_digit_main_time+0x2f4>)
 8001630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	3301      	adds	r3, #1
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b62      	cmp	r3, #98	; 0x62
 800163e:	dde4      	ble.n	800160a <change_digit_main_time+0x29a>
		for(int i = 0; i <= 173; ++i)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3301      	adds	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2bad      	cmp	r3, #173	; 0xad
 800164a:	dddb      	ble.n	8001604 <change_digit_main_time+0x294>
	if(digit==8)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d139      	bne.n	80016c6 <change_digit_main_time+0x356>
		for(int i = 0; i <= 173; ++i)
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e033      	b.n	80016c0 <change_digit_main_time+0x350>
			for(int j = 0; j <= 98; ++j)
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	e02a      	b.n	80016b4 <change_digit_main_time+0x344>
 800165e:	bf00      	nop
 8001660:	08050968 	.word	0x08050968
 8001664:	2000001c 	.word	0x2000001c
 8001668:	08026884 	.word	0x08026884
 800166c:	080482d4 	.word	0x080482d4
 8001670:	0803fc40 	.word	0x0803fc40
 8001674:	08015b5c 	.word	0x08015b5c
 8001678:	0800d4c8 	.word	0x0800d4c8
 800167c:	080375ac 	.word	0x080375ac
 8001680:	0802ef18 	.word	0x0802ef18
				screen[x+42253+i*480+j] = eigth_picture_2[k++];
 8001684:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001686:	1c4b      	adds	r3, r1, #1
 8001688:	65bb      	str	r3, [r7, #88]	; 0x58
 800168a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800168c:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001690:	441a      	add	r2, r3
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	4603      	mov	r3, r0
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	1a1b      	subs	r3, r3, r0
 800169a:	015b      	lsls	r3, r3, #5
 800169c:	441a      	add	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <change_digit_main_time+0x3c8>)
 80016a4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80016a8:	4a24      	ldr	r2, [pc, #144]	; (800173c <change_digit_main_time+0x3cc>)
 80016aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	3301      	adds	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b62      	cmp	r3, #98	; 0x62
 80016b8:	dde4      	ble.n	8001684 <change_digit_main_time+0x314>
		for(int i = 0; i <= 173; ++i)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2bad      	cmp	r3, #173	; 0xad
 80016c4:	ddc8      	ble.n	8001658 <change_digit_main_time+0x2e8>
	if(digit==9)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	d126      	bne.n	800171a <change_digit_main_time+0x3aa>
		for(int i = 0; i <= 173; ++i)
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e020      	b.n	8001714 <change_digit_main_time+0x3a4>
			for(int j = 0; j <= 98; ++j)
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	e017      	b.n	8001708 <change_digit_main_time+0x398>
				screen[x+42253+i*480+j] = nine_picture_2[k++];
 80016d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80016da:	1c4b      	adds	r3, r1, #1
 80016dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80016de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e0:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80016e4:	441a      	add	r2, r3
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	4603      	mov	r3, r0
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	1a1b      	subs	r3, r3, r0
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	441a      	add	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <change_digit_main_time+0x3d0>)
 80016f8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80016fc:	4a0f      	ldr	r2, [pc, #60]	; (800173c <change_digit_main_time+0x3cc>)
 80016fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3301      	adds	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b62      	cmp	r3, #98	; 0x62
 800170c:	dde4      	ble.n	80016d8 <change_digit_main_time+0x368>
		for(int i = 0; i <= 173; ++i)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2bad      	cmp	r3, #173	; 0xad
 8001718:	dddb      	ble.n	80016d2 <change_digit_main_time+0x362>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <change_digit_main_time+0x3d4>)
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <change_digit_main_time+0x3cc>)
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <change_digit_main_time+0x3d8>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	4a08      	ldr	r2, [pc, #32]	; (8001748 <change_digit_main_time+0x3d8>)
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800172c:	bf00      	nop
 800172e:	3764      	adds	r7, #100	; 0x64
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	08058ffc 	.word	0x08058ffc
 800173c:	2000001c 	.word	0x2000001c
 8001740:	0801e1f0 	.word	0x0801e1f0
 8001744:	40016904 	.word	0x40016904
 8001748:	40016800 	.word	0x40016800

0800174c <change_digit_power>:


void change_digit_power(int power)
{
 800174c:	b480      	push	{r7}
 800174e:	b0cd      	sub	sp, #308	; 0x134
 8001750:	af00      	add	r7, sp, #0
 8001752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001756:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800175a:	6018      	str	r0, [r3, #0]
	int k = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	if(power==200)
 8001762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001766:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2bc8      	cmp	r3, #200	; 0xc8
 800176e:	f040 809c 	bne.w	80018aa <change_digit_power+0x15e>
	{
		for(int i = 0; i <= 57; ++i)
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001778:	e029      	b.n	80017ce <change_digit_power+0x82>
			for(int j = 0; j <= 32; ++j)
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001780:	e01c      	b.n	80017bc <change_digit_power+0x70>
				screen[76+4861+i*480+j] = none_picture_3[k++];
 8001782:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001786:	1c53      	adds	r3, r2, #1
 8001788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800178c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8001790:	460b      	mov	r3, r1
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	1a5b      	subs	r3, r3, r1
 8001796:	015b      	lsls	r3, r3, #5
 8001798:	4619      	mov	r1, r3
 800179a:	f241 3349 	movw	r3, #4937	; 0x1349
 800179e:	440b      	add	r3, r1
 80017a0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80017a4:	440b      	add	r3, r1
 80017a6:	49d0      	ldr	r1, [pc, #832]	; (8001ae8 <change_digit_power+0x39c>)
 80017a8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80017ac:	4acf      	ldr	r2, [pc, #828]	; (8001aec <change_digit_power+0x3a0>)
 80017ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80017b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017b6:	3301      	adds	r3, #1
 80017b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	ddde      	ble.n	8001782 <change_digit_power+0x36>
		for(int i = 0; i <= 57; ++i)
 80017c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017c8:	3301      	adds	r3, #1
 80017ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80017ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017d2:	2b39      	cmp	r3, #57	; 0x39
 80017d4:	ddd1      	ble.n	800177a <change_digit_power+0x2e>
		k = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80017e2:	e029      	b.n	8001838 <change_digit_power+0xec>
			for(int j = 0; j <= 32; ++j)
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80017ea:	e01c      	b.n	8001826 <change_digit_power+0xda>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 80017ec:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017f0:	1c53      	adds	r3, r2, #1
 80017f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017f6:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80017fa:	460b      	mov	r3, r1
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a5b      	subs	r3, r3, r1
 8001800:	015b      	lsls	r3, r3, #5
 8001802:	4619      	mov	r1, r3
 8001804:	f241 3323 	movw	r3, #4899	; 0x1323
 8001808:	440b      	add	r3, r1
 800180a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800180e:	440b      	add	r3, r1
 8001810:	49b5      	ldr	r1, [pc, #724]	; (8001ae8 <change_digit_power+0x39c>)
 8001812:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001816:	4ab5      	ldr	r2, [pc, #724]	; (8001aec <change_digit_power+0x3a0>)
 8001818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800181c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001820:	3301      	adds	r3, #1
 8001822:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001826:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800182a:	2b20      	cmp	r3, #32
 800182c:	ddde      	ble.n	80017ec <change_digit_power+0xa0>
		for(int i = 0; i <= 57; ++i)
 800182e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001832:	3301      	adds	r3, #1
 8001834:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001838:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800183c:	2b39      	cmp	r3, #57	; 0x39
 800183e:	ddd1      	ble.n	80017e4 <change_digit_power+0x98>
		k = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800184c:	e029      	b.n	80018a2 <change_digit_power+0x156>
			for(int j = 0; j <= 32; ++j)
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001854:	e01c      	b.n	8001890 <change_digit_power+0x144>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001856:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800185a:	1c53      	adds	r3, r2, #1
 800185c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001860:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001864:	460b      	mov	r3, r1
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	4619      	mov	r1, r3
 800186e:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001872:	440b      	add	r3, r1
 8001874:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001878:	440b      	add	r3, r1
 800187a:	499b      	ldr	r1, [pc, #620]	; (8001ae8 <change_digit_power+0x39c>)
 800187c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001880:	4a9a      	ldr	r2, [pc, #616]	; (8001aec <change_digit_power+0x3a0>)
 8001882:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800188a:	3301      	adds	r3, #1
 800188c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001894:	2b20      	cmp	r3, #32
 8001896:	ddde      	ble.n	8001856 <change_digit_power+0x10a>
		for(int i = 0; i <= 57; ++i)
 8001898:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80018a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018a6:	2b39      	cmp	r3, #57	; 0x39
 80018a8:	ddd1      	ble.n	800184e <change_digit_power+0x102>
	}

	if(power==0)
 80018aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 809c 	bne.w	80019f2 <change_digit_power+0x2a6>
	{
		for(int i = 0; i <= 57; ++i)
 80018ba:	2300      	movs	r3, #0
 80018bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80018c0:	e029      	b.n	8001916 <change_digit_power+0x1ca>
			for(int j = 0; j <= 32; ++j)
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80018c8:	e01c      	b.n	8001904 <change_digit_power+0x1b8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80018ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018ce:	1c53      	adds	r3, r2, #1
 80018d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018d4:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80018d8:	460b      	mov	r3, r1
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a5b      	subs	r3, r3, r1
 80018de:	015b      	lsls	r3, r3, #5
 80018e0:	4619      	mov	r1, r3
 80018e2:	f241 3349 	movw	r3, #4937	; 0x1349
 80018e6:	440b      	add	r3, r1
 80018e8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80018ec:	440b      	add	r3, r1
 80018ee:	4980      	ldr	r1, [pc, #512]	; (8001af0 <change_digit_power+0x3a4>)
 80018f0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80018f4:	4a7d      	ldr	r2, [pc, #500]	; (8001aec <change_digit_power+0x3a0>)
 80018f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80018fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018fe:	3301      	adds	r3, #1
 8001900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001908:	2b20      	cmp	r3, #32
 800190a:	ddde      	ble.n	80018ca <change_digit_power+0x17e>
		for(int i = 0; i <= 57; ++i)
 800190c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001910:	3301      	adds	r3, #1
 8001912:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001916:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800191a:	2b39      	cmp	r3, #57	; 0x39
 800191c:	ddd1      	ble.n	80018c2 <change_digit_power+0x176>
		k = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800192a:	e029      	b.n	8001980 <change_digit_power+0x234>
			for(int j = 0; j <= 32; ++j)
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001932:	e01c      	b.n	800196e <change_digit_power+0x222>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 8001934:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001938:	1c53      	adds	r3, r2, #1
 800193a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800193e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001942:	460b      	mov	r3, r1
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a5b      	subs	r3, r3, r1
 8001948:	015b      	lsls	r3, r3, #5
 800194a:	4619      	mov	r1, r3
 800194c:	f241 3323 	movw	r3, #4899	; 0x1323
 8001950:	440b      	add	r3, r1
 8001952:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001956:	440b      	add	r3, r1
 8001958:	4963      	ldr	r1, [pc, #396]	; (8001ae8 <change_digit_power+0x39c>)
 800195a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800195e:	4a63      	ldr	r2, [pc, #396]	; (8001aec <change_digit_power+0x3a0>)
 8001960:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001968:	3301      	adds	r3, #1
 800196a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800196e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001972:	2b20      	cmp	r3, #32
 8001974:	ddde      	ble.n	8001934 <change_digit_power+0x1e8>
		for(int i = 0; i <= 57; ++i)
 8001976:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800197a:	3301      	adds	r3, #1
 800197c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001980:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001984:	2b39      	cmp	r3, #57	; 0x39
 8001986:	ddd1      	ble.n	800192c <change_digit_power+0x1e0>
		k = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001994:	e029      	b.n	80019ea <change_digit_power+0x29e>
			for(int j = 0; j <= 32; ++j)
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800199c:	e01c      	b.n	80019d8 <change_digit_power+0x28c>
				screen[4861+i*480+j] = none_picture_3[k++];
 800199e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019a2:	1c53      	adds	r3, r2, #1
 80019a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019a8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019ac:	460b      	mov	r3, r1
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a5b      	subs	r3, r3, r1
 80019b2:	015b      	lsls	r3, r3, #5
 80019b4:	4619      	mov	r1, r3
 80019b6:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80019ba:	440b      	add	r3, r1
 80019bc:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80019c0:	440b      	add	r3, r1
 80019c2:	4949      	ldr	r1, [pc, #292]	; (8001ae8 <change_digit_power+0x39c>)
 80019c4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80019c8:	4a48      	ldr	r2, [pc, #288]	; (8001aec <change_digit_power+0x3a0>)
 80019ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80019ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019d2:	3301      	adds	r3, #1
 80019d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019dc:	2b20      	cmp	r3, #32
 80019de:	ddde      	ble.n	800199e <change_digit_power+0x252>
		for(int i = 0; i <= 57; ++i)
 80019e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80019e4:	3301      	adds	r3, #1
 80019e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80019ee:	2b39      	cmp	r3, #57	; 0x39
 80019f0:	ddd1      	ble.n	8001996 <change_digit_power+0x24a>
	}

	if(power==10)
 80019f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80019f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b0a      	cmp	r3, #10
 80019fe:	f040 80a5 	bne.w	8001b4c <change_digit_power+0x400>
	{
		for(int i = 0; i <= 57; ++i)
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a08:	e029      	b.n	8001a5e <change_digit_power+0x312>
			for(int j = 0; j <= 32; ++j)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a10:	e01c      	b.n	8001a4c <change_digit_power+0x300>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001a12:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a16:	1c53      	adds	r3, r2, #1
 8001a18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a1c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001a20:	460b      	mov	r3, r1
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a5b      	subs	r3, r3, r1
 8001a26:	015b      	lsls	r3, r3, #5
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f241 3349 	movw	r3, #4937	; 0x1349
 8001a2e:	440b      	add	r3, r1
 8001a30:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001a34:	440b      	add	r3, r1
 8001a36:	492e      	ldr	r1, [pc, #184]	; (8001af0 <change_digit_power+0x3a4>)
 8001a38:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	; (8001aec <change_digit_power+0x3a0>)
 8001a3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a46:	3301      	adds	r3, #1
 8001a48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	ddde      	ble.n	8001a12 <change_digit_power+0x2c6>
		for(int i = 0; i <= 57; ++i)
 8001a54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a62:	2b39      	cmp	r3, #57	; 0x39
 8001a64:	ddd1      	ble.n	8001a0a <change_digit_power+0x2be>
		k = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001a72:	e029      	b.n	8001ac8 <change_digit_power+0x37c>
			for(int j = 0; j <= 32; ++j)
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a7a:	e01c      	b.n	8001ab6 <change_digit_power+0x36a>
				screen[38+4861+i*480+j] = one_picture_3[k++];
 8001a7c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a80:	1c53      	adds	r3, r2, #1
 8001a82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a86:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	1a5b      	subs	r3, r3, r1
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	4619      	mov	r1, r3
 8001a94:	f241 3323 	movw	r3, #4899	; 0x1323
 8001a98:	440b      	add	r3, r1
 8001a9a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001a9e:	440b      	add	r3, r1
 8001aa0:	4914      	ldr	r1, [pc, #80]	; (8001af4 <change_digit_power+0x3a8>)
 8001aa2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <change_digit_power+0x3a0>)
 8001aa8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001aac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ab6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	ddde      	ble.n	8001a7c <change_digit_power+0x330>
		for(int i = 0; i <= 57; ++i)
 8001abe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ac8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001acc:	2b39      	cmp	r3, #57	; 0x39
 8001ace:	ddd1      	ble.n	8001a74 <change_digit_power+0x328>
		k = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001adc:	e032      	b.n	8001b44 <change_digit_power+0x3f8>
			for(int j = 0; j <= 32; ++j)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001ae4:	e025      	b.n	8001b32 <change_digit_power+0x3e6>
 8001ae6:	bf00      	nop
 8001ae8:	0806436c 	.word	0x0806436c
 8001aec:	2000001c 	.word	0x2000001c
 8001af0:	08069d24 	.word	0x08069d24
 8001af4:	08065260 	.word	0x08065260
				screen[4861+i*480+j] = none_picture_3[k++];
 8001af8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001afc:	1c53      	adds	r3, r2, #1
 8001afe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b02:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8001b06:	460b      	mov	r3, r1
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	1a5b      	subs	r3, r3, r1
 8001b0c:	015b      	lsls	r3, r3, #5
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001b14:	440b      	add	r3, r1
 8001b16:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8001b1a:	440b      	add	r3, r1
 8001b1c:	49d2      	ldr	r1, [pc, #840]	; (8001e68 <change_digit_power+0x71c>)
 8001b1e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b22:	4ad2      	ldr	r2, [pc, #840]	; (8001e6c <change_digit_power+0x720>)
 8001b24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	ddde      	ble.n	8001af8 <change_digit_power+0x3ac>
		for(int i = 0; i <= 57; ++i)
 8001b3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001b48:	2b39      	cmp	r3, #57	; 0x39
 8001b4a:	ddc8      	ble.n	8001ade <change_digit_power+0x392>
	}

	if(power==20)
 8001b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b14      	cmp	r3, #20
 8001b58:	f040 809c 	bne.w	8001c94 <change_digit_power+0x548>
	{
		for(int i = 0; i <= 57; ++i)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b62:	e029      	b.n	8001bb8 <change_digit_power+0x46c>
			for(int j = 0; j <= 32; ++j)
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001b6a:	e01c      	b.n	8001ba6 <change_digit_power+0x45a>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001b6c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b70:	1c53      	adds	r3, r2, #1
 8001b72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b76:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	1a5b      	subs	r3, r3, r1
 8001b80:	015b      	lsls	r3, r3, #5
 8001b82:	4619      	mov	r1, r3
 8001b84:	f241 3349 	movw	r3, #4937	; 0x1349
 8001b88:	440b      	add	r3, r1
 8001b8a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001b8e:	440b      	add	r3, r1
 8001b90:	49b7      	ldr	r1, [pc, #732]	; (8001e70 <change_digit_power+0x724>)
 8001b92:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b96:	4ab5      	ldr	r2, [pc, #724]	; (8001e6c <change_digit_power+0x720>)
 8001b98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	ddde      	ble.n	8001b6c <change_digit_power+0x420>
		for(int i = 0; i <= 57; ++i)
 8001bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001bbc:	2b39      	cmp	r3, #57	; 0x39
 8001bbe:	ddd1      	ble.n	8001b64 <change_digit_power+0x418>
		k = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001bcc:	e029      	b.n	8001c22 <change_digit_power+0x4d6>
			for(int j = 0; j <= 32; ++j)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001bd4:	e01c      	b.n	8001c10 <change_digit_power+0x4c4>
				screen[38+4861+i*480+j] = two_picture_3[k++];
 8001bd6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bda:	1c53      	adds	r3, r2, #1
 8001bdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001be0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001be4:	460b      	mov	r3, r1
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	1a5b      	subs	r3, r3, r1
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4619      	mov	r1, r3
 8001bee:	f241 3323 	movw	r3, #4899	; 0x1323
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	499e      	ldr	r1, [pc, #632]	; (8001e74 <change_digit_power+0x728>)
 8001bfc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c00:	4a9a      	ldr	r2, [pc, #616]	; (8001e6c <change_digit_power+0x720>)
 8001c02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	ddde      	ble.n	8001bd6 <change_digit_power+0x48a>
		for(int i = 0; i <= 57; ++i)
 8001c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001c26:	2b39      	cmp	r3, #57	; 0x39
 8001c28:	ddd1      	ble.n	8001bce <change_digit_power+0x482>
		k = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c36:	e029      	b.n	8001c8c <change_digit_power+0x540>
			for(int j = 0; j <= 32; ++j)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c3e:	e01c      	b.n	8001c7a <change_digit_power+0x52e>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001c40:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c44:	1c53      	adds	r3, r2, #1
 8001c46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c4a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	1a5b      	subs	r3, r3, r1
 8001c54:	015b      	lsls	r3, r3, #5
 8001c56:	4619      	mov	r1, r3
 8001c58:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001c5c:	440b      	add	r3, r1
 8001c5e:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001c62:	440b      	add	r3, r1
 8001c64:	4980      	ldr	r1, [pc, #512]	; (8001e68 <change_digit_power+0x71c>)
 8001c66:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c6a:	4a80      	ldr	r2, [pc, #512]	; (8001e6c <change_digit_power+0x720>)
 8001c6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c74:	3301      	adds	r3, #1
 8001c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	ddde      	ble.n	8001c40 <change_digit_power+0x4f4>
		for(int i = 0; i <= 57; ++i)
 8001c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c86:	3301      	adds	r3, #1
 8001c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c90:	2b39      	cmp	r3, #57	; 0x39
 8001c92:	ddd1      	ble.n	8001c38 <change_digit_power+0x4ec>
	}

	if(power==30)
 8001c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b1e      	cmp	r3, #30
 8001ca0:	f040 809c 	bne.w	8001ddc <change_digit_power+0x690>
	{
		for(int i = 0; i <= 57; ++i)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001caa:	e029      	b.n	8001d00 <change_digit_power+0x5b4>
			for(int j = 0; j <= 32; ++j)
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cb2:	e01c      	b.n	8001cee <change_digit_power+0x5a2>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001cb4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cb8:	1c53      	adds	r3, r2, #1
 8001cba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cbe:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a5b      	subs	r3, r3, r1
 8001cc8:	015b      	lsls	r3, r3, #5
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f241 3349 	movw	r3, #4937	; 0x1349
 8001cd0:	440b      	add	r3, r1
 8001cd2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001cd6:	440b      	add	r3, r1
 8001cd8:	4965      	ldr	r1, [pc, #404]	; (8001e70 <change_digit_power+0x724>)
 8001cda:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cde:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <change_digit_power+0x720>)
 8001ce0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	ddde      	ble.n	8001cb4 <change_digit_power+0x568>
		for(int i = 0; i <= 57; ++i)
 8001cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d04:	2b39      	cmp	r3, #57	; 0x39
 8001d06:	ddd1      	ble.n	8001cac <change_digit_power+0x560>
		k = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d14:	e029      	b.n	8001d6a <change_digit_power+0x61e>
			for(int j = 0; j <= 32; ++j)
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d1c:	e01c      	b.n	8001d58 <change_digit_power+0x60c>
				screen[38+4861+i*480+j] = three_picture_3[k++];
 8001d1e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d22:	1c53      	adds	r3, r2, #1
 8001d24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d28:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a5b      	subs	r3, r3, r1
 8001d32:	015b      	lsls	r3, r3, #5
 8001d34:	4619      	mov	r1, r3
 8001d36:	f241 3323 	movw	r3, #4899	; 0x1323
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001d40:	440b      	add	r3, r1
 8001d42:	494d      	ldr	r1, [pc, #308]	; (8001e78 <change_digit_power+0x72c>)
 8001d44:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d48:	4a48      	ldr	r2, [pc, #288]	; (8001e6c <change_digit_power+0x720>)
 8001d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d52:	3301      	adds	r3, #1
 8001d54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d5c:	2b20      	cmp	r3, #32
 8001d5e:	ddde      	ble.n	8001d1e <change_digit_power+0x5d2>
		for(int i = 0; i <= 57; ++i)
 8001d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d64:	3301      	adds	r3, #1
 8001d66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d6e:	2b39      	cmp	r3, #57	; 0x39
 8001d70:	ddd1      	ble.n	8001d16 <change_digit_power+0x5ca>
		k = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d7e:	e029      	b.n	8001dd4 <change_digit_power+0x688>
			for(int j = 0; j <= 32; ++j)
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d86:	e01c      	b.n	8001dc2 <change_digit_power+0x676>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001d88:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d8c:	1c53      	adds	r3, r2, #1
 8001d8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d92:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d96:	460b      	mov	r3, r1
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	1a5b      	subs	r3, r3, r1
 8001d9c:	015b      	lsls	r3, r3, #5
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001da4:	440b      	add	r3, r1
 8001da6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001daa:	440b      	add	r3, r1
 8001dac:	492e      	ldr	r1, [pc, #184]	; (8001e68 <change_digit_power+0x71c>)
 8001dae:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001db2:	4a2e      	ldr	r2, [pc, #184]	; (8001e6c <change_digit_power+0x720>)
 8001db4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001db8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	ddde      	ble.n	8001d88 <change_digit_power+0x63c>
		for(int i = 0; i <= 57; ++i)
 8001dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dd8:	2b39      	cmp	r3, #57	; 0x39
 8001dda:	ddd1      	ble.n	8001d80 <change_digit_power+0x634>
	}

	if(power==40)
 8001ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b28      	cmp	r3, #40	; 0x28
 8001de8:	f040 80a7 	bne.w	8001f3a <change_digit_power+0x7ee>
	{
		for(int i = 0; i <= 57; ++i)
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001df2:	e029      	b.n	8001e48 <change_digit_power+0x6fc>
			for(int j = 0; j <= 32; ++j)
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001dfa:	e01c      	b.n	8001e36 <change_digit_power+0x6ea>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001dfc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e00:	1c53      	adds	r3, r2, #1
 8001e02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e06:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	015b      	lsls	r3, r3, #5
 8001e12:	4619      	mov	r1, r3
 8001e14:	f241 3349 	movw	r3, #4937	; 0x1349
 8001e18:	440b      	add	r3, r1
 8001e1a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001e1e:	440b      	add	r3, r1
 8001e20:	4913      	ldr	r1, [pc, #76]	; (8001e70 <change_digit_power+0x724>)
 8001e22:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e26:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <change_digit_power+0x720>)
 8001e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e30:	3301      	adds	r3, #1
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	ddde      	ble.n	8001dfc <change_digit_power+0x6b0>
		for(int i = 0; i <= 57; ++i)
 8001e3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e42:	3301      	adds	r3, #1
 8001e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001e48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e4c:	2b39      	cmp	r3, #57	; 0x39
 8001e4e:	ddd1      	ble.n	8001df4 <change_digit_power+0x6a8>
		k = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e5c:	e034      	b.n	8001ec8 <change_digit_power+0x77c>
			for(int j = 0; j <= 32; ++j)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001e64:	e027      	b.n	8001eb6 <change_digit_power+0x76a>
 8001e66:	bf00      	nop
 8001e68:	0806436c 	.word	0x0806436c
 8001e6c:	2000001c 	.word	0x2000001c
 8001e70:	08069d24 	.word	0x08069d24
 8001e74:	08068e30 	.word	0x08068e30
 8001e78:	08067f3c 	.word	0x08067f3c
				screen[38+4861+i*480+j] = four_picture_3[k++];
 8001e7c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e80:	1c53      	adds	r3, r2, #1
 8001e82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e86:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	1a5b      	subs	r3, r3, r1
 8001e90:	015b      	lsls	r3, r3, #5
 8001e92:	4619      	mov	r1, r3
 8001e94:	f241 3323 	movw	r3, #4899	; 0x1323
 8001e98:	440b      	add	r3, r1
 8001e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001e9e:	440b      	add	r3, r1
 8001ea0:	49c4      	ldr	r1, [pc, #784]	; (80021b4 <change_digit_power+0xa68>)
 8001ea2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ea6:	4ac4      	ldr	r2, [pc, #784]	; (80021b8 <change_digit_power+0xa6c>)
 8001ea8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001eac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	ddde      	ble.n	8001e7c <change_digit_power+0x730>
		for(int i = 0; i <= 57; ++i)
 8001ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ecc:	2b39      	cmp	r3, #57	; 0x39
 8001ece:	ddc6      	ble.n	8001e5e <change_digit_power+0x712>
		k = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001edc:	e029      	b.n	8001f32 <change_digit_power+0x7e6>
			for(int j = 0; j <= 32; ++j)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ee4:	e01c      	b.n	8001f20 <change_digit_power+0x7d4>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001ee6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001eea:	1c53      	adds	r3, r2, #1
 8001eec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ef0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	1a5b      	subs	r3, r3, r1
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	4619      	mov	r1, r3
 8001efe:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001f02:	440b      	add	r3, r1
 8001f04:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001f08:	440b      	add	r3, r1
 8001f0a:	49ac      	ldr	r1, [pc, #688]	; (80021bc <change_digit_power+0xa70>)
 8001f0c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f10:	4aa9      	ldr	r2, [pc, #676]	; (80021b8 <change_digit_power+0xa6c>)
 8001f12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	ddde      	ble.n	8001ee6 <change_digit_power+0x79a>
		for(int i = 0; i <= 57; ++i)
 8001f28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f36:	2b39      	cmp	r3, #57	; 0x39
 8001f38:	ddd1      	ble.n	8001ede <change_digit_power+0x792>
	}

	if(power==50)
 8001f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b32      	cmp	r3, #50	; 0x32
 8001f46:	f040 809c 	bne.w	8002082 <change_digit_power+0x936>
	{
		for(int i = 0; i <= 57; ++i)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f50:	e029      	b.n	8001fa6 <change_digit_power+0x85a>
			for(int j = 0; j <= 32; ++j)
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f58:	e01c      	b.n	8001f94 <change_digit_power+0x848>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001f5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f5e:	1c53      	adds	r3, r2, #1
 8001f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f64:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001f68:	460b      	mov	r3, r1
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a5b      	subs	r3, r3, r1
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	4619      	mov	r1, r3
 8001f72:	f241 3349 	movw	r3, #4937	; 0x1349
 8001f76:	440b      	add	r3, r1
 8001f78:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001f7c:	440b      	add	r3, r1
 8001f7e:	4990      	ldr	r1, [pc, #576]	; (80021c0 <change_digit_power+0xa74>)
 8001f80:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f84:	4a8c      	ldr	r2, [pc, #560]	; (80021b8 <change_digit_power+0xa6c>)
 8001f86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f8e:	3301      	adds	r3, #1
 8001f90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	ddde      	ble.n	8001f5a <change_digit_power+0x80e>
		for(int i = 0; i <= 57; ++i)
 8001f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001faa:	2b39      	cmp	r3, #57	; 0x39
 8001fac:	ddd1      	ble.n	8001f52 <change_digit_power+0x806>
		k = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001fba:	e029      	b.n	8002010 <change_digit_power+0x8c4>
			for(int j = 0; j <= 32; ++j)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001fc2:	e01c      	b.n	8001ffe <change_digit_power+0x8b2>
				screen[38+4861+i*480+j] = five_picture_3[k++];
 8001fc4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001fc8:	1c53      	adds	r3, r2, #1
 8001fca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a5b      	subs	r3, r3, r1
 8001fd8:	015b      	lsls	r3, r3, #5
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f241 3323 	movw	r3, #4899	; 0x1323
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001fe6:	440b      	add	r3, r1
 8001fe8:	4976      	ldr	r1, [pc, #472]	; (80021c4 <change_digit_power+0xa78>)
 8001fea:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001fee:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <change_digit_power+0xa6c>)
 8001ff0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002002:	2b20      	cmp	r3, #32
 8002004:	ddde      	ble.n	8001fc4 <change_digit_power+0x878>
		for(int i = 0; i <= 57; ++i)
 8002006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800200a:	3301      	adds	r3, #1
 800200c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002014:	2b39      	cmp	r3, #57	; 0x39
 8002016:	ddd1      	ble.n	8001fbc <change_digit_power+0x870>
		k = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002024:	e029      	b.n	800207a <change_digit_power+0x92e>
			for(int j = 0; j <= 32; ++j)
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800202c:	e01c      	b.n	8002068 <change_digit_power+0x91c>
				screen[4861+i*480+j] = none_picture_3[k++];
 800202e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002032:	1c53      	adds	r3, r2, #1
 8002034:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002038:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800203c:	460b      	mov	r3, r1
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a5b      	subs	r3, r3, r1
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	4619      	mov	r1, r3
 8002046:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800204a:	440b      	add	r3, r1
 800204c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002050:	440b      	add	r3, r1
 8002052:	495a      	ldr	r1, [pc, #360]	; (80021bc <change_digit_power+0xa70>)
 8002054:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002058:	4a57      	ldr	r2, [pc, #348]	; (80021b8 <change_digit_power+0xa6c>)
 800205a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800205e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002062:	3301      	adds	r3, #1
 8002064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800206c:	2b20      	cmp	r3, #32
 800206e:	ddde      	ble.n	800202e <change_digit_power+0x8e2>
		for(int i = 0; i <= 57; ++i)
 8002070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002074:	3301      	adds	r3, #1
 8002076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800207a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800207e:	2b39      	cmp	r3, #57	; 0x39
 8002080:	ddd1      	ble.n	8002026 <change_digit_power+0x8da>
	}

	if(power==60)
 8002082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b3c      	cmp	r3, #60	; 0x3c
 800208e:	f040 8083 	bne.w	8002198 <change_digit_power+0xa4c>
	{
		for(int i = 0; i <= 57; ++i)
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002098:	e024      	b.n	80020e4 <change_digit_power+0x998>
			for(int j = 0; j <= 32; ++j)
 800209a:	2300      	movs	r3, #0
 800209c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800209e:	e019      	b.n	80020d4 <change_digit_power+0x988>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80020a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020a4:	1c53      	adds	r3, r2, #1
 80020a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80020ae:	460b      	mov	r3, r1
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a5b      	subs	r3, r3, r1
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	4619      	mov	r1, r3
 80020b8:	f241 3349 	movw	r3, #4937	; 0x1349
 80020bc:	440b      	add	r3, r1
 80020be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020c0:	440b      	add	r3, r1
 80020c2:	493f      	ldr	r1, [pc, #252]	; (80021c0 <change_digit_power+0xa74>)
 80020c4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80020c8:	4a3b      	ldr	r2, [pc, #236]	; (80021b8 <change_digit_power+0xa6c>)
 80020ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80020ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d0:	3301      	adds	r3, #1
 80020d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	dde2      	ble.n	80020a0 <change_digit_power+0x954>
		for(int i = 0; i <= 57; ++i)
 80020da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020de:	3301      	adds	r3, #1
 80020e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020e8:	2b39      	cmp	r3, #57	; 0x39
 80020ea:	ddd6      	ble.n	800209a <change_digit_power+0x94e>
		k = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80020f2:	2300      	movs	r3, #0
 80020f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80020f6:	e021      	b.n	800213c <change_digit_power+0x9f0>
			for(int j = 0; j <= 32; ++j)
 80020f8:	2300      	movs	r3, #0
 80020fa:	677b      	str	r3, [r7, #116]	; 0x74
 80020fc:	e018      	b.n	8002130 <change_digit_power+0x9e4>
				screen[38+4861+i*480+j] = six_picture_3[k++];
 80020fe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002102:	1c53      	adds	r3, r2, #1
 8002104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002108:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800210a:	460b      	mov	r3, r1
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	4619      	mov	r1, r3
 8002114:	f241 3323 	movw	r3, #4899	; 0x1323
 8002118:	440b      	add	r3, r1
 800211a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800211c:	440b      	add	r3, r1
 800211e:	492a      	ldr	r1, [pc, #168]	; (80021c8 <change_digit_power+0xa7c>)
 8002120:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002124:	4a24      	ldr	r2, [pc, #144]	; (80021b8 <change_digit_power+0xa6c>)
 8002126:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800212a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800212c:	3301      	adds	r3, #1
 800212e:	677b      	str	r3, [r7, #116]	; 0x74
 8002130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002132:	2b20      	cmp	r3, #32
 8002134:	dde3      	ble.n	80020fe <change_digit_power+0x9b2>
		for(int i = 0; i <= 57; ++i)
 8002136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002138:	3301      	adds	r3, #1
 800213a:	67bb      	str	r3, [r7, #120]	; 0x78
 800213c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800213e:	2b39      	cmp	r3, #57	; 0x39
 8002140:	ddda      	ble.n	80020f8 <change_digit_power+0x9ac>
		k = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8002148:	2300      	movs	r3, #0
 800214a:	673b      	str	r3, [r7, #112]	; 0x70
 800214c:	e021      	b.n	8002192 <change_digit_power+0xa46>
			for(int j = 0; j <= 32; ++j)
 800214e:	2300      	movs	r3, #0
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002152:	e018      	b.n	8002186 <change_digit_power+0xa3a>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002154:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002158:	1c53      	adds	r3, r2, #1
 800215a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800215e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002160:	460b      	mov	r3, r1
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a5b      	subs	r3, r3, r1
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	4619      	mov	r1, r3
 800216a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800216e:	440b      	add	r3, r1
 8002170:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002172:	440b      	add	r3, r1
 8002174:	4911      	ldr	r1, [pc, #68]	; (80021bc <change_digit_power+0xa70>)
 8002176:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <change_digit_power+0xa6c>)
 800217c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	3301      	adds	r3, #1
 8002184:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002188:	2b20      	cmp	r3, #32
 800218a:	dde3      	ble.n	8002154 <change_digit_power+0xa08>
		for(int i = 0; i <= 57; ++i)
 800218c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218e:	3301      	adds	r3, #1
 8002190:	673b      	str	r3, [r7, #112]	; 0x70
 8002192:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002194:	2b39      	cmp	r3, #57	; 0x39
 8002196:	ddda      	ble.n	800214e <change_digit_power+0xa02>
	}

	if(power==70)
 8002198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800219c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b46      	cmp	r3, #70	; 0x46
 80021a4:	f040 808a 	bne.w	80022bc <change_digit_power+0xb70>
	{
		for(int i = 0; i <= 57; ++i)
 80021a8:	2300      	movs	r3, #0
 80021aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ac:	e02d      	b.n	800220a <change_digit_power+0xabe>
			for(int j = 0; j <= 32; ++j)
 80021ae:	2300      	movs	r3, #0
 80021b0:	667b      	str	r3, [r7, #100]	; 0x64
 80021b2:	e024      	b.n	80021fe <change_digit_power+0xab2>
 80021b4:	08062584 	.word	0x08062584
 80021b8:	2000001c 	.word	0x2000001c
 80021bc:	0806436c 	.word	0x0806436c
 80021c0:	08069d24 	.word	0x08069d24
 80021c4:	08061690 	.word	0x08061690
 80021c8:	08067048 	.word	0x08067048
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80021cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80021d0:	1c53      	adds	r3, r2, #1
 80021d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80021d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80021d8:	460b      	mov	r3, r1
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	1a5b      	subs	r3, r3, r1
 80021de:	015b      	lsls	r3, r3, #5
 80021e0:	4619      	mov	r1, r3
 80021e2:	f241 3349 	movw	r3, #4937	; 0x1349
 80021e6:	440b      	add	r3, r1
 80021e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80021ea:	440b      	add	r3, r1
 80021ec:	4996      	ldr	r1, [pc, #600]	; (8002448 <change_digit_power+0xcfc>)
 80021ee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80021f2:	4a96      	ldr	r2, [pc, #600]	; (800244c <change_digit_power+0xd00>)
 80021f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80021f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021fa:	3301      	adds	r3, #1
 80021fc:	667b      	str	r3, [r7, #100]	; 0x64
 80021fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002200:	2b20      	cmp	r3, #32
 8002202:	dde3      	ble.n	80021cc <change_digit_power+0xa80>
		for(int i = 0; i <= 57; ++i)
 8002204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002206:	3301      	adds	r3, #1
 8002208:	66bb      	str	r3, [r7, #104]	; 0x68
 800220a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800220c:	2b39      	cmp	r3, #57	; 0x39
 800220e:	ddce      	ble.n	80021ae <change_digit_power+0xa62>
		k = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8002216:	2300      	movs	r3, #0
 8002218:	663b      	str	r3, [r7, #96]	; 0x60
 800221a:	e021      	b.n	8002260 <change_digit_power+0xb14>
			for(int j = 0; j <= 32; ++j)
 800221c:	2300      	movs	r3, #0
 800221e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002220:	e018      	b.n	8002254 <change_digit_power+0xb08>
				screen[38+4861+i*480+j] = seven_picture_3[k++];
 8002222:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002226:	1c53      	adds	r3, r2, #1
 8002228:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800222c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800222e:	460b      	mov	r3, r1
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a5b      	subs	r3, r3, r1
 8002234:	015b      	lsls	r3, r3, #5
 8002236:	4619      	mov	r1, r3
 8002238:	f241 3323 	movw	r3, #4899	; 0x1323
 800223c:	440b      	add	r3, r1
 800223e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002240:	440b      	add	r3, r1
 8002242:	4983      	ldr	r1, [pc, #524]	; (8002450 <change_digit_power+0xd04>)
 8002244:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002248:	4a80      	ldr	r2, [pc, #512]	; (800244c <change_digit_power+0xd00>)
 800224a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800224e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002250:	3301      	adds	r3, #1
 8002252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002256:	2b20      	cmp	r3, #32
 8002258:	dde3      	ble.n	8002222 <change_digit_power+0xad6>
		for(int i = 0; i <= 57; ++i)
 800225a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800225c:	3301      	adds	r3, #1
 800225e:	663b      	str	r3, [r7, #96]	; 0x60
 8002260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002262:	2b39      	cmp	r3, #57	; 0x39
 8002264:	ddda      	ble.n	800221c <change_digit_power+0xad0>
		k = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800226c:	2300      	movs	r3, #0
 800226e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002270:	e021      	b.n	80022b6 <change_digit_power+0xb6a>
			for(int j = 0; j <= 32; ++j)
 8002272:	2300      	movs	r3, #0
 8002274:	657b      	str	r3, [r7, #84]	; 0x54
 8002276:	e018      	b.n	80022aa <change_digit_power+0xb5e>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002278:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800227c:	1c53      	adds	r3, r2, #1
 800227e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002284:	460b      	mov	r3, r1
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a5b      	subs	r3, r3, r1
 800228a:	015b      	lsls	r3, r3, #5
 800228c:	4619      	mov	r1, r3
 800228e:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002292:	440b      	add	r3, r1
 8002294:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002296:	440b      	add	r3, r1
 8002298:	496e      	ldr	r1, [pc, #440]	; (8002454 <change_digit_power+0xd08>)
 800229a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800229e:	4a6b      	ldr	r2, [pc, #428]	; (800244c <change_digit_power+0xd00>)
 80022a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80022a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022a6:	3301      	adds	r3, #1
 80022a8:	657b      	str	r3, [r7, #84]	; 0x54
 80022aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	dde3      	ble.n	8002278 <change_digit_power+0xb2c>
		for(int i = 0; i <= 57; ++i)
 80022b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b2:	3301      	adds	r3, #1
 80022b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80022b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b8:	2b39      	cmp	r3, #57	; 0x39
 80022ba:	ddda      	ble.n	8002272 <change_digit_power+0xb26>
	}

	if(power==80)
 80022bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b50      	cmp	r3, #80	; 0x50
 80022c8:	d17d      	bne.n	80023c6 <change_digit_power+0xc7a>
	{
		for(int i = 0; i <= 57; ++i)
 80022ca:	2300      	movs	r3, #0
 80022cc:	653b      	str	r3, [r7, #80]	; 0x50
 80022ce:	e021      	b.n	8002314 <change_digit_power+0xbc8>
			for(int j = 0; j <= 32; ++j)
 80022d0:	2300      	movs	r3, #0
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d4:	e018      	b.n	8002308 <change_digit_power+0xbbc>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80022d6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80022da:	1c53      	adds	r3, r2, #1
 80022dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80022e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022e2:	460b      	mov	r3, r1
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a5b      	subs	r3, r3, r1
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	4619      	mov	r1, r3
 80022ec:	f241 3349 	movw	r3, #4937	; 0x1349
 80022f0:	440b      	add	r3, r1
 80022f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022f4:	440b      	add	r3, r1
 80022f6:	4954      	ldr	r1, [pc, #336]	; (8002448 <change_digit_power+0xcfc>)
 80022f8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80022fc:	4a53      	ldr	r2, [pc, #332]	; (800244c <change_digit_power+0xd00>)
 80022fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002304:	3301      	adds	r3, #1
 8002306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800230a:	2b20      	cmp	r3, #32
 800230c:	dde3      	ble.n	80022d6 <change_digit_power+0xb8a>
		for(int i = 0; i <= 57; ++i)
 800230e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002310:	3301      	adds	r3, #1
 8002312:	653b      	str	r3, [r7, #80]	; 0x50
 8002314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002316:	2b39      	cmp	r3, #57	; 0x39
 8002318:	ddda      	ble.n	80022d0 <change_digit_power+0xb84>
		k = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8002320:	2300      	movs	r3, #0
 8002322:	64bb      	str	r3, [r7, #72]	; 0x48
 8002324:	e021      	b.n	800236a <change_digit_power+0xc1e>
			for(int j = 0; j <= 32; ++j)
 8002326:	2300      	movs	r3, #0
 8002328:	647b      	str	r3, [r7, #68]	; 0x44
 800232a:	e018      	b.n	800235e <change_digit_power+0xc12>
				screen[38+4861+i*480+j] = eigth_picture_3[k++];
 800232c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002330:	1c53      	adds	r3, r2, #1
 8002332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002336:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002338:	460b      	mov	r3, r1
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a5b      	subs	r3, r3, r1
 800233e:	015b      	lsls	r3, r3, #5
 8002340:	4619      	mov	r1, r3
 8002342:	f241 3323 	movw	r3, #4899	; 0x1323
 8002346:	440b      	add	r3, r1
 8002348:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800234a:	440b      	add	r3, r1
 800234c:	4942      	ldr	r1, [pc, #264]	; (8002458 <change_digit_power+0xd0c>)
 800234e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002352:	4a3e      	ldr	r2, [pc, #248]	; (800244c <change_digit_power+0xd00>)
 8002354:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235a:	3301      	adds	r3, #1
 800235c:	647b      	str	r3, [r7, #68]	; 0x44
 800235e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002360:	2b20      	cmp	r3, #32
 8002362:	dde3      	ble.n	800232c <change_digit_power+0xbe0>
		for(int i = 0; i <= 57; ++i)
 8002364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002366:	3301      	adds	r3, #1
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
 800236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236c:	2b39      	cmp	r3, #57	; 0x39
 800236e:	ddda      	ble.n	8002326 <change_digit_power+0xbda>
		k = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8002376:	2300      	movs	r3, #0
 8002378:	643b      	str	r3, [r7, #64]	; 0x40
 800237a:	e021      	b.n	80023c0 <change_digit_power+0xc74>
			for(int j = 0; j <= 32; ++j)
 800237c:	2300      	movs	r3, #0
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002380:	e018      	b.n	80023b4 <change_digit_power+0xc68>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002382:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002386:	1c53      	adds	r3, r2, #1
 8002388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800238c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800238e:	460b      	mov	r3, r1
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a5b      	subs	r3, r3, r1
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	4619      	mov	r1, r3
 8002398:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800239c:	440b      	add	r3, r1
 800239e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80023a0:	440b      	add	r3, r1
 80023a2:	492c      	ldr	r1, [pc, #176]	; (8002454 <change_digit_power+0xd08>)
 80023a4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <change_digit_power+0xd00>)
 80023aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80023ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b0:	3301      	adds	r3, #1
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	dde3      	ble.n	8002382 <change_digit_power+0xc36>
		for(int i = 0; i <= 57; ++i)
 80023ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023bc:	3301      	adds	r3, #1
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
 80023c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c2:	2b39      	cmp	r3, #57	; 0x39
 80023c4:	ddda      	ble.n	800237c <change_digit_power+0xc30>
	}

	if(power==90)
 80023c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b5a      	cmp	r3, #90	; 0x5a
 80023d2:	f040 80d8 	bne.w	8002586 <change_digit_power+0xe3a>
	{
		for(int i = 0; i <= 57; ++i)
 80023d6:	2300      	movs	r3, #0
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023da:	e021      	b.n	8002420 <change_digit_power+0xcd4>
			for(int j = 0; j <= 32; ++j)
 80023dc:	2300      	movs	r3, #0
 80023de:	637b      	str	r3, [r7, #52]	; 0x34
 80023e0:	e018      	b.n	8002414 <change_digit_power+0xcc8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80023e2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80023e6:	1c53      	adds	r3, r2, #1
 80023e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80023ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023ee:	460b      	mov	r3, r1
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a5b      	subs	r3, r3, r1
 80023f4:	015b      	lsls	r3, r3, #5
 80023f6:	4619      	mov	r1, r3
 80023f8:	f241 3349 	movw	r3, #4937	; 0x1349
 80023fc:	440b      	add	r3, r1
 80023fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002400:	440b      	add	r3, r1
 8002402:	4911      	ldr	r1, [pc, #68]	; (8002448 <change_digit_power+0xcfc>)
 8002404:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002408:	4a10      	ldr	r2, [pc, #64]	; (800244c <change_digit_power+0xd00>)
 800240a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800240e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002410:	3301      	adds	r3, #1
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	2b20      	cmp	r3, #32
 8002418:	dde3      	ble.n	80023e2 <change_digit_power+0xc96>
		for(int i = 0; i <= 57; ++i)
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	3301      	adds	r3, #1
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	2b39      	cmp	r3, #57	; 0x39
 8002424:	ddda      	ble.n	80023dc <change_digit_power+0xc90>
		k = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800242c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002430:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	e04b      	b.n	80024d2 <change_digit_power+0xd86>
			for(int j = 0; j <= 32; ++j)
 800243a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800243e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	e032      	b.n	80024ae <change_digit_power+0xd62>
 8002448:	08069d24 	.word	0x08069d24
 800244c:	2000001c 	.word	0x2000001c
 8002450:	08066154 	.word	0x08066154
 8002454:	0806436c 	.word	0x0806436c
 8002458:	0806ac18 	.word	0x0806ac18
				screen[38+4861+i*480+j] = nine_picture_3[k++];
 800245c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002460:	1c53      	adds	r3, r2, #1
 8002462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800246a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	460b      	mov	r3, r1
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a5b      	subs	r3, r3, r1
 8002476:	015b      	lsls	r3, r3, #5
 8002478:	4619      	mov	r1, r3
 800247a:	f241 3323 	movw	r3, #4899	; 0x1323
 800247e:	440b      	add	r3, r1
 8002480:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002484:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8002488:	6809      	ldr	r1, [r1, #0]
 800248a:	440b      	add	r3, r1
 800248c:	49c5      	ldr	r1, [pc, #788]	; (80027a4 <change_digit_power+0x1058>)
 800248e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002492:	4ac5      	ldr	r2, [pc, #788]	; (80027a8 <change_digit_power+0x105c>)
 8002494:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800249c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80024a4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	3201      	adds	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	ddcf      	ble.n	800245c <change_digit_power+0xd10>
		for(int i = 0; i <= 57; ++i)
 80024bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80024c8:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	3201      	adds	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b39      	cmp	r3, #57	; 0x39
 80024de:	ddac      	ble.n	800243a <change_digit_power+0xcee>
		k = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80024e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e041      	b.n	8002578 <change_digit_power+0xe2c>
			for(int j = 0; j <= 32; ++j)
 80024f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80024f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e028      	b.n	8002554 <change_digit_power+0xe08>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002502:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002506:	1c53      	adds	r3, r2, #1
 8002508:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800250c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	460b      	mov	r3, r1
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a5b      	subs	r3, r3, r1
 800251c:	015b      	lsls	r3, r3, #5
 800251e:	4619      	mov	r1, r3
 8002520:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002524:	440b      	add	r3, r1
 8002526:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800252a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800252e:	6809      	ldr	r1, [r1, #0]
 8002530:	440b      	add	r3, r1
 8002532:	499e      	ldr	r1, [pc, #632]	; (80027ac <change_digit_power+0x1060>)
 8002534:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002538:	4a9b      	ldr	r2, [pc, #620]	; (80027a8 <change_digit_power+0x105c>)
 800253a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800253e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002542:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002546:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800254a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	3201      	adds	r2, #1
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002558:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b20      	cmp	r3, #32
 8002560:	ddcf      	ble.n	8002502 <change_digit_power+0xdb6>
		for(int i = 0; i <= 57; ++i)
 8002562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800256a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800256e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	3201      	adds	r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800257c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b39      	cmp	r3, #57	; 0x39
 8002584:	ddb6      	ble.n	80024f4 <change_digit_power+0xda8>
	}

	if(power==100)
 8002586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800258a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b64      	cmp	r3, #100	; 0x64
 8002592:	f040 80f6 	bne.w	8002782 <change_digit_power+0x1036>
	{
		for(int i = 0; i <= 57; ++i)
 8002596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800259a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	e041      	b.n	8002628 <change_digit_power+0xedc>
			for(int j = 0; j <= 32; ++j)
 80025a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	e028      	b.n	8002604 <change_digit_power+0xeb8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80025b2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80025b6:	1c53      	adds	r3, r2, #1
 80025b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80025bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	460b      	mov	r3, r1
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a5b      	subs	r3, r3, r1
 80025cc:	015b      	lsls	r3, r3, #5
 80025ce:	4619      	mov	r1, r3
 80025d0:	f241 3349 	movw	r3, #4937	; 0x1349
 80025d4:	440b      	add	r3, r1
 80025d6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80025da:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80025de:	6809      	ldr	r1, [r1, #0]
 80025e0:	440b      	add	r3, r1
 80025e2:	4973      	ldr	r1, [pc, #460]	; (80027b0 <change_digit_power+0x1064>)
 80025e4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80025e8:	4a6f      	ldr	r2, [pc, #444]	; (80027a8 <change_digit_power+0x105c>)
 80025ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80025ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80025f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80025f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80025fa:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	3201      	adds	r2, #1
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002608:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b20      	cmp	r3, #32
 8002610:	ddcf      	ble.n	80025b2 <change_digit_power+0xe66>
		for(int i = 0; i <= 57; ++i)
 8002612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002616:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800261a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800261e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	3201      	adds	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800262c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b39      	cmp	r3, #57	; 0x39
 8002634:	ddb6      	ble.n	80025a4 <change_digit_power+0xe58>
		k = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800263c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e041      	b.n	80026ce <change_digit_power+0xf82>
			for(int j = 0; j <= 32; ++j)
 800264a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800264e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e028      	b.n	80026aa <change_digit_power+0xf5e>
				screen[38+4861+i*480+j] = zero_picture_3[k++];
 8002658:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800265c:	1c53      	adds	r3, r2, #1
 800265e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002666:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	460b      	mov	r3, r1
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a5b      	subs	r3, r3, r1
 8002672:	015b      	lsls	r3, r3, #5
 8002674:	4619      	mov	r1, r3
 8002676:	f241 3323 	movw	r3, #4899	; 0x1323
 800267a:	440b      	add	r3, r1
 800267c:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002680:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8002684:	6809      	ldr	r1, [r1, #0]
 8002686:	440b      	add	r3, r1
 8002688:	4949      	ldr	r1, [pc, #292]	; (80027b0 <change_digit_power+0x1064>)
 800268a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800268e:	4a46      	ldr	r2, [pc, #280]	; (80027a8 <change_digit_power+0x105c>)
 8002690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002698:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800269c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80026a0:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	3201      	adds	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	ddcf      	ble.n	8002658 <change_digit_power+0xf0c>
		for(int i = 0; i <= 57; ++i)
 80026b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80026c4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	3201      	adds	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b39      	cmp	r3, #57	; 0x39
 80026da:	ddb6      	ble.n	800264a <change_digit_power+0xefe>
		k = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80026e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e041      	b.n	8002774 <change_digit_power+0x1028>
			for(int j = 0; j <= 32; ++j)
 80026f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80026f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e028      	b.n	8002750 <change_digit_power+0x1004>
				screen[4861+i*480+j] = one_picture_3[k++];
 80026fe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002702:	1c53      	adds	r3, r2, #1
 8002704:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800270c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	460b      	mov	r3, r1
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a5b      	subs	r3, r3, r1
 8002718:	015b      	lsls	r3, r3, #5
 800271a:	4619      	mov	r1, r3
 800271c:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002720:	440b      	add	r3, r1
 8002722:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8002726:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 800272a:	6809      	ldr	r1, [r1, #0]
 800272c:	440b      	add	r3, r1
 800272e:	4921      	ldr	r1, [pc, #132]	; (80027b4 <change_digit_power+0x1068>)
 8002730:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <change_digit_power+0x105c>)
 8002736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800273a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800273e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002742:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8002746:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	3201      	adds	r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002754:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b20      	cmp	r3, #32
 800275c:	ddcf      	ble.n	80026fe <change_digit_power+0xfb2>
		for(int i = 0; i <= 57; ++i)
 800275e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002762:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002766:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800276a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	3201      	adds	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002778:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b39      	cmp	r3, #57	; 0x39
 8002780:	ddb6      	ble.n	80026f0 <change_digit_power+0xfa4>
	}

	LTDC_Layer2->CFBAR = (uint32_t)screen;
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <change_digit_power+0x106c>)
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <change_digit_power+0x105c>)
 8002786:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <change_digit_power+0x1070>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <change_digit_power+0x1070>)
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002794:	bf00      	nop
 8002796:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	08063478 	.word	0x08063478
 80027a8:	2000001c 	.word	0x2000001c
 80027ac:	0806436c 	.word	0x0806436c
 80027b0:	08069d24 	.word	0x08069d24
 80027b4:	08065260 	.word	0x08065260
 80027b8:	40016904 	.word	0x40016904
 80027bc:	40016800 	.word	0x40016800

080027c0 <change_colon_visibility>:


void change_colon_visibility(int position)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	int k = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
	if(position != 0)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d026      	beq.n	8002820 <change_colon_visibility+0x60>
		for(int i = 0; i <= 89; ++i)
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e01f      	b.n	8002818 <change_colon_visibility+0x58>
			for(int j = 0; j <= 14; ++j)
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e016      	b.n	800280c <change_colon_visibility+0x4c>
				screen[233+62400+i*480+j] = colon_on[k++];
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	1c53      	adds	r3, r2, #1
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	460b      	mov	r3, r1
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a5b      	subs	r3, r3, r1
 80027ec:	015b      	lsls	r3, r3, #5
 80027ee:	4619      	mov	r1, r3
 80027f0:	f24f 43a9 	movw	r3, #62633	; 0xf4a9
 80027f4:	440b      	add	r3, r1
 80027f6:	6979      	ldr	r1, [r7, #20]
 80027f8:	440b      	add	r3, r1
 80027fa:	4924      	ldr	r1, [pc, #144]	; (800288c <change_colon_visibility+0xcc>)
 80027fc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002800:	4a23      	ldr	r2, [pc, #140]	; (8002890 <change_colon_visibility+0xd0>)
 8002802:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 14; ++j)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b0e      	cmp	r3, #14
 8002810:	dde5      	ble.n	80027de <change_colon_visibility+0x1e>
		for(int i = 0; i <= 89; ++i)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	3301      	adds	r3, #1
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2b59      	cmp	r3, #89	; 0x59
 800281c:	dddc      	ble.n	80027d8 <change_colon_visibility+0x18>
 800281e:	e025      	b.n	800286c <change_colon_visibility+0xac>
	else
		for(int i = 0; i <= 89; ++i)
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	e01f      	b.n	8002866 <change_colon_visibility+0xa6>
			for(int j = 0; j <= 14; ++j)
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	e016      	b.n	800285a <change_colon_visibility+0x9a>
				screen[233+62400+i*480+j] = colon_off[k++];
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	1c53      	adds	r3, r2, #1
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	6939      	ldr	r1, [r7, #16]
 8002834:	460b      	mov	r3, r1
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a5b      	subs	r3, r3, r1
 800283a:	015b      	lsls	r3, r3, #5
 800283c:	4619      	mov	r1, r3
 800283e:	f24f 43a9 	movw	r3, #62633	; 0xf4a9
 8002842:	440b      	add	r3, r1
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	440b      	add	r3, r1
 8002848:	4912      	ldr	r1, [pc, #72]	; (8002894 <change_colon_visibility+0xd4>)
 800284a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <change_colon_visibility+0xd0>)
 8002850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 14; ++j)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b0e      	cmp	r3, #14
 800285e:	dde5      	ble.n	800282c <change_colon_visibility+0x6c>
		for(int i = 0; i <= 89; ++i)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	3301      	adds	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b59      	cmp	r3, #89	; 0x59
 800286a:	dddc      	ble.n	8002826 <change_colon_visibility+0x66>

	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <change_colon_visibility+0xd8>)
 800286e:	4a08      	ldr	r2, [pc, #32]	; (8002890 <change_colon_visibility+0xd0>)
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <change_colon_visibility+0xdc>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <change_colon_visibility+0xdc>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800287e:	bf00      	nop
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	0806bb0c 	.word	0x0806bb0c
 8002890:	2000001c 	.word	0x2000001c
 8002894:	0806c598 	.word	0x0806c598
 8002898:	40016904 	.word	0x40016904
 800289c:	40016800 	.word	0x40016800

080028a0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	if((flags & 0x8) != 0)
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <TIM2_IRQHandler+0x110>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d074      	beq.n	800299a <TIM2_IRQHandler+0xfa>
	{
		if(minute == 0)
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <TIM2_IRQHandler+0x114>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d164      	bne.n	8002982 <TIM2_IRQHandler+0xe2>
		{
			if(minute_2 == 0)
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <TIM2_IRQHandler+0x118>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d14a      	bne.n	8002956 <TIM2_IRQHandler+0xb6>
			{
				if(hour == 0)
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <TIM2_IRQHandler+0x11c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d127      	bne.n	8002918 <TIM2_IRQHandler+0x78>
				{
					hour = 9;
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <TIM2_IRQHandler+0x11c>)
 80028ca:	2209      	movs	r2, #9
 80028cc:	701a      	strb	r2, [r3, #0]
					minute_2 = 5;
 80028ce:	4b3a      	ldr	r3, [pc, #232]	; (80029b8 <TIM2_IRQHandler+0x118>)
 80028d0:	2205      	movs	r2, #5
 80028d2:	701a      	strb	r2, [r3, #0]
					minute = 9;
 80028d4:	4b37      	ldr	r3, [pc, #220]	; (80029b4 <TIM2_IRQHandler+0x114>)
 80028d6:	2209      	movs	r2, #9
 80028d8:	701a      	strb	r2, [r3, #0]
					--hour_2;
 80028da:	4b39      	ldr	r3, [pc, #228]	; (80029c0 <TIM2_IRQHandler+0x120>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3b01      	subs	r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <TIM2_IRQHandler+0x120>)
 80028e4:	701a      	strb	r2, [r3, #0]
					change_digit_main_time(1, hour_2);
 80028e6:	4b36      	ldr	r3, [pc, #216]	; (80029c0 <TIM2_IRQHandler+0x120>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	2001      	movs	r0, #1
 80028ee:	f7fe fd3f 	bl	8001370 <change_digit_main_time>
					change_digit_main_time(2, hour);
 80028f2:	4b32      	ldr	r3, [pc, #200]	; (80029bc <TIM2_IRQHandler+0x11c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	2002      	movs	r0, #2
 80028fa:	f7fe fd39 	bl	8001370 <change_digit_main_time>
					change_digit_main_time(3, minute_2);
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <TIM2_IRQHandler+0x118>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	2003      	movs	r0, #3
 8002906:	f7fe fd33 	bl	8001370 <change_digit_main_time>
					change_digit_main_time(4, minute);
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <TIM2_IRQHandler+0x114>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	2004      	movs	r0, #4
 8002912:	f7fe fd2d 	bl	8001370 <change_digit_main_time>
 8002916:	e040      	b.n	800299a <TIM2_IRQHandler+0xfa>
				}
				else
				{
					minute_2 = 5;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <TIM2_IRQHandler+0x118>)
 800291a:	2205      	movs	r2, #5
 800291c:	701a      	strb	r2, [r3, #0]
					minute = 9;
 800291e:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <TIM2_IRQHandler+0x114>)
 8002920:	2209      	movs	r2, #9
 8002922:	701a      	strb	r2, [r3, #0]
					--hour;
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <TIM2_IRQHandler+0x11c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	3b01      	subs	r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <TIM2_IRQHandler+0x11c>)
 800292e:	701a      	strb	r2, [r3, #0]
					change_digit_main_time(2, hour);
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <TIM2_IRQHandler+0x11c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	2002      	movs	r0, #2
 8002938:	f7fe fd1a 	bl	8001370 <change_digit_main_time>
					change_digit_main_time(3, minute_2);
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <TIM2_IRQHandler+0x118>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	2003      	movs	r0, #3
 8002944:	f7fe fd14 	bl	8001370 <change_digit_main_time>
					change_digit_main_time(4, minute);
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <TIM2_IRQHandler+0x114>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	2004      	movs	r0, #4
 8002950:	f7fe fd0e 	bl	8001370 <change_digit_main_time>
 8002954:	e021      	b.n	800299a <TIM2_IRQHandler+0xfa>
				}
			}
			else
			{
				minute = 9;
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <TIM2_IRQHandler+0x114>)
 8002958:	2209      	movs	r2, #9
 800295a:	701a      	strb	r2, [r3, #0]
				--minute_2;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <TIM2_IRQHandler+0x118>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	4b14      	ldr	r3, [pc, #80]	; (80029b8 <TIM2_IRQHandler+0x118>)
 8002966:	701a      	strb	r2, [r3, #0]
				change_digit_main_time(3, minute_2);
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <TIM2_IRQHandler+0x118>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	2003      	movs	r0, #3
 8002970:	f7fe fcfe 	bl	8001370 <change_digit_main_time>
				change_digit_main_time(4, minute);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <TIM2_IRQHandler+0x114>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	2004      	movs	r0, #4
 800297c:	f7fe fcf8 	bl	8001370 <change_digit_main_time>
 8002980:	e00b      	b.n	800299a <TIM2_IRQHandler+0xfa>
			}
		}
		else
		{
			--minute;
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <TIM2_IRQHandler+0x114>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	3b01      	subs	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <TIM2_IRQHandler+0x114>)
 800298c:	701a      	strb	r2, [r3, #0]
			change_digit_main_time(4, minute);
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <TIM2_IRQHandler+0x114>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	2004      	movs	r0, #4
 8002996:	f7fe fceb 	bl	8001370 <change_digit_main_time>
		}
	}
	TIM2->SR &= ~TIM_SR_UIF;
 800299a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6113      	str	r3, [r2, #16]
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2003fc48 	.word	0x2003fc48
 80029b4:	2003fc50 	.word	0x2003fc50
 80029b8:	2003fc51 	.word	0x2003fc51
 80029bc:	2003fc52 	.word	0x2003fc52
 80029c0:	2003fc53 	.word	0x2003fc53

080029c4 <TIM5_IRQHandler>:


void TIM5_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
	++cnt;
 80029c8:	4b9a      	ldr	r3, [pc, #616]	; (8002c34 <TIM5_IRQHandler+0x270>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	4a99      	ldr	r2, [pc, #612]	; (8002c34 <TIM5_IRQHandler+0x270>)
 80029d0:	6013      	str	r3, [r2, #0]

	if(cnt == 100000 && (flags & 0x1) != 0)
 80029d2:	4b98      	ldr	r3, [pc, #608]	; (8002c34 <TIM5_IRQHandler+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a98      	ldr	r2, [pc, #608]	; (8002c38 <TIM5_IRQHandler+0x274>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d131      	bne.n	8002a40 <TIM5_IRQHandler+0x7c>
 80029dc:	4b97      	ldr	r3, [pc, #604]	; (8002c3c <TIM5_IRQHandler+0x278>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d02b      	beq.n	8002a40 <TIM5_IRQHandler+0x7c>
	{
		cnt = 0;
 80029e8:	4b92      	ldr	r3, [pc, #584]	; (8002c34 <TIM5_IRQHandler+0x270>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
		if((flags & 0x20) == 0)
 80029ee:	4b93      	ldr	r3, [pc, #588]	; (8002c3c <TIM5_IRQHandler+0x278>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <TIM5_IRQHandler+0x56>
		{
			change_digit_set_time(3, 10);
 80029fa:	210a      	movs	r1, #10
 80029fc:	2003      	movs	r0, #3
 80029fe:	f7fe fa9f 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(4, 10);
 8002a02:	210a      	movs	r1, #10
 8002a04:	2004      	movs	r0, #4
 8002a06:	f7fe fa9b 	bl	8000f40 <change_digit_set_time>
			flags |= 0x20;
 8002a0a:	4b8c      	ldr	r3, [pc, #560]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f043 0320 	orr.w	r3, r3, #32
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b89      	ldr	r3, [pc, #548]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e012      	b.n	8002a40 <TIM5_IRQHandler+0x7c>
		}
		else
		{
			change_digit_set_time(3, set_minute_2);
 8002a1a:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <TIM5_IRQHandler+0x27c>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2003      	movs	r0, #3
 8002a22:	f7fe fa8d 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(4, set_minute);
 8002a26:	4b87      	ldr	r3, [pc, #540]	; (8002c44 <TIM5_IRQHandler+0x280>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	2004      	movs	r0, #4
 8002a2e:	f7fe fa87 	bl	8000f40 <change_digit_set_time>
			flags &= ~0x20;
 8002a32:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	f023 0320 	bic.w	r3, r3, #32
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(cnt == 100000 && (flags & 0x2) != 0)
 8002a40:	4b7c      	ldr	r3, [pc, #496]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7c      	ldr	r2, [pc, #496]	; (8002c38 <TIM5_IRQHandler+0x274>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d131      	bne.n	8002aae <TIM5_IRQHandler+0xea>
 8002a4a:	4b7c      	ldr	r3, [pc, #496]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02b      	beq.n	8002aae <TIM5_IRQHandler+0xea>
	{
		cnt = 0;
 8002a56:	4b77      	ldr	r3, [pc, #476]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
		if((flags & 0x10) == 0)
 8002a5c:	4b77      	ldr	r3, [pc, #476]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <TIM5_IRQHandler+0xc4>
		{
			change_digit_set_time(1, 10);
 8002a68:	210a      	movs	r1, #10
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7fe fa68 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(2, 10);
 8002a70:	210a      	movs	r1, #10
 8002a72:	2002      	movs	r0, #2
 8002a74:	f7fe fa64 	bl	8000f40 <change_digit_set_time>
			flags |= 0x10;
 8002a78:	4b70      	ldr	r3, [pc, #448]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	f043 0310 	orr.w	r3, r3, #16
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b6e      	ldr	r3, [pc, #440]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	e012      	b.n	8002aae <TIM5_IRQHandler+0xea>
		}
		else
		{
			change_digit_set_time(1, set_hour_2);
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <TIM5_IRQHandler+0x284>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7fe fa56 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(2, set_hour);
 8002a94:	4b6d      	ldr	r3, [pc, #436]	; (8002c4c <TIM5_IRQHandler+0x288>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f7fe fa50 	bl	8000f40 <change_digit_set_time>
			flags &= ~0x10;
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	f023 0310 	bic.w	r3, r3, #16
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002aac:	701a      	strb	r2, [r3, #0]
		}
	}

	if(cnt == 100000 && (flags & 0x4) != 0)
 8002aae:	4b61      	ldr	r3, [pc, #388]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a61      	ldr	r2, [pc, #388]	; (8002c38 <TIM5_IRQHandler+0x274>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d125      	bne.n	8002b04 <TIM5_IRQHandler+0x140>
 8002ab8:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01f      	beq.n	8002b04 <TIM5_IRQHandler+0x140>
	{
		cnt = 0;
 8002ac4:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
		if((flags & 0x40) == 0)
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <TIM5_IRQHandler+0x128>
		{
			change_digit_power(200);
 8002ad6:	20c8      	movs	r0, #200	; 0xc8
 8002ad8:	f7fe fe38 	bl	800174c <change_digit_power>
			flags |= 0x40;
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b55      	ldr	r3, [pc, #340]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e00b      	b.n	8002b04 <TIM5_IRQHandler+0x140>
		}
		else
		{
			change_digit_power(set_power);
 8002aec:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <TIM5_IRQHandler+0x28c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fe2b 	bl	800174c <change_digit_power>
			flags &= ~0x40;
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	4b4e      	ldr	r3, [pc, #312]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b02:	701a      	strb	r2, [r3, #0]
		}
	}

	if(cnt == 150000 && (flags & 0x8) != 0)
 8002b04:	4b4b      	ldr	r3, [pc, #300]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a52      	ldr	r2, [pc, #328]	; (8002c54 <TIM5_IRQHandler+0x290>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d11f      	bne.n	8002b4e <TIM5_IRQHandler+0x18a>
 8002b0e:	4b4b      	ldr	r3, [pc, #300]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d019      	beq.n	8002b4e <TIM5_IRQHandler+0x18a>
	{
		if((flags & 0x80) != 0)
 8002b1a:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	da0a      	bge.n	8002b3a <TIM5_IRQHandler+0x176>
		{
			flags &= ~0x80;
 8002b24:	4b45      	ldr	r3, [pc, #276]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b30:	701a      	strb	r2, [r3, #0]
			change_colon_visibility(0);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff fe44 	bl	80027c0 <change_colon_visibility>
 8002b38:	e009      	b.n	8002b4e <TIM5_IRQHandler+0x18a>
		}
		else
		{
			flags |= 0x80;
 8002b3a:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b46:	701a      	strb	r2, [r3, #0]
			change_colon_visibility(1);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff fe39 	bl	80027c0 <change_colon_visibility>
		}

	}

	if((hour_2 == 0 && hour == 0 && minute_2 == 0 && minute == 0) && (flags & 0x8) != 0)
 8002b4e:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <TIM5_IRQHandler+0x294>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d163      	bne.n	8002c1e <TIM5_IRQHandler+0x25a>
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <TIM5_IRQHandler+0x298>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d15f      	bne.n	8002c1e <TIM5_IRQHandler+0x25a>
 8002b5e:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <TIM5_IRQHandler+0x29c>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d15b      	bne.n	8002c1e <TIM5_IRQHandler+0x25a>
 8002b66:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <TIM5_IRQHandler+0x2a0>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d157      	bne.n	8002c1e <TIM5_IRQHandler+0x25a>
 8002b6e:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d051      	beq.n	8002c1e <TIM5_IRQHandler+0x25a>
	{
		buttonPressed_PE8 = 0;
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <TIM5_IRQHandler+0x2a4>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
		buttonPressed_PG2 = 0;
 8002b80:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <TIM5_IRQHandler+0x2a8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
		buttonPressed_PG5 = 0;
 8002b86:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <TIM5_IRQHandler+0x2ac>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
		buttonPressed_PD0 = 0;
 8002b8c:	4b39      	ldr	r3, [pc, #228]	; (8002c74 <TIM5_IRQHandler+0x2b0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
		buttonPressed_PD4 = 0;
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <TIM5_IRQHandler+0x2b4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
		NVIC_EnableIRQ(EXTI0_IRQn);
 8002b98:	2006      	movs	r0, #6
 8002b9a:	f7fd fb35 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8002b9e:	2008      	movs	r0, #8
 8002ba0:	f7fd fb32 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f7fd fb2f 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002baa:	2017      	movs	r0, #23
 8002bac:	f7fd fb2c 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bb0:	2028      	movs	r0, #40	; 0x28
 8002bb2:	f7fd fb29 	bl	8000208 <__NVIC_EnableIRQ>
		flags &= ~0x1;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bc2:	701a      	strb	r2, [r3, #0]
		flags &= ~0x2;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bd0:	701a      	strb	r2, [r3, #0]
		flags &= ~0x4;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bde:	701a      	strb	r2, [r3, #0]
		flags &= ~0x8;
 8002be0:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f023 0308 	bic.w	r3, r3, #8
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <TIM5_IRQHandler+0x278>)
 8002bec:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 0;
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <TIM5_IRQHandler+0x2b8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8002bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;
 8002c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOF->BSRR |= GPIO_BSRR_BR_9;
 8002c0c:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <TIM5_IRQHandler+0x2bc>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <TIM5_IRQHandler+0x2bc>)
 8002c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c16:	6193      	str	r3, [r2, #24]
		btncnt_PF15 = 0;
 8002c18:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <TIM5_IRQHandler+0x2c0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
	//	if((GPIOG->IDR & GPIO_IDR_ID5) == 0 && (GPIOF->IDR & GPIO_IDR_ID15) == 0)
	//		TIM14->CCR1 = 40;
	//	else
	//		TIM14->CCR1 = 0;

	if(cnt == 150001)
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <TIM5_IRQHandler+0x2c4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <TIM5_IRQHandler+0x26a>
		cnt = 0;
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <TIM5_IRQHandler+0x270>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2003fc4c 	.word	0x2003fc4c
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	2003fc48 	.word	0x2003fc48
 8002c40:	2003fc55 	.word	0x2003fc55
 8002c44:	2003fc54 	.word	0x2003fc54
 8002c48:	2003fc57 	.word	0x2003fc57
 8002c4c:	2003fc56 	.word	0x2003fc56
 8002c50:	2003fc59 	.word	0x2003fc59
 8002c54:	000249f0 	.word	0x000249f0
 8002c58:	2003fc53 	.word	0x2003fc53
 8002c5c:	2003fc52 	.word	0x2003fc52
 8002c60:	2003fc51 	.word	0x2003fc51
 8002c64:	2003fc50 	.word	0x2003fc50
 8002c68:	2003fc1c 	.word	0x2003fc1c
 8002c6c:	2003fc1d 	.word	0x2003fc1d
 8002c70:	2003fc1e 	.word	0x2003fc1e
 8002c74:	2003fc1f 	.word	0x2003fc1f
 8002c78:	2003fc20 	.word	0x2003fc20
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40021400 	.word	0x40021400
 8002c84:	2003fc44 	.word	0x2003fc44
 8002c88:	000249f1 	.word	0x000249f1

08002c8c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF)
 8002c92:	4b84      	ldr	r3, [pc, #528]	; (8002ea4 <TIM4_IRQHandler+0x218>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80fc 	beq.w	8002e98 <TIM4_IRQHandler+0x20c>
	{
		TIM4->SR &= ~TIM_SR_UIF;
 8002ca0:	4b80      	ldr	r3, [pc, #512]	; (8002ea4 <TIM4_IRQHandler+0x218>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	4a7f      	ldr	r2, [pc, #508]	; (8002ea4 <TIM4_IRQHandler+0x218>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6113      	str	r3, [r2, #16]
		if ((GPIOF->IDR & GPIO_IDR_ID15) == 0)
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <TIM4_IRQHandler+0x21c>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d122      	bne.n	8002cfe <TIM4_IRQHandler+0x72>
		{
			uint32_t buttonState_PF15 = GPIOF->IDR & GPIO_IDR_ID15;
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <TIM4_IRQHandler+0x21c>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc0:	617b      	str	r3, [r7, #20]
			if (buttonState_PF15 != previousButtonState_PF15)
 8002cc2:	4b7a      	ldr	r3, [pc, #488]	; (8002eac <TIM4_IRQHandler+0x220>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM4_IRQHandler+0x4c>
			{
				debounceCounter_PF15 = 0;
 8002cd0:	4b77      	ldr	r3, [pc, #476]	; (8002eb0 <TIM4_IRQHandler+0x224>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e004      	b.n	8002ce2 <TIM4_IRQHandler+0x56>
			}
			else
			{
				debounceCounter_PF15++;
 8002cd8:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <TIM4_IRQHandler+0x224>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4a74      	ldr	r2, [pc, #464]	; (8002eb0 <TIM4_IRQHandler+0x224>)
 8002ce0:	6013      	str	r3, [r2, #0]
			}
			if (debounceCounter_PF15 >= 10)
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <TIM4_IRQHandler+0x224>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b09      	cmp	r3, #9
 8002ce8:	d905      	bls.n	8002cf6 <TIM4_IRQHandler+0x6a>
			{
				buttonPressed_PF15 = 1;
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <TIM4_IRQHandler+0x228>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
				debounceCounter_PF15 = 0;
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <TIM4_IRQHandler+0x224>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
			}
			previousButtonState_PF15 = buttonState_PF15;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <TIM4_IRQHandler+0x220>)
 8002cfc:	701a      	strb	r2, [r3, #0]
		}
		if ((GPIOD->IDR & GPIO_IDR_ID0) == 0)
 8002cfe:	4b6e      	ldr	r3, [pc, #440]	; (8002eb8 <TIM4_IRQHandler+0x22c>)
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d122      	bne.n	8002d50 <TIM4_IRQHandler+0xc4>
		{
			uint32_t buttonState_PD0 = GPIOD->IDR & GPIO_IDR_ID0;
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <TIM4_IRQHandler+0x22c>)
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	613b      	str	r3, [r7, #16]
			if (buttonState_PD0 != previousButtonState_PD0)
 8002d14:	4b69      	ldr	r3, [pc, #420]	; (8002ebc <TIM4_IRQHandler+0x230>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM4_IRQHandler+0x9e>
			{
				debounceCounter_PD0 = 0;
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <TIM4_IRQHandler+0x234>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e004      	b.n	8002d34 <TIM4_IRQHandler+0xa8>
			}
			else
			{
				debounceCounter_PD0++;
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <TIM4_IRQHandler+0x234>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <TIM4_IRQHandler+0x234>)
 8002d32:	6013      	str	r3, [r2, #0]
			}
			if (debounceCounter_PD0 >= 10)
 8002d34:	4b62      	ldr	r3, [pc, #392]	; (8002ec0 <TIM4_IRQHandler+0x234>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d905      	bls.n	8002d48 <TIM4_IRQHandler+0xbc>
			{
				buttonPressed_PD0 = 1;
 8002d3c:	4b61      	ldr	r3, [pc, #388]	; (8002ec4 <TIM4_IRQHandler+0x238>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
				debounceCounter_PD0 = 0;
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <TIM4_IRQHandler+0x234>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
			}
			previousButtonState_PD0 = buttonState_PD0;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b5b      	ldr	r3, [pc, #364]	; (8002ebc <TIM4_IRQHandler+0x230>)
 8002d4e:	701a      	strb	r2, [r3, #0]
		}
		if ((GPIOG->IDR & GPIO_IDR_ID2) == 0)
 8002d50:	4b5d      	ldr	r3, [pc, #372]	; (8002ec8 <TIM4_IRQHandler+0x23c>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d122      	bne.n	8002da2 <TIM4_IRQHandler+0x116>
		{
			uint32_t buttonState_PG2 = GPIOG->IDR & GPIO_IDR_ID2;
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	; (8002ec8 <TIM4_IRQHandler+0x23c>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]
			if (buttonState_PG2 != previousButtonState_PG2)
 8002d66:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <TIM4_IRQHandler+0x240>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM4_IRQHandler+0xf0>
			{
				debounceCounter_PG2 = 0;
 8002d74:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <TIM4_IRQHandler+0x244>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e004      	b.n	8002d86 <TIM4_IRQHandler+0xfa>
			}
			else
			{
				debounceCounter_PG2++;
 8002d7c:	4b54      	ldr	r3, [pc, #336]	; (8002ed0 <TIM4_IRQHandler+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <TIM4_IRQHandler+0x244>)
 8002d84:	6013      	str	r3, [r2, #0]
			}
			if (debounceCounter_PG2 >= 10)
 8002d86:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <TIM4_IRQHandler+0x244>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b09      	cmp	r3, #9
 8002d8c:	d905      	bls.n	8002d9a <TIM4_IRQHandler+0x10e>
			{
				buttonPressed_PG2 = 1;
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <TIM4_IRQHandler+0x248>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
				debounceCounter_PG2 = 0;
 8002d94:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <TIM4_IRQHandler+0x244>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
			}
			previousButtonState_PG2 = buttonState_PG2;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <TIM4_IRQHandler+0x240>)
 8002da0:	701a      	strb	r2, [r3, #0]
		}
		if ((GPIOD->IDR & GPIO_IDR_ID4) == 0)
 8002da2:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <TIM4_IRQHandler+0x22c>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d122      	bne.n	8002df4 <TIM4_IRQHandler+0x168>
		{
			uint32_t buttonState_PD4 = GPIOD->IDR & GPIO_IDR_ID4;
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <TIM4_IRQHandler+0x22c>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	60bb      	str	r3, [r7, #8]
			if (buttonState_PD4 != previousButtonState_PD4)
 8002db8:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <TIM4_IRQHandler+0x24c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <TIM4_IRQHandler+0x142>
			{
				debounceCounter_PD4 = 0;
 8002dc6:	4b45      	ldr	r3, [pc, #276]	; (8002edc <TIM4_IRQHandler+0x250>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e004      	b.n	8002dd8 <TIM4_IRQHandler+0x14c>
			}
			else
			{
				debounceCounter_PD4++;
 8002dce:	4b43      	ldr	r3, [pc, #268]	; (8002edc <TIM4_IRQHandler+0x250>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a41      	ldr	r2, [pc, #260]	; (8002edc <TIM4_IRQHandler+0x250>)
 8002dd6:	6013      	str	r3, [r2, #0]
			}
			if (debounceCounter_PD4 >= 10)
 8002dd8:	4b40      	ldr	r3, [pc, #256]	; (8002edc <TIM4_IRQHandler+0x250>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b09      	cmp	r3, #9
 8002dde:	d905      	bls.n	8002dec <TIM4_IRQHandler+0x160>
			{
				buttonPressed_PD4 = 1;
 8002de0:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <TIM4_IRQHandler+0x254>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
				debounceCounter_PD4 = 0;
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <TIM4_IRQHandler+0x250>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
			}
			previousButtonState_PD4 = buttonState_PD4;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <TIM4_IRQHandler+0x24c>)
 8002df2:	701a      	strb	r2, [r3, #0]
		}
		if ((GPIOG->IDR & GPIO_IDR_ID5) == 0)
 8002df4:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <TIM4_IRQHandler+0x23c>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d122      	bne.n	8002e46 <TIM4_IRQHandler+0x1ba>
		{
			uint32_t buttonState_PG5 = GPIOG->IDR & GPIO_IDR_ID5;
 8002e00:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <TIM4_IRQHandler+0x23c>)
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	607b      	str	r3, [r7, #4]
			if (buttonState_PG5 != previousButtonState_PG5)
 8002e0a:	4b36      	ldr	r3, [pc, #216]	; (8002ee4 <TIM4_IRQHandler+0x258>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM4_IRQHandler+0x194>
			{
				debounceCounter_PG5 = 0;
 8002e18:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <TIM4_IRQHandler+0x25c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e004      	b.n	8002e2a <TIM4_IRQHandler+0x19e>
			}
			else
			{
				debounceCounter_PG5++;
 8002e20:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <TIM4_IRQHandler+0x25c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a30      	ldr	r2, [pc, #192]	; (8002ee8 <TIM4_IRQHandler+0x25c>)
 8002e28:	6013      	str	r3, [r2, #0]
			}
			if (debounceCounter_PG5 >= 10)
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <TIM4_IRQHandler+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b09      	cmp	r3, #9
 8002e30:	d905      	bls.n	8002e3e <TIM4_IRQHandler+0x1b2>
			{
				buttonPressed_PG5 = 1;
 8002e32:	4b2e      	ldr	r3, [pc, #184]	; (8002eec <TIM4_IRQHandler+0x260>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
				debounceCounter_PG5 = 0;
 8002e38:	4b2b      	ldr	r3, [pc, #172]	; (8002ee8 <TIM4_IRQHandler+0x25c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
			}
			previousButtonState_PG5 = buttonState_PG5;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <TIM4_IRQHandler+0x258>)
 8002e44:	701a      	strb	r2, [r3, #0]
		}
		if ((GPIOE->IDR & GPIO_IDR_ID8) == 0)
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <TIM4_IRQHandler+0x264>)
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d122      	bne.n	8002e98 <TIM4_IRQHandler+0x20c>
		{
			uint32_t buttonState_PE8 = GPIOE->IDR & GPIO_IDR_ID8;
 8002e52:	4b27      	ldr	r3, [pc, #156]	; (8002ef0 <TIM4_IRQHandler+0x264>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	603b      	str	r3, [r7, #0]
			if (buttonState_PE8 != previousButtonState_PE8)
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <TIM4_IRQHandler+0x268>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM4_IRQHandler+0x1e6>
			{
				debounceCounter_PE8 = 0;
 8002e6a:	4b23      	ldr	r3, [pc, #140]	; (8002ef8 <TIM4_IRQHandler+0x26c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e004      	b.n	8002e7c <TIM4_IRQHandler+0x1f0>
			}
			else
			{
				debounceCounter_PE8++;
 8002e72:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <TIM4_IRQHandler+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3301      	adds	r3, #1
 8002e78:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <TIM4_IRQHandler+0x26c>)
 8002e7a:	6013      	str	r3, [r2, #0]
			}
			if (debounceCounter_PE8 >= 10)
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <TIM4_IRQHandler+0x26c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d905      	bls.n	8002e90 <TIM4_IRQHandler+0x204>
			{
				buttonPressed_PE8 = 1;
 8002e84:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <TIM4_IRQHandler+0x270>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
				debounceCounter_PE8 = 0;
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <TIM4_IRQHandler+0x26c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
			}
			previousButtonState_PE8 = buttonState_PE8;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <TIM4_IRQHandler+0x268>)
 8002e96:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40000800 	.word	0x40000800
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	2003fc41 	.word	0x2003fc41
 8002eb0:	2003fc38 	.word	0x2003fc38
 8002eb4:	2003fc21 	.word	0x2003fc21
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	2003fc3f 	.word	0x2003fc3f
 8002ec0:	2003fc30 	.word	0x2003fc30
 8002ec4:	2003fc1f 	.word	0x2003fc1f
 8002ec8:	40021800 	.word	0x40021800
 8002ecc:	2003fc3d 	.word	0x2003fc3d
 8002ed0:	2003fc28 	.word	0x2003fc28
 8002ed4:	2003fc1d 	.word	0x2003fc1d
 8002ed8:	2003fc40 	.word	0x2003fc40
 8002edc:	2003fc34 	.word	0x2003fc34
 8002ee0:	2003fc20 	.word	0x2003fc20
 8002ee4:	2003fc3e 	.word	0x2003fc3e
 8002ee8:	2003fc2c 	.word	0x2003fc2c
 8002eec:	2003fc1e 	.word	0x2003fc1e
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	2003fc3c 	.word	0x2003fc3c
 8002ef8:	2003fc24 	.word	0x2003fc24
 8002efc:	2003fc1c 	.word	0x2003fc1c

08002f00 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
	uint8_t press_cnt = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
	TIM4->CNT = 0;
 8002f0a:	4b9d      	ldr	r3, [pc, #628]	; (8003180 <EXTI0_IRQHandler+0x280>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	625a      	str	r2, [r3, #36]	; 0x24
	if((GPIOD->IDR & GPIO_IDR_ID0) == 0)
 8002f10:	4b9c      	ldr	r3, [pc, #624]	; (8003184 <EXTI0_IRQHandler+0x284>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d11a      	bne.n	8002f52 <EXTI0_IRQHandler+0x52>
	{
		if(buttonPressed_PD0 == 1)
 8002f1c:	4b9a      	ldr	r3, [pc, #616]	; (8003188 <EXTI0_IRQHandler+0x288>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d115      	bne.n	8002f52 <EXTI0_IRQHandler+0x52>
		{
			press_cnt = press_cnt + 1;
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
			buttonPressed_PD0 = 0;
 8002f2c:	4b96      	ldr	r3, [pc, #600]	; (8003188 <EXTI0_IRQHandler+0x288>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	701a      	strb	r2, [r3, #0]
			TIM11->CCR1 = 100;
 8002f32:	4b96      	ldr	r3, [pc, #600]	; (800318c <EXTI0_IRQHandler+0x28c>)
 8002f34:	2264      	movs	r2, #100	; 0x64
 8002f36:	635a      	str	r2, [r3, #52]	; 0x34
			for(int i = 0; i < 200000;i++);
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	e002      	b.n	8002f44 <EXTI0_IRQHandler+0x44>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60bb      	str	r3, [r7, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a92      	ldr	r2, [pc, #584]	; (8003190 <EXTI0_IRQHandler+0x290>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	ddf8      	ble.n	8002f3e <EXTI0_IRQHandler+0x3e>
			TIM11->CCR1 = 0;
 8002f4c:	4b8f      	ldr	r3, [pc, #572]	; (800318c <EXTI0_IRQHandler+0x28c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}


	if((flags & 0x8) == 0 && (flags & 0x1) == 0 && (flags & 0x2) == 0  && (flags & 0x4) == 0 && press_cnt == 1)
 8002f52:	4b90      	ldr	r3, [pc, #576]	; (8003194 <EXTI0_IRQHandler+0x294>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 80fb 	bne.w	8003156 <EXTI0_IRQHandler+0x256>
 8002f60:	4b8c      	ldr	r3, [pc, #560]	; (8003194 <EXTI0_IRQHandler+0x294>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 80f4 	bne.w	8003156 <EXTI0_IRQHandler+0x256>
 8002f6e:	4b89      	ldr	r3, [pc, #548]	; (8003194 <EXTI0_IRQHandler+0x294>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 80ed 	bne.w	8003156 <EXTI0_IRQHandler+0x256>
 8002f7c:	4b85      	ldr	r3, [pc, #532]	; (8003194 <EXTI0_IRQHandler+0x294>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f040 80e6 	bne.w	8003156 <EXTI0_IRQHandler+0x256>
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	f040 80e2 	bne.w	8003156 <EXTI0_IRQHandler+0x256>
	{
		GPIOF->BSRR |= GPIO_BSRR_BR_9;
 8002f92:	4b81      	ldr	r3, [pc, #516]	; (8003198 <EXTI0_IRQHandler+0x298>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	4a80      	ldr	r2, [pc, #512]	; (8003198 <EXTI0_IRQHandler+0x298>)
 8002f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	6193      	str	r3, [r2, #24]
		if(predifined_parametrs == 3)
 8002f9e:	4b7f      	ldr	r3, [pc, #508]	; (800319c <EXTI0_IRQHandler+0x29c>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b03      	cmp	r3, #3
 8002fa4:	d102      	bne.n	8002fac <EXTI0_IRQHandler+0xac>
			predifined_parametrs = 0;
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	; (800319c <EXTI0_IRQHandler+0x29c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
		if(predifined_parametrs == 2)
 8002fac:	4b7b      	ldr	r3, [pc, #492]	; (800319c <EXTI0_IRQHandler+0x29c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d142      	bne.n	800303a <EXTI0_IRQHandler+0x13a>
		{
			predifined_parametrs = 3;
 8002fb4:	4b79      	ldr	r3, [pc, #484]	; (800319c <EXTI0_IRQHandler+0x29c>)
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	701a      	strb	r2, [r3, #0]
			set_hour_2 = 0;
 8002fba:	4b79      	ldr	r3, [pc, #484]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
			set_hour = 0;
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
			set_minute_2 = 0;
 8002fc6:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
			set_minute = 0;
 8002fcc:	4b77      	ldr	r3, [pc, #476]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]
			set_power = 0;
 8002fd2:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
			hour_2 = set_hour_2;
 8002fd8:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 8002fda:	781a      	ldrb	r2, [r3, #0]
 8002fdc:	4b75      	ldr	r3, [pc, #468]	; (80031b4 <EXTI0_IRQHandler+0x2b4>)
 8002fde:	701a      	strb	r2, [r3, #0]
			hour = set_hour;
 8002fe0:	4b70      	ldr	r3, [pc, #448]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <EXTI0_IRQHandler+0x2b8>)
 8002fe6:	701a      	strb	r2, [r3, #0]
			minute_2 = set_minute_2;
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	4b73      	ldr	r3, [pc, #460]	; (80031bc <EXTI0_IRQHandler+0x2bc>)
 8002fee:	701a      	strb	r2, [r3, #0]
			minute = set_minute;
 8002ff0:	4b6e      	ldr	r3, [pc, #440]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <EXTI0_IRQHandler+0x2c0>)
 8002ff6:	701a      	strb	r2, [r3, #0]
			power = set_power;
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	4b71      	ldr	r3, [pc, #452]	; (80031c4 <EXTI0_IRQHandler+0x2c4>)
 8002ffe:	701a      	strb	r2, [r3, #0]
			change_digit_set_time(1, set_hour_2);
 8003000:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	2001      	movs	r0, #1
 8003008:	f7fd ff9a 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(2, set_hour);
 800300c:	4b65      	ldr	r3, [pc, #404]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	2002      	movs	r0, #2
 8003014:	f7fd ff94 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(3, set_minute_2);
 8003018:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	2003      	movs	r0, #3
 8003020:	f7fd ff8e 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(4, set_minute);
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	2004      	movs	r0, #4
 800302c:	f7fd ff88 	bl	8000f40 <change_digit_set_time>
			change_digit_power(set_power);
 8003030:	4b5f      	ldr	r3, [pc, #380]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fb89 	bl	800174c <change_digit_power>
		}
		if(predifined_parametrs == 1)
 800303a:	4b58      	ldr	r3, [pc, #352]	; (800319c <EXTI0_IRQHandler+0x29c>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d142      	bne.n	80030c8 <EXTI0_IRQHandler+0x1c8>
		{
			predifined_parametrs = 2;
 8003042:	4b56      	ldr	r3, [pc, #344]	; (800319c <EXTI0_IRQHandler+0x29c>)
 8003044:	2202      	movs	r2, #2
 8003046:	701a      	strb	r2, [r3, #0]
			set_hour_2 = 2;
 8003048:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
			set_hour = 5;
 800304e:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 8003050:	2205      	movs	r2, #5
 8003052:	701a      	strb	r2, [r3, #0]
			set_minute_2 = 3;
 8003054:	4b54      	ldr	r3, [pc, #336]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 8003056:	2203      	movs	r2, #3
 8003058:	701a      	strb	r2, [r3, #0]
			set_minute = 0;
 800305a:	4b54      	ldr	r3, [pc, #336]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
			set_power = 100;
 8003060:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 8003062:	2264      	movs	r2, #100	; 0x64
 8003064:	701a      	strb	r2, [r3, #0]
			hour_2 = set_hour_2;
 8003066:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	4b52      	ldr	r3, [pc, #328]	; (80031b4 <EXTI0_IRQHandler+0x2b4>)
 800306c:	701a      	strb	r2, [r3, #0]
			hour = set_hour;
 800306e:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	4b51      	ldr	r3, [pc, #324]	; (80031b8 <EXTI0_IRQHandler+0x2b8>)
 8003074:	701a      	strb	r2, [r3, #0]
			minute_2 = set_minute_2;
 8003076:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	4b50      	ldr	r3, [pc, #320]	; (80031bc <EXTI0_IRQHandler+0x2bc>)
 800307c:	701a      	strb	r2, [r3, #0]
			minute = set_minute;
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <EXTI0_IRQHandler+0x2c0>)
 8003084:	701a      	strb	r2, [r3, #0]
			power = set_power;
 8003086:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	4b4e      	ldr	r3, [pc, #312]	; (80031c4 <EXTI0_IRQHandler+0x2c4>)
 800308c:	701a      	strb	r2, [r3, #0]
			change_digit_set_time(1, set_hour_2);
 800308e:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	4619      	mov	r1, r3
 8003094:	2001      	movs	r0, #1
 8003096:	f7fd ff53 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(2, set_hour);
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
 80030a0:	2002      	movs	r0, #2
 80030a2:	f7fd ff4d 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(3, set_minute_2);
 80030a6:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	2003      	movs	r0, #3
 80030ae:	f7fd ff47 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(4, set_minute);
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	2004      	movs	r0, #4
 80030ba:	f7fd ff41 	bl	8000f40 <change_digit_set_time>
			change_digit_power(set_power);
 80030be:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fb42 	bl	800174c <change_digit_power>
		}
		if(predifined_parametrs == 0)
 80030c8:	4b34      	ldr	r3, [pc, #208]	; (800319c <EXTI0_IRQHandler+0x29c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d142      	bne.n	8003156 <EXTI0_IRQHandler+0x256>
		{
			predifined_parametrs = 1;
 80030d0:	4b32      	ldr	r3, [pc, #200]	; (800319c <EXTI0_IRQHandler+0x29c>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
			set_hour_2 = 0;
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
			set_hour = 1;
 80030dc:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 80030de:	2201      	movs	r2, #1
 80030e0:	701a      	strb	r2, [r3, #0]
			set_minute_2 = 0;
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			set_minute = 0;
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
			set_power = 50;
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 80030f0:	2232      	movs	r2, #50	; 0x32
 80030f2:	701a      	strb	r2, [r3, #0]
			hour_2 = set_hour_2;
 80030f4:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 80030f6:	781a      	ldrb	r2, [r3, #0]
 80030f8:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <EXTI0_IRQHandler+0x2b4>)
 80030fa:	701a      	strb	r2, [r3, #0]
			hour = set_hour;
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <EXTI0_IRQHandler+0x2b8>)
 8003102:	701a      	strb	r2, [r3, #0]
			minute_2 = set_minute_2;
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <EXTI0_IRQHandler+0x2bc>)
 800310a:	701a      	strb	r2, [r3, #0]
			minute = set_minute;
 800310c:	4b27      	ldr	r3, [pc, #156]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	4b2b      	ldr	r3, [pc, #172]	; (80031c0 <EXTI0_IRQHandler+0x2c0>)
 8003112:	701a      	strb	r2, [r3, #0]
			power = set_power;
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <EXTI0_IRQHandler+0x2c4>)
 800311a:	701a      	strb	r2, [r3, #0]
			change_digit_set_time(1, set_hour_2);
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <EXTI0_IRQHandler+0x2a0>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	4619      	mov	r1, r3
 8003122:	2001      	movs	r0, #1
 8003124:	f7fd ff0c 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(2, set_hour);
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <EXTI0_IRQHandler+0x2a4>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	2002      	movs	r0, #2
 8003130:	f7fd ff06 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(3, set_minute_2);
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <EXTI0_IRQHandler+0x2a8>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	2003      	movs	r0, #3
 800313c:	f7fd ff00 	bl	8000f40 <change_digit_set_time>
			change_digit_set_time(4, set_minute);
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <EXTI0_IRQHandler+0x2ac>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	2004      	movs	r0, #4
 8003148:	f7fd fefa 	bl	8000f40 <change_digit_set_time>
			change_digit_power(set_power);
 800314c:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <EXTI0_IRQHandler+0x2b0>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe fafb 	bl	800174c <change_digit_power>
		}
	}

	for(int i = 0; i <= 3600000; ++i);
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	e002      	b.n	8003162 <EXTI0_IRQHandler+0x262>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3301      	adds	r3, #1
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <EXTI0_IRQHandler+0x2c8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	ddf8      	ble.n	800315c <EXTI0_IRQHandler+0x25c>
	EXTI->PR |= EXTI_PR_PR0;
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <EXTI0_IRQHandler+0x2cc>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <EXTI0_IRQHandler+0x2cc>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6153      	str	r3, [r2, #20]
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40000800 	.word	0x40000800
 8003184:	40020c00 	.word	0x40020c00
 8003188:	2003fc1f 	.word	0x2003fc1f
 800318c:	40014800 	.word	0x40014800
 8003190:	00030d3f 	.word	0x00030d3f
 8003194:	2003fc48 	.word	0x2003fc48
 8003198:	40021400 	.word	0x40021400
 800319c:	2003fc5a 	.word	0x2003fc5a
 80031a0:	2003fc57 	.word	0x2003fc57
 80031a4:	2003fc56 	.word	0x2003fc56
 80031a8:	2003fc55 	.word	0x2003fc55
 80031ac:	2003fc54 	.word	0x2003fc54
 80031b0:	2003fc59 	.word	0x2003fc59
 80031b4:	2003fc53 	.word	0x2003fc53
 80031b8:	2003fc52 	.word	0x2003fc52
 80031bc:	2003fc51 	.word	0x2003fc51
 80031c0:	2003fc50 	.word	0x2003fc50
 80031c4:	2003fc58 	.word	0x2003fc58
 80031c8:	0036ee80 	.word	0x0036ee80
 80031cc:	40013c00 	.word	0x40013c00

080031d0 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
	uint8_t press_cnt = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	73fb      	strb	r3, [r7, #15]
	TIM4->CNT = 0;
 80031da:	4b68      	ldr	r3, [pc, #416]	; (800337c <EXTI2_IRQHandler+0x1ac>)
 80031dc:	2200      	movs	r2, #0
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
	if((GPIOG->IDR & GPIO_IDR_ID2) == 0)
 80031e0:	4b67      	ldr	r3, [pc, #412]	; (8003380 <EXTI2_IRQHandler+0x1b0>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11a      	bne.n	8003222 <EXTI2_IRQHandler+0x52>
	{
		if(buttonPressed_PG2 == 1)
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <EXTI2_IRQHandler+0x1b4>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d115      	bne.n	8003222 <EXTI2_IRQHandler+0x52>
		{
			TIM11->CCR1 = 100;
 80031f6:	4b64      	ldr	r3, [pc, #400]	; (8003388 <EXTI2_IRQHandler+0x1b8>)
 80031f8:	2264      	movs	r2, #100	; 0x64
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
			for(int i = 0; i < 200000;i++);
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	e002      	b.n	8003208 <EXTI2_IRQHandler+0x38>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	3301      	adds	r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4a60      	ldr	r2, [pc, #384]	; (800338c <EXTI2_IRQHandler+0x1bc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	ddf8      	ble.n	8003202 <EXTI2_IRQHandler+0x32>
			TIM11->CCR1 = 0;
 8003210:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <EXTI2_IRQHandler+0x1b8>)
 8003212:	2200      	movs	r2, #0
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
			press_cnt = press_cnt + 1;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	3301      	adds	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
			buttonPressed_PG2 = 0;
 800321c:	4b59      	ldr	r3, [pc, #356]	; (8003384 <EXTI2_IRQHandler+0x1b4>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
		}
	}

	if(press_cnt == 1)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 8094 	bne.w	8003352 <EXTI2_IRQHandler+0x182>
	{
		TIM3->CCR1 = 0;
 800322a:	4b59      	ldr	r3, [pc, #356]	; (8003390 <EXTI2_IRQHandler+0x1c0>)
 800322c:	2200      	movs	r2, #0
 800322e:	635a      	str	r2, [r3, #52]	; 0x34
		GPIOF->BSRR |= GPIO_BSRR_BR_9;
 8003230:	4b58      	ldr	r3, [pc, #352]	; (8003394 <EXTI2_IRQHandler+0x1c4>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4a57      	ldr	r2, [pc, #348]	; (8003394 <EXTI2_IRQHandler+0x1c4>)
 8003236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800323a:	6193      	str	r3, [r2, #24]
		TIM2->CR1 &= ~TIM_CR1_CEN;
 800323c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;
 800324c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003250:	2200      	movs	r2, #0
 8003252:	625a      	str	r2, [r3, #36]	; 0x24
		flags &= ~0x1;
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 8003260:	701a      	strb	r2, [r3, #0]
		flags &= ~0x2;
 8003262:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	f023 0302 	bic.w	r3, r3, #2
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 800326e:	701a      	strb	r2, [r3, #0]
		flags &= ~0x4;
 8003270:	4b49      	ldr	r3, [pc, #292]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 800327c:	701a      	strb	r2, [r3, #0]
		flags &= ~0x8;
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	f023 0308 	bic.w	r3, r3, #8
 8003286:	b2da      	uxtb	r2, r3
 8003288:	4b43      	ldr	r3, [pc, #268]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 800328a:	701a      	strb	r2, [r3, #0]
		flags &= ~0x80;
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4b40      	ldr	r3, [pc, #256]	; (8003398 <EXTI2_IRQHandler+0x1c8>)
 8003298:	701a      	strb	r2, [r3, #0]
		change_colon_visibility(1);
 800329a:	2001      	movs	r0, #1
 800329c:	f7ff fa90 	bl	80027c0 <change_colon_visibility>
		buttonPressed_PD0 = 0;
 80032a0:	4b3e      	ldr	r3, [pc, #248]	; (800339c <EXTI2_IRQHandler+0x1cc>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
		buttonPressed_PD4 = 0;
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <EXTI2_IRQHandler+0x1d0>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
		btncnt_PF15 = 0;
 80032ac:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <EXTI2_IRQHandler+0x1d4>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
		power = 0;
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <EXTI2_IRQHandler+0x1d8>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
		minute = 0;
 80032b8:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <EXTI2_IRQHandler+0x1dc>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
		minute_2 = 0;
 80032be:	4b3c      	ldr	r3, [pc, #240]	; (80033b0 <EXTI2_IRQHandler+0x1e0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	701a      	strb	r2, [r3, #0]
		hour = 0;
 80032c4:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <EXTI2_IRQHandler+0x1e4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
		hour_2 = 0;
 80032ca:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <EXTI2_IRQHandler+0x1e8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
		set_power = 0;
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <EXTI2_IRQHandler+0x1ec>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
		set_minute = 0;
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <EXTI2_IRQHandler+0x1f0>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
		set_minute_2 = 0;
 80032dc:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <EXTI2_IRQHandler+0x1f4>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
		set_hour = 0;
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <EXTI2_IRQHandler+0x1f8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
		set_hour_2 = 0;
 80032e8:	4b38      	ldr	r3, [pc, #224]	; (80033cc <EXTI2_IRQHandler+0x1fc>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	701a      	strb	r2, [r3, #0]
		set_power = 0;
 80032ee:	4b33      	ldr	r3, [pc, #204]	; (80033bc <EXTI2_IRQHandler+0x1ec>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
		change_digit_main_time(1, 0);
 80032f4:	2100      	movs	r1, #0
 80032f6:	2001      	movs	r0, #1
 80032f8:	f7fe f83a 	bl	8001370 <change_digit_main_time>
		change_digit_main_time(2, 0);
 80032fc:	2100      	movs	r1, #0
 80032fe:	2002      	movs	r0, #2
 8003300:	f7fe f836 	bl	8001370 <change_digit_main_time>
		change_digit_main_time(3, 0);
 8003304:	2100      	movs	r1, #0
 8003306:	2003      	movs	r0, #3
 8003308:	f7fe f832 	bl	8001370 <change_digit_main_time>
		change_digit_main_time(4, 0);
 800330c:	2100      	movs	r1, #0
 800330e:	2004      	movs	r0, #4
 8003310:	f7fe f82e 	bl	8001370 <change_digit_main_time>
		change_digit_set_time(1, 0);
 8003314:	2100      	movs	r1, #0
 8003316:	2001      	movs	r0, #1
 8003318:	f7fd fe12 	bl	8000f40 <change_digit_set_time>
		change_digit_set_time(2, 0);
 800331c:	2100      	movs	r1, #0
 800331e:	2002      	movs	r0, #2
 8003320:	f7fd fe0e 	bl	8000f40 <change_digit_set_time>
		change_digit_set_time(3, 0);
 8003324:	2100      	movs	r1, #0
 8003326:	2003      	movs	r0, #3
 8003328:	f7fd fe0a 	bl	8000f40 <change_digit_set_time>
		change_digit_set_time(4, 0);
 800332c:	2100      	movs	r1, #0
 800332e:	2004      	movs	r0, #4
 8003330:	f7fd fe06 	bl	8000f40 <change_digit_set_time>
		change_digit_power(0);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fe fa09 	bl	800174c <change_digit_power>
		change_colon_visibility(1);
 800333a:	2001      	movs	r0, #1
 800333c:	f7ff fa40 	bl	80027c0 <change_colon_visibility>
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003340:	2006      	movs	r0, #6
 8003342:	f7fc ff61 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003346:	200a      	movs	r0, #10
 8003348:	f7fc ff5e 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800334c:	2017      	movs	r0, #23
 800334e:	f7fc ff5b 	bl	8000208 <__NVIC_EnableIRQ>
	}

	for(int i = 0; i <= 3600000; ++i);
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	e002      	b.n	800335e <EXTI2_IRQHandler+0x18e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3301      	adds	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <EXTI2_IRQHandler+0x200>)
 8003362:	4293      	cmp	r3, r2
 8003364:	ddf8      	ble.n	8003358 <EXTI2_IRQHandler+0x188>
	EXTI->PR |= EXTI_PR_PR2;
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <EXTI2_IRQHandler+0x204>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <EXTI2_IRQHandler+0x204>)
 800336c:	f043 0304 	orr.w	r3, r3, #4
 8003370:	6153      	str	r3, [r2, #20]
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40000800 	.word	0x40000800
 8003380:	40021800 	.word	0x40021800
 8003384:	2003fc1d 	.word	0x2003fc1d
 8003388:	40014800 	.word	0x40014800
 800338c:	00030d3f 	.word	0x00030d3f
 8003390:	40000400 	.word	0x40000400
 8003394:	40021400 	.word	0x40021400
 8003398:	2003fc48 	.word	0x2003fc48
 800339c:	2003fc1f 	.word	0x2003fc1f
 80033a0:	2003fc20 	.word	0x2003fc20
 80033a4:	2003fc44 	.word	0x2003fc44
 80033a8:	2003fc58 	.word	0x2003fc58
 80033ac:	2003fc50 	.word	0x2003fc50
 80033b0:	2003fc51 	.word	0x2003fc51
 80033b4:	2003fc52 	.word	0x2003fc52
 80033b8:	2003fc53 	.word	0x2003fc53
 80033bc:	2003fc59 	.word	0x2003fc59
 80033c0:	2003fc54 	.word	0x2003fc54
 80033c4:	2003fc55 	.word	0x2003fc55
 80033c8:	2003fc56 	.word	0x2003fc56
 80033cc:	2003fc57 	.word	0x2003fc57
 80033d0:	0036ee80 	.word	0x0036ee80
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
	if ((EXTI->PR & EXTI_PR_PR4) != 0)
 80033de:	4b92      	ldr	r3, [pc, #584]	; (8003628 <EXTI4_IRQHandler+0x250>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8119 	beq.w	800361e <EXTI4_IRQHandler+0x246>
	{
		uint8_t press_cnt = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	75fb      	strb	r3, [r7, #23]
		TIM4->CNT = 0;
 80033f0:	4b8e      	ldr	r3, [pc, #568]	; (800362c <EXTI4_IRQHandler+0x254>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
		if((GPIOD->IDR & GPIO_IDR_ID4) == 0)
 80033f6:	4b8e      	ldr	r3, [pc, #568]	; (8003630 <EXTI4_IRQHandler+0x258>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11a      	bne.n	8003438 <EXTI4_IRQHandler+0x60>
		{
			if(buttonPressed_PD4 == 1)
 8003402:	4b8c      	ldr	r3, [pc, #560]	; (8003634 <EXTI4_IRQHandler+0x25c>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d115      	bne.n	8003438 <EXTI4_IRQHandler+0x60>
			{
				press_cnt = press_cnt + 1;
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	3301      	adds	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
				buttonPressed_PD4 = 0;
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <EXTI4_IRQHandler+0x25c>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
				TIM11->CCR1 = 100;
 8003418:	4b87      	ldr	r3, [pc, #540]	; (8003638 <EXTI4_IRQHandler+0x260>)
 800341a:	2264      	movs	r2, #100	; 0x64
 800341c:	635a      	str	r2, [r3, #52]	; 0x34
				for(int i = 0; i < 200000;i++);
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e002      	b.n	800342a <EXTI4_IRQHandler+0x52>
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	3301      	adds	r3, #1
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4a83      	ldr	r2, [pc, #524]	; (800363c <EXTI4_IRQHandler+0x264>)
 800342e:	4293      	cmp	r3, r2
 8003430:	ddf8      	ble.n	8003424 <EXTI4_IRQHandler+0x4c>
				TIM11->CCR1 = 0;
 8003432:	4b81      	ldr	r3, [pc, #516]	; (8003638 <EXTI4_IRQHandler+0x260>)
 8003434:	2200      	movs	r2, #0
 8003436:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if(press_cnt == 1)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b01      	cmp	r3, #1
 800343c:	f040 80df 	bne.w	80035fe <EXTI4_IRQHandler+0x226>
		{
			while((GPIOD->IDR & GPIO_IDR_ID4) == 0)
 8003440:	e0d6      	b.n	80035f0 <EXTI4_IRQHandler+0x218>
			{
				if((flags & 0x2) != 0 && (set_hour_2 + set_hour) != 0)
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <EXTI4_IRQHandler+0x268>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d055      	beq.n	80034fa <EXTI4_IRQHandler+0x122>
 800344e:	4b7d      	ldr	r3, [pc, #500]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <EXTI4_IRQHandler+0x270>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	4413      	add	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d04d      	beq.n	80034fa <EXTI4_IRQHandler+0x122>
				{
					if(set_hour == 0)
 800345e:	4b7a      	ldr	r3, [pc, #488]	; (8003648 <EXTI4_IRQHandler+0x270>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <EXTI4_IRQHandler+0xba>
					{
						--set_hour_2;
 8003466:	4b77      	ldr	r3, [pc, #476]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	3b01      	subs	r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b75      	ldr	r3, [pc, #468]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 8003470:	701a      	strb	r2, [r3, #0]
						set_hour = 9;
 8003472:	4b75      	ldr	r3, [pc, #468]	; (8003648 <EXTI4_IRQHandler+0x270>)
 8003474:	2209      	movs	r2, #9
 8003476:	701a      	strb	r2, [r3, #0]
						change_digit_set_time(1, set_hour_2);
 8003478:	4b72      	ldr	r3, [pc, #456]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	2001      	movs	r0, #1
 8003480:	f7fd fd5e 	bl	8000f40 <change_digit_set_time>
						change_digit_set_time(2, set_hour);
 8003484:	4b70      	ldr	r3, [pc, #448]	; (8003648 <EXTI4_IRQHandler+0x270>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4619      	mov	r1, r3
 800348a:	2002      	movs	r0, #2
 800348c:	f7fd fd58 	bl	8000f40 <change_digit_set_time>
 8003490:	e033      	b.n	80034fa <EXTI4_IRQHandler+0x122>
					}
					else
					{
						if(set_hour == 0)
 8003492:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <EXTI4_IRQHandler+0x270>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d113      	bne.n	80034c2 <EXTI4_IRQHandler+0xea>
						{
							if(set_hour_2 != 0)
 800349a:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <EXTI4_IRQHandler+0xde>
							{
								--set_hour_2;
 80034a2:	4b68      	ldr	r3, [pc, #416]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 80034ac:	701a      	strb	r2, [r3, #0]
								set_hour = 9;
 80034ae:	4b66      	ldr	r3, [pc, #408]	; (8003648 <EXTI4_IRQHandler+0x270>)
 80034b0:	2209      	movs	r2, #9
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e005      	b.n	80034c2 <EXTI4_IRQHandler+0xea>
							}
							else
							{
								set_hour = 0;
 80034b6:	4b64      	ldr	r3, [pc, #400]	; (8003648 <EXTI4_IRQHandler+0x270>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
								set_hour_2 = 0;
 80034bc:	4b61      	ldr	r3, [pc, #388]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
							}
						}
						--set_hour;
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <EXTI4_IRQHandler+0x270>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <EXTI4_IRQHandler+0x270>)
 80034cc:	701a      	strb	r2, [r3, #0]
						change_digit_set_time(1, set_hour_2);
 80034ce:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <EXTI4_IRQHandler+0x26c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	4619      	mov	r1, r3
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7fd fd33 	bl	8000f40 <change_digit_set_time>
						change_digit_set_time(2, set_hour);
 80034da:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <EXTI4_IRQHandler+0x270>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	2002      	movs	r0, #2
 80034e2:	f7fd fd2d 	bl	8000f40 <change_digit_set_time>
						for(int i = 0; i <= 1500000; ++i);
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	e002      	b.n	80034f2 <EXTI4_IRQHandler+0x11a>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a55      	ldr	r2, [pc, #340]	; (800364c <EXTI4_IRQHandler+0x274>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	ddf8      	ble.n	80034ec <EXTI4_IRQHandler+0x114>
					}
				}
				if((flags & 0x1) != 0 && (set_minute + set_minute_2) != 0)
 80034fa:	4b51      	ldr	r3, [pc, #324]	; (8003640 <EXTI4_IRQHandler+0x268>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d055      	beq.n	80035b2 <EXTI4_IRQHandler+0x1da>
 8003506:	4b52      	ldr	r3, [pc, #328]	; (8003650 <EXTI4_IRQHandler+0x278>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b51      	ldr	r3, [pc, #324]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4413      	add	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04d      	beq.n	80035b2 <EXTI4_IRQHandler+0x1da>
				{
					if(set_minute == 0)
 8003516:	4b4e      	ldr	r3, [pc, #312]	; (8003650 <EXTI4_IRQHandler+0x278>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <EXTI4_IRQHandler+0x172>
					{
						--set_minute_2;
 800351e:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	3b01      	subs	r3, #1
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4b4b      	ldr	r3, [pc, #300]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003528:	701a      	strb	r2, [r3, #0]
						set_minute = 9;
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <EXTI4_IRQHandler+0x278>)
 800352c:	2209      	movs	r2, #9
 800352e:	701a      	strb	r2, [r3, #0]
						change_digit_set_time(3, set_minute_2);
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	4619      	mov	r1, r3
 8003536:	2003      	movs	r0, #3
 8003538:	f7fd fd02 	bl	8000f40 <change_digit_set_time>
						change_digit_set_time(4, set_minute);
 800353c:	4b44      	ldr	r3, [pc, #272]	; (8003650 <EXTI4_IRQHandler+0x278>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	4619      	mov	r1, r3
 8003542:	2004      	movs	r0, #4
 8003544:	f7fd fcfc 	bl	8000f40 <change_digit_set_time>
 8003548:	e033      	b.n	80035b2 <EXTI4_IRQHandler+0x1da>
					}
					else
					{
						if(set_minute == 0)
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <EXTI4_IRQHandler+0x278>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d113      	bne.n	800357a <EXTI4_IRQHandler+0x1a2>
						{
							if(set_minute_2 != 0)
 8003552:	4b40      	ldr	r3, [pc, #256]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <EXTI4_IRQHandler+0x196>
							{
								--set_minute_2;
 800355a:	4b3e      	ldr	r3, [pc, #248]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	3b01      	subs	r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b3c      	ldr	r3, [pc, #240]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003564:	701a      	strb	r2, [r3, #0]
								set_minute = 9;
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <EXTI4_IRQHandler+0x278>)
 8003568:	2209      	movs	r2, #9
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e005      	b.n	800357a <EXTI4_IRQHandler+0x1a2>
							}
							else
							{
								set_minute = 0;
 800356e:	4b38      	ldr	r3, [pc, #224]	; (8003650 <EXTI4_IRQHandler+0x278>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
								set_minute_2 = 0;
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
							}
						}
						--set_minute;
 800357a:	4b35      	ldr	r3, [pc, #212]	; (8003650 <EXTI4_IRQHandler+0x278>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	3b01      	subs	r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b33      	ldr	r3, [pc, #204]	; (8003650 <EXTI4_IRQHandler+0x278>)
 8003584:	701a      	strb	r2, [r3, #0]
						change_digit_set_time(3, set_minute_2);
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <EXTI4_IRQHandler+0x27c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	2003      	movs	r0, #3
 800358e:	f7fd fcd7 	bl	8000f40 <change_digit_set_time>
						change_digit_set_time(4, set_minute);
 8003592:	4b2f      	ldr	r3, [pc, #188]	; (8003650 <EXTI4_IRQHandler+0x278>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4619      	mov	r1, r3
 8003598:	2004      	movs	r0, #4
 800359a:	f7fd fcd1 	bl	8000f40 <change_digit_set_time>
						for(int i = 0; i <= 1500000; ++i);
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	e002      	b.n	80035aa <EXTI4_IRQHandler+0x1d2>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4a27      	ldr	r2, [pc, #156]	; (800364c <EXTI4_IRQHandler+0x274>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	ddf8      	ble.n	80035a4 <EXTI4_IRQHandler+0x1cc>
					}
				}
				if((flags & 0x4) != 0 && set_power != 0)
 80035b2:	4b23      	ldr	r3, [pc, #140]	; (8003640 <EXTI4_IRQHandler+0x268>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <EXTI4_IRQHandler+0x218>
 80035be:	4b26      	ldr	r3, [pc, #152]	; (8003658 <EXTI4_IRQHandler+0x280>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d014      	beq.n	80035f0 <EXTI4_IRQHandler+0x218>
				{
					set_power -= 10;
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <EXTI4_IRQHandler+0x280>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	3b0a      	subs	r3, #10
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b22      	ldr	r3, [pc, #136]	; (8003658 <EXTI4_IRQHandler+0x280>)
 80035d0:	701a      	strb	r2, [r3, #0]
					change_digit_power(set_power);
 80035d2:	4b21      	ldr	r3, [pc, #132]	; (8003658 <EXTI4_IRQHandler+0x280>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f8b8 	bl	800174c <change_digit_power>
					for(int i = 0; i <= 1500000; ++i);
 80035dc:	2300      	movs	r3, #0
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	e002      	b.n	80035e8 <EXTI4_IRQHandler+0x210>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3301      	adds	r3, #1
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a18      	ldr	r2, [pc, #96]	; (800364c <EXTI4_IRQHandler+0x274>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	ddf8      	ble.n	80035e2 <EXTI4_IRQHandler+0x20a>
			while((GPIOD->IDR & GPIO_IDR_ID4) == 0)
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <EXTI4_IRQHandler+0x258>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f43f af22 	beq.w	8003442 <EXTI4_IRQHandler+0x6a>
				}
			}
		}
		for(int i = 0; i <= 3600000; ++i);
 80035fe:	2300      	movs	r3, #0
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	e002      	b.n	800360a <EXTI4_IRQHandler+0x232>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4a13      	ldr	r2, [pc, #76]	; (800365c <EXTI4_IRQHandler+0x284>)
 800360e:	4293      	cmp	r3, r2
 8003610:	ddf8      	ble.n	8003604 <EXTI4_IRQHandler+0x22c>
		EXTI->PR |= EXTI_PR_PR4;
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <EXTI4_IRQHandler+0x250>)
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4a04      	ldr	r2, [pc, #16]	; (8003628 <EXTI4_IRQHandler+0x250>)
 8003618:	f043 0310 	orr.w	r3, r3, #16
 800361c:	6153      	str	r3, [r2, #20]
	}
}
 800361e:	bf00      	nop
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40013c00 	.word	0x40013c00
 800362c:	40000800 	.word	0x40000800
 8003630:	40020c00 	.word	0x40020c00
 8003634:	2003fc20 	.word	0x2003fc20
 8003638:	40014800 	.word	0x40014800
 800363c:	00030d3f 	.word	0x00030d3f
 8003640:	2003fc48 	.word	0x2003fc48
 8003644:	2003fc57 	.word	0x2003fc57
 8003648:	2003fc56 	.word	0x2003fc56
 800364c:	0016e360 	.word	0x0016e360
 8003650:	2003fc54 	.word	0x2003fc54
 8003654:	2003fc55 	.word	0x2003fc55
 8003658:	2003fc59 	.word	0x2003fc59
 800365c:	0036ee80 	.word	0x0036ee80

08003660 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler()
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	; 0x28
 8003664:	af00      	add	r7, sp, #0
	if ((EXTI->PR & EXTI_PR_PR5) != 0)
 8003666:	4b8f      	ldr	r3, [pc, #572]	; (80038a4 <EXTI9_5_IRQHandler+0x244>)
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80e5 	beq.w	800383e <EXTI9_5_IRQHandler+0x1de>
	{
		TIM4->CNT = 0;
 8003674:	4b8c      	ldr	r3, [pc, #560]	; (80038a8 <EXTI9_5_IRQHandler+0x248>)
 8003676:	2200      	movs	r2, #0
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
		uint8_t press_cnt = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if((GPIOG->IDR & GPIO_IDR_ID5) == 0)
 8003680:	4b8a      	ldr	r3, [pc, #552]	; (80038ac <EXTI9_5_IRQHandler+0x24c>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11c      	bne.n	80036c6 <EXTI9_5_IRQHandler+0x66>
		{
			if(buttonPressed_PG5 == 1)
 800368c:	4b88      	ldr	r3, [pc, #544]	; (80038b0 <EXTI9_5_IRQHandler+0x250>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d117      	bne.n	80036c6 <EXTI9_5_IRQHandler+0x66>
			{
				press_cnt = press_cnt + 1;
 8003696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800369a:	3301      	adds	r3, #1
 800369c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buttonPressed_PG5 = 0;
 80036a0:	4b83      	ldr	r3, [pc, #524]	; (80038b0 <EXTI9_5_IRQHandler+0x250>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
				TIM11->CCR1 = 100;
 80036a6:	4b83      	ldr	r3, [pc, #524]	; (80038b4 <EXTI9_5_IRQHandler+0x254>)
 80036a8:	2264      	movs	r2, #100	; 0x64
 80036aa:	635a      	str	r2, [r3, #52]	; 0x34
				for(int i = 0; i < 200000;i++);
 80036ac:	2300      	movs	r3, #0
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	e002      	b.n	80036b8 <EXTI9_5_IRQHandler+0x58>
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	3301      	adds	r3, #1
 80036b6:	623b      	str	r3, [r7, #32]
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <EXTI9_5_IRQHandler+0x258>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	ddf8      	ble.n	80036b2 <EXTI9_5_IRQHandler+0x52>
				TIM11->CCR1 = 0;
 80036c0:	4b7c      	ldr	r3, [pc, #496]	; (80038b4 <EXTI9_5_IRQHandler+0x254>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}


		if(((flags & 0x8) == 0) & (press_cnt == 1))
 80036c6:	4b7d      	ldr	r3, [pc, #500]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036dc:	2b01      	cmp	r3, #1
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4013      	ands	r3, r2
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8097 	beq.w	800381e <EXTI9_5_IRQHandler+0x1be>
		{
			switch (flags & 0b00000111)
 80036f0:	4b72      	ldr	r3, [pc, #456]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d049      	beq.n	8003790 <EXTI9_5_IRQHandler+0x130>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	dc6f      	bgt.n	80037e0 <EXTI9_5_IRQHandler+0x180>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <EXTI9_5_IRQHandler+0xaa>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d014      	beq.n	8003732 <EXTI9_5_IRQHandler+0xd2>
 8003708:	e06a      	b.n	80037e0 <EXTI9_5_IRQHandler+0x180>
			{
			case 0:
			{
				flags |= 0x1;
 800370a:	4b6c      	ldr	r3, [pc, #432]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b69      	ldr	r3, [pc, #420]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 8003716:	701a      	strb	r2, [r3, #0]
				change_digit_set_time(3, set_minute_2);
 8003718:	4b69      	ldr	r3, [pc, #420]	; (80038c0 <EXTI9_5_IRQHandler+0x260>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4619      	mov	r1, r3
 800371e:	2003      	movs	r0, #3
 8003720:	f7fd fc0e 	bl	8000f40 <change_digit_set_time>
				change_digit_set_time(4, set_minute);
 8003724:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <EXTI9_5_IRQHandler+0x264>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	2004      	movs	r0, #4
 800372c:	f7fd fc08 	bl	8000f40 <change_digit_set_time>
			}
			break;
 8003730:	e075      	b.n	800381e <EXTI9_5_IRQHandler+0x1be>
			case 1:
			{
				flags |= 0x2;
 8003732:	4b62      	ldr	r3, [pc, #392]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	f043 0302 	orr.w	r3, r3, #2
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b5f      	ldr	r3, [pc, #380]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 800373e:	701a      	strb	r2, [r3, #0]
				flags &= ~0x1;
 8003740:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 800374c:	701a      	strb	r2, [r3, #0]
				change_digit_set_time(3, set_minute_2);
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <EXTI9_5_IRQHandler+0x260>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	2003      	movs	r0, #3
 8003756:	f7fd fbf3 	bl	8000f40 <change_digit_set_time>
				change_digit_set_time(4, set_minute);
 800375a:	4b5a      	ldr	r3, [pc, #360]	; (80038c4 <EXTI9_5_IRQHandler+0x264>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	2004      	movs	r0, #4
 8003762:	f7fd fbed 	bl	8000f40 <change_digit_set_time>
				minute = set_minute;
 8003766:	4b57      	ldr	r3, [pc, #348]	; (80038c4 <EXTI9_5_IRQHandler+0x264>)
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <EXTI9_5_IRQHandler+0x268>)
 800376c:	701a      	strb	r2, [r3, #0]
				minute_2 = set_minute_2;
 800376e:	4b54      	ldr	r3, [pc, #336]	; (80038c0 <EXTI9_5_IRQHandler+0x260>)
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	4b56      	ldr	r3, [pc, #344]	; (80038cc <EXTI9_5_IRQHandler+0x26c>)
 8003774:	701a      	strb	r2, [r3, #0]
				change_digit_set_time(1, set_hour_2);
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <EXTI9_5_IRQHandler+0x270>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	2001      	movs	r0, #1
 800377e:	f7fd fbdf 	bl	8000f40 <change_digit_set_time>
				change_digit_set_time(2, set_hour);
 8003782:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <EXTI9_5_IRQHandler+0x274>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	4619      	mov	r1, r3
 8003788:	2002      	movs	r0, #2
 800378a:	f7fd fbd9 	bl	8000f40 <change_digit_set_time>
			}
			break;
 800378e:	e046      	b.n	800381e <EXTI9_5_IRQHandler+0x1be>
			case 2:
			{
				flags |= 0x4;
 8003790:	4b4a      	ldr	r3, [pc, #296]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b48      	ldr	r3, [pc, #288]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 800379c:	701a      	strb	r2, [r3, #0]
				flags &= ~0x2;
 800379e:	4b47      	ldr	r3, [pc, #284]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f023 0302 	bic.w	r3, r3, #2
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	4b44      	ldr	r3, [pc, #272]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037aa:	701a      	strb	r2, [r3, #0]
				change_digit_set_time(1, set_hour_2);
 80037ac:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <EXTI9_5_IRQHandler+0x270>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	2001      	movs	r0, #1
 80037b4:	f7fd fbc4 	bl	8000f40 <change_digit_set_time>
				change_digit_set_time(2, set_hour);
 80037b8:	4b46      	ldr	r3, [pc, #280]	; (80038d4 <EXTI9_5_IRQHandler+0x274>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4619      	mov	r1, r3
 80037be:	2002      	movs	r0, #2
 80037c0:	f7fd fbbe 	bl	8000f40 <change_digit_set_time>
				hour = set_hour;
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <EXTI9_5_IRQHandler+0x274>)
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <EXTI9_5_IRQHandler+0x278>)
 80037ca:	701a      	strb	r2, [r3, #0]
				hour_2 = set_hour_2;
 80037cc:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <EXTI9_5_IRQHandler+0x270>)
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	4b42      	ldr	r3, [pc, #264]	; (80038dc <EXTI9_5_IRQHandler+0x27c>)
 80037d2:	701a      	strb	r2, [r3, #0]
				change_digit_power(set_power);
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <EXTI9_5_IRQHandler+0x280>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd ffb7 	bl	800174c <change_digit_power>
			}
			break;
 80037de:	e01e      	b.n	800381e <EXTI9_5_IRQHandler+0x1be>
			default:
			{
				flags &= ~0x1;
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037ec:	701a      	strb	r2, [r3, #0]
				flags &= ~0x2;
 80037ee:	4b33      	ldr	r3, [pc, #204]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	f023 0302 	bic.w	r3, r3, #2
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b30      	ldr	r3, [pc, #192]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037fa:	701a      	strb	r2, [r3, #0]
				flags &= ~0x4;
 80037fc:	4b2f      	ldr	r3, [pc, #188]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <EXTI9_5_IRQHandler+0x25c>)
 8003808:	701a      	strb	r2, [r3, #0]
				power = set_power;
 800380a:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <EXTI9_5_IRQHandler+0x280>)
 800380c:	781a      	ldrb	r2, [r3, #0]
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <EXTI9_5_IRQHandler+0x284>)
 8003810:	701a      	strb	r2, [r3, #0]
				change_digit_power(set_power);
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <EXTI9_5_IRQHandler+0x280>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd ff98 	bl	800174c <change_digit_power>
			}
			break;
 800381c:	bf00      	nop
		}
		//		NVIC_EnableIRQ(EXTI0_IRQn);
		//		NVIC_EnableIRQ(EXTI2_IRQn);
		//		NVIC_EnableIRQ(EXTI4_IRQn);
		//		NVIC_EnableIRQ(EXTI15_10_IRQn);
		for(int i = 0; i <= 3600000; ++i);
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e002      	b.n	800382a <EXTI9_5_IRQHandler+0x1ca>
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	3301      	adds	r3, #1
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4a2e      	ldr	r2, [pc, #184]	; (80038e8 <EXTI9_5_IRQHandler+0x288>)
 800382e:	4293      	cmp	r3, r2
 8003830:	ddf8      	ble.n	8003824 <EXTI9_5_IRQHandler+0x1c4>
		EXTI->PR |= EXTI_PR_PR5;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <EXTI9_5_IRQHandler+0x244>)
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <EXTI9_5_IRQHandler+0x244>)
 8003838:	f043 0320 	orr.w	r3, r3, #32
 800383c:	6153      	str	r3, [r2, #20]
	}

	if ((EXTI->PR & EXTI_PR_PR8) != 0)
 800383e:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <EXTI9_5_IRQHandler+0x244>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80f8 	beq.w	8003a3c <EXTI9_5_IRQHandler+0x3dc>
	{
		TIM4->CNT = 0;
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <EXTI9_5_IRQHandler+0x248>)
 800384e:	2200      	movs	r2, #0
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
		uint8_t press_cnt8 = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	76fb      	strb	r3, [r7, #27]
		if((GPIOE->IDR & GPIO_IDR_ID8) == 0)
 8003856:	4b25      	ldr	r3, [pc, #148]	; (80038ec <EXTI9_5_IRQHandler+0x28c>)
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11a      	bne.n	8003898 <EXTI9_5_IRQHandler+0x238>
		{
			if(buttonPressed_PE8 == 1)
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <EXTI9_5_IRQHandler+0x290>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d115      	bne.n	8003898 <EXTI9_5_IRQHandler+0x238>
			{
				press_cnt8 = press_cnt8 + 1;
 800386c:	7efb      	ldrb	r3, [r7, #27]
 800386e:	3301      	adds	r3, #1
 8003870:	76fb      	strb	r3, [r7, #27]
				buttonPressed_PE8 = 0;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <EXTI9_5_IRQHandler+0x290>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
				TIM11->CCR1 = 100;
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <EXTI9_5_IRQHandler+0x254>)
 800387a:	2264      	movs	r2, #100	; 0x64
 800387c:	635a      	str	r2, [r3, #52]	; 0x34
				for(int i = 0; i < 200000;i++);
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	e002      	b.n	800388a <EXTI9_5_IRQHandler+0x22a>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3301      	adds	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <EXTI9_5_IRQHandler+0x258>)
 800388e:	4293      	cmp	r3, r2
 8003890:	ddf8      	ble.n	8003884 <EXTI9_5_IRQHandler+0x224>
				TIM11->CCR1 = 0;
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <EXTI9_5_IRQHandler+0x254>)
 8003894:	2200      	movs	r2, #0
 8003896:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if(press_cnt8 == 1)
 8003898:	7efb      	ldrb	r3, [r7, #27]
 800389a:	2b01      	cmp	r3, #1
 800389c:	f040 80be 	bne.w	8003a1c <EXTI9_5_IRQHandler+0x3bc>
		{
			while((GPIOE->IDR & GPIO_IDR_ID8) == 0)
 80038a0:	e0b5      	b.n	8003a0e <EXTI9_5_IRQHandler+0x3ae>
 80038a2:	bf00      	nop
 80038a4:	40013c00 	.word	0x40013c00
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40021800 	.word	0x40021800
 80038b0:	2003fc1e 	.word	0x2003fc1e
 80038b4:	40014800 	.word	0x40014800
 80038b8:	00030d3f 	.word	0x00030d3f
 80038bc:	2003fc48 	.word	0x2003fc48
 80038c0:	2003fc55 	.word	0x2003fc55
 80038c4:	2003fc54 	.word	0x2003fc54
 80038c8:	2003fc50 	.word	0x2003fc50
 80038cc:	2003fc51 	.word	0x2003fc51
 80038d0:	2003fc57 	.word	0x2003fc57
 80038d4:	2003fc56 	.word	0x2003fc56
 80038d8:	2003fc52 	.word	0x2003fc52
 80038dc:	2003fc53 	.word	0x2003fc53
 80038e0:	2003fc59 	.word	0x2003fc59
 80038e4:	2003fc58 	.word	0x2003fc58
 80038e8:	0036ee80 	.word	0x0036ee80
 80038ec:	40021000 	.word	0x40021000
 80038f0:	2003fc1c 	.word	0x2003fc1c
			{
				if((flags & 0x2) != 0 && (set_hour_2 + set_hour) != 18)
 80038f4:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <EXTI9_5_IRQHandler+0x3e4>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d030      	beq.n	8003962 <EXTI9_5_IRQHandler+0x302>
 8003900:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <EXTI9_5_IRQHandler+0x3e8>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	4b51      	ldr	r3, [pc, #324]	; (8003a4c <EXTI9_5_IRQHandler+0x3ec>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4413      	add	r3, r2
 800390c:	2b12      	cmp	r3, #18
 800390e:	d028      	beq.n	8003962 <EXTI9_5_IRQHandler+0x302>
				{
					++set_hour;
 8003910:	4b4e      	ldr	r3, [pc, #312]	; (8003a4c <EXTI9_5_IRQHandler+0x3ec>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <EXTI9_5_IRQHandler+0x3ec>)
 800391a:	701a      	strb	r2, [r3, #0]
					if(set_hour == 10)
 800391c:	4b4b      	ldr	r3, [pc, #300]	; (8003a4c <EXTI9_5_IRQHandler+0x3ec>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b0a      	cmp	r3, #10
 8003922:	d108      	bne.n	8003936 <EXTI9_5_IRQHandler+0x2d6>
					{
						++set_hour_2;
 8003924:	4b48      	ldr	r3, [pc, #288]	; (8003a48 <EXTI9_5_IRQHandler+0x3e8>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <EXTI9_5_IRQHandler+0x3e8>)
 800392e:	701a      	strb	r2, [r3, #0]
						set_hour = 0;
 8003930:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <EXTI9_5_IRQHandler+0x3ec>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
					}
					change_digit_set_time(1, set_hour_2);
 8003936:	4b44      	ldr	r3, [pc, #272]	; (8003a48 <EXTI9_5_IRQHandler+0x3e8>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	2001      	movs	r0, #1
 800393e:	f7fd faff 	bl	8000f40 <change_digit_set_time>
					change_digit_set_time(2, set_hour);
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <EXTI9_5_IRQHandler+0x3ec>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	4619      	mov	r1, r3
 8003948:	2002      	movs	r0, #2
 800394a:	f7fd faf9 	bl	8000f40 <change_digit_set_time>
					for(int i = 0; i <= 1000000; ++i);
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	e002      	b.n	800395a <EXTI9_5_IRQHandler+0x2fa>
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	3301      	adds	r3, #1
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <EXTI9_5_IRQHandler+0x3f0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	ddf8      	ble.n	8003954 <EXTI9_5_IRQHandler+0x2f4>
				}
				if((flags & 0x1) != 0 && (set_minute + set_minute_2) != 18)
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <EXTI9_5_IRQHandler+0x3e4>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d030      	beq.n	80039d0 <EXTI9_5_IRQHandler+0x370>
 800396e:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <EXTI9_5_IRQHandler+0x3f4>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4b38      	ldr	r3, [pc, #224]	; (8003a58 <EXTI9_5_IRQHandler+0x3f8>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4413      	add	r3, r2
 800397a:	2b12      	cmp	r3, #18
 800397c:	d028      	beq.n	80039d0 <EXTI9_5_IRQHandler+0x370>
				{
					++set_minute;
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <EXTI9_5_IRQHandler+0x3f4>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <EXTI9_5_IRQHandler+0x3f4>)
 8003988:	701a      	strb	r2, [r3, #0]
					if(set_minute == 10)
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <EXTI9_5_IRQHandler+0x3f4>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b0a      	cmp	r3, #10
 8003990:	d108      	bne.n	80039a4 <EXTI9_5_IRQHandler+0x344>
					{
						++set_minute_2;
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <EXTI9_5_IRQHandler+0x3f8>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <EXTI9_5_IRQHandler+0x3f8>)
 800399c:	701a      	strb	r2, [r3, #0]
						set_minute = 0;
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <EXTI9_5_IRQHandler+0x3f4>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
					}
					change_digit_set_time(3, set_minute_2);
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <EXTI9_5_IRQHandler+0x3f8>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4619      	mov	r1, r3
 80039aa:	2003      	movs	r0, #3
 80039ac:	f7fd fac8 	bl	8000f40 <change_digit_set_time>
					change_digit_set_time(4, set_minute);
 80039b0:	4b28      	ldr	r3, [pc, #160]	; (8003a54 <EXTI9_5_IRQHandler+0x3f4>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	2004      	movs	r0, #4
 80039b8:	f7fd fac2 	bl	8000f40 <change_digit_set_time>
					for(int i = 0; i <= 1500000; ++i);
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e002      	b.n	80039c8 <EXTI9_5_IRQHandler+0x368>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3301      	adds	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <EXTI9_5_IRQHandler+0x3fc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	ddf8      	ble.n	80039c2 <EXTI9_5_IRQHandler+0x362>

				}
				if((flags & 0x4) != 0 && set_power != 100)
 80039d0:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <EXTI9_5_IRQHandler+0x3e4>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d018      	beq.n	8003a0e <EXTI9_5_IRQHandler+0x3ae>
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <EXTI9_5_IRQHandler+0x400>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d014      	beq.n	8003a0e <EXTI9_5_IRQHandler+0x3ae>
				{
					set_power += 10;
 80039e4:	4b1e      	ldr	r3, [pc, #120]	; (8003a60 <EXTI9_5_IRQHandler+0x400>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	330a      	adds	r3, #10
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <EXTI9_5_IRQHandler+0x400>)
 80039ee:	701a      	strb	r2, [r3, #0]
					change_digit_power(set_power);
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <EXTI9_5_IRQHandler+0x400>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fea9 	bl	800174c <change_digit_power>
					for(int i = 0; i <= 1500000; ++i);
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	e002      	b.n	8003a06 <EXTI9_5_IRQHandler+0x3a6>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3301      	adds	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4a14      	ldr	r2, [pc, #80]	; (8003a5c <EXTI9_5_IRQHandler+0x3fc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	ddf8      	ble.n	8003a00 <EXTI9_5_IRQHandler+0x3a0>
			while((GPIOE->IDR & GPIO_IDR_ID8) == 0)
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <EXTI9_5_IRQHandler+0x404>)
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f43f af6c 	beq.w	80038f4 <EXTI9_5_IRQHandler+0x294>
				}
			}
		}

		for(int i = 0; i <= 3600000; ++i);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	e002      	b.n	8003a28 <EXTI9_5_IRQHandler+0x3c8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3301      	adds	r3, #1
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	; (8003a68 <EXTI9_5_IRQHandler+0x408>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	ddf8      	ble.n	8003a22 <EXTI9_5_IRQHandler+0x3c2>
		EXTI->PR |= EXTI_PR_PR8;
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <EXTI9_5_IRQHandler+0x40c>)
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <EXTI9_5_IRQHandler+0x40c>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6153      	str	r3, [r2, #20]
	}
}
 8003a3c:	bf00      	nop
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2003fc48 	.word	0x2003fc48
 8003a48:	2003fc57 	.word	0x2003fc57
 8003a4c:	2003fc56 	.word	0x2003fc56
 8003a50:	000f4240 	.word	0x000f4240
 8003a54:	2003fc54 	.word	0x2003fc54
 8003a58:	2003fc55 	.word	0x2003fc55
 8003a5c:	0016e360 	.word	0x0016e360
 8003a60:	2003fc59 	.word	0x2003fc59
 8003a64:	40021000 	.word	0x40021000
 8003a68:	0036ee80 	.word	0x0036ee80
 8003a6c:	40013c00 	.word	0x40013c00

08003a70 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler()
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
	//	uint8_t btncnt_PF15 = 0;
	//	for(int i = 0; i < 2; ++i)
	//	{
	TIM4->CNT = 0;
 8003a76:	4b6a      	ldr	r3, [pc, #424]	; (8003c20 <EXTI15_10_IRQHandler+0x1b0>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
	if((GPIOF->IDR & GPIO_IDR_ID15) == 0)
 8003a7c:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <EXTI15_10_IRQHandler+0x1b4>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11c      	bne.n	8003ac2 <EXTI15_10_IRQHandler+0x52>
	{
		if(buttonPressed_PF15 == 1)
 8003a88:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <EXTI15_10_IRQHandler+0x1b8>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d117      	bne.n	8003ac2 <EXTI15_10_IRQHandler+0x52>
		{
			btncnt_PF15 = btncnt_PF15 + 1;
 8003a92:	4b66      	ldr	r3, [pc, #408]	; (8003c2c <EXTI15_10_IRQHandler+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a64      	ldr	r2, [pc, #400]	; (8003c2c <EXTI15_10_IRQHandler+0x1bc>)
 8003a9a:	6013      	str	r3, [r2, #0]

			buttonPressed_PF15 = 0;
 8003a9c:	4b62      	ldr	r3, [pc, #392]	; (8003c28 <EXTI15_10_IRQHandler+0x1b8>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
			TIM11->CCR1 = 100;
 8003aa2:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <EXTI15_10_IRQHandler+0x1c0>)
 8003aa4:	2264      	movs	r2, #100	; 0x64
 8003aa6:	635a      	str	r2, [r3, #52]	; 0x34
			for(int i = 0; i < 200000;i++);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e002      	b.n	8003ab4 <EXTI15_10_IRQHandler+0x44>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a5f      	ldr	r2, [pc, #380]	; (8003c34 <EXTI15_10_IRQHandler+0x1c4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	ddf8      	ble.n	8003aae <EXTI15_10_IRQHandler+0x3e>
			TIM11->CCR1 = 0;
 8003abc:	4b5c      	ldr	r3, [pc, #368]	; (8003c30 <EXTI15_10_IRQHandler+0x1c0>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	//	}

	if((flags & 0x8) == 0 && (flags & 0x1) == 0 && (flags & 0x2) == 0  && (flags & 0x4) == 0 && (btncnt_PF15 == 1))
 8003ac2:	4b5d      	ldr	r3, [pc, #372]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d15e      	bne.n	8003b8c <EXTI15_10_IRQHandler+0x11c>
 8003ace:	4b5a      	ldr	r3, [pc, #360]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d158      	bne.n	8003b8c <EXTI15_10_IRQHandler+0x11c>
 8003ada:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d152      	bne.n	8003b8c <EXTI15_10_IRQHandler+0x11c>
 8003ae6:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d14c      	bne.n	8003b8c <EXTI15_10_IRQHandler+0x11c>
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <EXTI15_10_IRQHandler+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d148      	bne.n	8003b8c <EXTI15_10_IRQHandler+0x11c>
	{

		flags |= 0x8;
 8003afa:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	f043 0308 	orr.w	r3, r3, #8
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003b06:	701a      	strb	r2, [r3, #0]
		flags |= 0x80;
 8003b08:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003b14:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = power;
 8003b16:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <EXTI15_10_IRQHandler+0x1cc>)
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <EXTI15_10_IRQHandler+0x1d0>)
 8003b1c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CNT = 0;
 8003b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b22:	2200      	movs	r2, #0
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->CR1 |= TIM_CR1_CEN;
 8003b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6013      	str	r3, [r2, #0]
		GPIOF->BSRR |= GPIO_BSRR_BS_9;
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <EXTI15_10_IRQHandler+0x1b4>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	4a3a      	ldr	r2, [pc, #232]	; (8003c24 <EXTI15_10_IRQHandler+0x1b4>)
 8003b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b40:	6193      	str	r3, [r2, #24]
		change_digit_main_time(1, hour_2);
 8003b42:	4b40      	ldr	r3, [pc, #256]	; (8003c44 <EXTI15_10_IRQHandler+0x1d4>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f7fd fc11 	bl	8001370 <change_digit_main_time>
		change_digit_main_time(2, hour);
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <EXTI15_10_IRQHandler+0x1d8>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	4619      	mov	r1, r3
 8003b54:	2002      	movs	r0, #2
 8003b56:	f7fd fc0b 	bl	8001370 <change_digit_main_time>
		change_digit_main_time(3, minute_2);
 8003b5a:	4b3c      	ldr	r3, [pc, #240]	; (8003c4c <EXTI15_10_IRQHandler+0x1dc>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	2003      	movs	r0, #3
 8003b62:	f7fd fc05 	bl	8001370 <change_digit_main_time>
		change_digit_main_time(4, minute);
 8003b66:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <EXTI15_10_IRQHandler+0x1e0>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	2004      	movs	r0, #4
 8003b6e:	f7fd fbff 	bl	8001370 <change_digit_main_time>
		predifined_parametrs = 0;
 8003b72:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <EXTI15_10_IRQHandler+0x1e4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
		NVIC_DisableIRQ(EXTI0_IRQn);
 8003b78:	2006      	movs	r0, #6
 8003b7a:	f7fc fb63 	bl	8000244 <__NVIC_DisableIRQ>
		NVIC_DisableIRQ(EXTI4_IRQn);
 8003b7e:	200a      	movs	r0, #10
 8003b80:	f7fc fb60 	bl	8000244 <__NVIC_DisableIRQ>
		NVIC_DisableIRQ(EXTI9_5_IRQn);
 8003b84:	2017      	movs	r0, #23
 8003b86:	f7fc fb5d 	bl	8000244 <__NVIC_DisableIRQ>
 8003b8a:	e034      	b.n	8003bf6 <EXTI15_10_IRQHandler+0x186>
	}
	else
	{
		TIM2->CR1 &= ~TIM_CR1_CEN;
 8003b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]
		TIM2->CNT = 0;
 8003b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOF->BSRR |= GPIO_BSRR_BR_9;
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <EXTI15_10_IRQHandler+0x1b4>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <EXTI15_10_IRQHandler+0x1b4>)
 8003baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bae:	6193      	str	r3, [r2, #24]
		TIM3->CCR1 = 0;
 8003bb0:	4b23      	ldr	r3, [pc, #140]	; (8003c40 <EXTI15_10_IRQHandler+0x1d0>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34
		flags &= ~0x8;
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f023 0308 	bic.w	r3, r3, #8
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	4b1d      	ldr	r3, [pc, #116]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003bc2:	701a      	strb	r2, [r3, #0]
		flags &= ~0x80;
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <EXTI15_10_IRQHandler+0x1c8>)
 8003bd0:	701a      	strb	r2, [r3, #0]
		change_colon_visibility(1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f7fe fdf4 	bl	80027c0 <change_colon_visibility>
		btncnt_PF15 = 0;
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <EXTI15_10_IRQHandler+0x1bc>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003bde:	2006      	movs	r0, #6
 8003be0:	f7fc fb12 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003be4:	2008      	movs	r0, #8
 8003be6:	f7fc fb0f 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003bea:	200a      	movs	r0, #10
 8003bec:	f7fc fb0c 	bl	8000208 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bf0:	2017      	movs	r0, #23
 8003bf2:	f7fc fb09 	bl	8000208 <__NVIC_EnableIRQ>
	}

	for(int i = 0; i <= 3600000; ++i);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	e002      	b.n	8003c02 <EXTI15_10_IRQHandler+0x192>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <EXTI15_10_IRQHandler+0x1e8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	ddf8      	ble.n	8003bfc <EXTI15_10_IRQHandler+0x18c>
	EXTI->PR |= EXTI_PR_PR15;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <EXTI15_10_IRQHandler+0x1ec>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <EXTI15_10_IRQHandler+0x1ec>)
 8003c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c14:	6153      	str	r3, [r2, #20]
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40021400 	.word	0x40021400
 8003c28:	2003fc21 	.word	0x2003fc21
 8003c2c:	2003fc44 	.word	0x2003fc44
 8003c30:	40014800 	.word	0x40014800
 8003c34:	00030d3f 	.word	0x00030d3f
 8003c38:	2003fc48 	.word	0x2003fc48
 8003c3c:	2003fc58 	.word	0x2003fc58
 8003c40:	40000400 	.word	0x40000400
 8003c44:	2003fc53 	.word	0x2003fc53
 8003c48:	2003fc52 	.word	0x2003fc52
 8003c4c:	2003fc51 	.word	0x2003fc51
 8003c50:	2003fc50 	.word	0x2003fc50
 8003c54:	2003fc5a 	.word	0x2003fc5a
 8003c58:	0036ee80 	.word	0x0036ee80
 8003c5c:	40013c00 	.word	0x40013c00

08003c60 <main>:

int main(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
	initialization();
 8003c66:	f7fc fb3b 	bl	80002e0 <initialization>

	//	 Initialization picture
	LTDC_Layer2->CFBAR = (uint32_t)init_picture;
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <main+0x1e4>)
 8003c6c:	4a76      	ldr	r2, [pc, #472]	; (8003e48 <main+0x1e8>)
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8003c70:	4b76      	ldr	r3, [pc, #472]	; (8003e4c <main+0x1ec>)
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <main+0x1ec>)
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i = 0; i <= 5000000; ++i);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	607b      	str	r3, [r7, #4]
 8003c80:	e002      	b.n	8003c88 <main+0x28>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3301      	adds	r3, #1
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a71      	ldr	r2, [pc, #452]	; (8003e50 <main+0x1f0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	ddf8      	ble.n	8003c82 <main+0x22>

	// Main picture
	LTDC_Layer2->CFBAR = (uint32_t)main_picture;
 8003c90:	4b6c      	ldr	r3, [pc, #432]	; (8003e44 <main+0x1e4>)
 8003c92:	4a70      	ldr	r2, [pc, #448]	; (8003e54 <main+0x1f4>)
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8003c96:	4b6d      	ldr	r3, [pc, #436]	; (8003e4c <main+0x1ec>)
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	4a6c      	ldr	r2, [pc, #432]	; (8003e4c <main+0x1ec>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6253      	str	r3, [r2, #36]	; 0x24

	// Time
	change_digit_main_time(1, hour_2);
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <main+0x1f8>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fd fb61 	bl	8001370 <change_digit_main_time>
	change_digit_main_time(2, hour);
 8003cae:	4b6b      	ldr	r3, [pc, #428]	; (8003e5c <main+0x1fc>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	2002      	movs	r0, #2
 8003cb6:	f7fd fb5b 	bl	8001370 <change_digit_main_time>
	change_digit_main_time(3, minute_2);
 8003cba:	4b69      	ldr	r3, [pc, #420]	; (8003e60 <main+0x200>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	f7fd fb55 	bl	8001370 <change_digit_main_time>
	change_digit_main_time(4, minute);
 8003cc6:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <main+0x204>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	4619      	mov	r1, r3
 8003ccc:	2004      	movs	r0, #4
 8003cce:	f7fd fb4f 	bl	8001370 <change_digit_main_time>

	// Time 2
	change_digit_set_time(1, hour_2);
 8003cd2:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <main+0x1f8>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f7fd f931 	bl	8000f40 <change_digit_set_time>
	change_digit_set_time(2, hour);
 8003cde:	4b5f      	ldr	r3, [pc, #380]	; (8003e5c <main+0x1fc>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f7fd f92b 	bl	8000f40 <change_digit_set_time>
	change_digit_set_time(3, minute_2);
 8003cea:	4b5d      	ldr	r3, [pc, #372]	; (8003e60 <main+0x200>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	2003      	movs	r0, #3
 8003cf2:	f7fd f925 	bl	8000f40 <change_digit_set_time>
	change_digit_set_time(4, minute);
 8003cf6:	4b5b      	ldr	r3, [pc, #364]	; (8003e64 <main+0x204>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	2004      	movs	r0, #4
 8003cfe:	f7fd f91f 	bl	8000f40 <change_digit_set_time>

	// Power
	change_digit_power(power);
 8003d02:	4b59      	ldr	r3, [pc, #356]	; (8003e68 <main+0x208>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fd20 	bl	800174c <change_digit_power>

	// Timers
	TIM5->CR1 |= TIM_CR1_CEN;
 8003d0c:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <main+0x20c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a56      	ldr	r2, [pc, #344]	; (8003e6c <main+0x20c>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8003d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8003d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

	flags &= ~0x1;
 8003d30:	4b4f      	ldr	r3, [pc, #316]	; (8003e70 <main+0x210>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	f023 0301 	bic.w	r3, r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b4d      	ldr	r3, [pc, #308]	; (8003e70 <main+0x210>)
 8003d3c:	701a      	strb	r2, [r3, #0]
	flags &= ~0x2;
 8003d3e:	4b4c      	ldr	r3, [pc, #304]	; (8003e70 <main+0x210>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	f023 0302 	bic.w	r3, r3, #2
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <main+0x210>)
 8003d4a:	701a      	strb	r2, [r3, #0]
	flags &= ~0x4;
 8003d4c:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <main+0x210>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	f023 0304 	bic.w	r3, r3, #4
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <main+0x210>)
 8003d58:	701a      	strb	r2, [r3, #0]
	flags &= ~0x8;
 8003d5a:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <main+0x210>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f023 0308 	bic.w	r3, r3, #8
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <main+0x210>)
 8003d66:	701a      	strb	r2, [r3, #0]
	flags &= ~0x80;
 8003d68:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <main+0x210>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <main+0x210>)
 8003d74:	701a      	strb	r2, [r3, #0]
	TIM3->CCR1 = 0;
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <main+0x214>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8003d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;
 8003d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
	power = 0;
 8003d94:	4b34      	ldr	r3, [pc, #208]	; (8003e68 <main+0x208>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
	minute = 0;
 8003d9a:	4b32      	ldr	r3, [pc, #200]	; (8003e64 <main+0x204>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
	minute_2 = 0;
 8003da0:	4b2f      	ldr	r3, [pc, #188]	; (8003e60 <main+0x200>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
	hour = 0;
 8003da6:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <main+0x1fc>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	701a      	strb	r2, [r3, #0]
	hour_2 = 0;
 8003dac:	4b2a      	ldr	r3, [pc, #168]	; (8003e58 <main+0x1f8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
	set_power = 0;
 8003db2:	4b31      	ldr	r3, [pc, #196]	; (8003e78 <main+0x218>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
	set_minute = 0;
 8003db8:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <main+0x21c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
	set_minute_2 = 0;
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <main+0x220>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
	set_hour = 0;
 8003dc4:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <main+0x224>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
	set_hour_2 = 0;
 8003dca:	4b2f      	ldr	r3, [pc, #188]	; (8003e88 <main+0x228>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
	set_power = 0;
 8003dd0:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <main+0x218>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
	change_digit_main_time(1, 0);
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fd fac9 	bl	8001370 <change_digit_main_time>
	change_digit_main_time(2, 0);
 8003dde:	2100      	movs	r1, #0
 8003de0:	2002      	movs	r0, #2
 8003de2:	f7fd fac5 	bl	8001370 <change_digit_main_time>
	change_digit_main_time(3, 0);
 8003de6:	2100      	movs	r1, #0
 8003de8:	2003      	movs	r0, #3
 8003dea:	f7fd fac1 	bl	8001370 <change_digit_main_time>
	change_digit_main_time(4, 0);
 8003dee:	2100      	movs	r1, #0
 8003df0:	2004      	movs	r0, #4
 8003df2:	f7fd fabd 	bl	8001370 <change_digit_main_time>
	change_digit_set_time(1, 0);
 8003df6:	2100      	movs	r1, #0
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7fd f8a1 	bl	8000f40 <change_digit_set_time>
	change_digit_set_time(2, 0);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	2002      	movs	r0, #2
 8003e02:	f7fd f89d 	bl	8000f40 <change_digit_set_time>
	change_digit_set_time(3, 0);
 8003e06:	2100      	movs	r1, #0
 8003e08:	2003      	movs	r0, #3
 8003e0a:	f7fd f899 	bl	8000f40 <change_digit_set_time>
	change_digit_set_time(4, 0);
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2004      	movs	r0, #4
 8003e12:	f7fd f895 	bl	8000f40 <change_digit_set_time>
	change_digit_power(0);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7fd fc98 	bl	800174c <change_digit_power>
	change_colon_visibility(1);
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f7fe fccf 	bl	80027c0 <change_colon_visibility>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8003e22:	2006      	movs	r0, #6
 8003e24:	f7fc f9f0 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 8003e28:	2008      	movs	r0, #8
 8003e2a:	f7fc f9ed 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8003e2e:	200a      	movs	r0, #10
 8003e30:	f7fc f9ea 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e34:	2017      	movs	r0, #23
 8003e36:	f7fc f9e7 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e3a:	2028      	movs	r0, #40	; 0x28
 8003e3c:	f7fc f9e4 	bl	8000208 <__NVIC_EnableIRQ>

	while(1);
 8003e40:	e7fe      	b.n	8003e40 <main+0x1e0>
 8003e42:	bf00      	nop
 8003e44:	40016904 	.word	0x40016904
 8003e48:	0806d024 	.word	0x0806d024
 8003e4c:	40016800 	.word	0x40016800
 8003e50:	004c4b40 	.word	0x004c4b40
 8003e54:	080acc24 	.word	0x080acc24
 8003e58:	2003fc53 	.word	0x2003fc53
 8003e5c:	2003fc52 	.word	0x2003fc52
 8003e60:	2003fc51 	.word	0x2003fc51
 8003e64:	2003fc50 	.word	0x2003fc50
 8003e68:	2003fc58 	.word	0x2003fc58
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	2003fc48 	.word	0x2003fc48
 8003e74:	40000400 	.word	0x40000400
 8003e78:	2003fc59 	.word	0x2003fc59
 8003e7c:	2003fc54 	.word	0x2003fc54
 8003e80:	2003fc55 	.word	0x2003fc55
 8003e84:	2003fc56 	.word	0x2003fc56
 8003e88:	2003fc57 	.word	0x2003fc57

08003e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e8c:	480d      	ldr	r0, [pc, #52]	; (8003ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e90:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e94:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e96:	490d      	ldr	r1, [pc, #52]	; (8003ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e98:	4a0d      	ldr	r2, [pc, #52]	; (8003ed0 <LoopForever+0xe>)
  movs r3, #0
 8003e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e9c:	e002      	b.n	8003ea4 <LoopCopyDataInit>

08003e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ea2:	3304      	adds	r3, #4

08003ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea8:	d3f9      	bcc.n	8003e9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eac:	4c0a      	ldr	r4, [pc, #40]	; (8003ed8 <LoopForever+0x16>)
  movs r3, #0
 8003eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb0:	e001      	b.n	8003eb6 <LoopFillZerobss>

08003eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb4:	3204      	adds	r2, #4

08003eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb8:	d3fb      	bcc.n	8003eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003eba:	f000 f811 	bl	8003ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ebe:	f7ff fecf 	bl	8003c60 <main>

08003ec2 <LoopForever>:

LoopForever:
  b LoopForever
 8003ec2:	e7fe      	b.n	8003ec2 <LoopForever>
  ldr   r0, =_estack
 8003ec4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ecc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8003ed0:	080ec82c 	.word	0x080ec82c
  ldr r2, =_sbss
 8003ed4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8003ed8:	2003fc5c 	.word	0x2003fc5c

08003edc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003edc:	e7fe      	b.n	8003edc <ADC_IRQHandler>
	...

08003ee0 <__libc_init_array>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4d0d      	ldr	r5, [pc, #52]	; (8003f18 <__libc_init_array+0x38>)
 8003ee4:	4c0d      	ldr	r4, [pc, #52]	; (8003f1c <__libc_init_array+0x3c>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	2600      	movs	r6, #0
 8003eec:	42a6      	cmp	r6, r4
 8003eee:	d109      	bne.n	8003f04 <__libc_init_array+0x24>
 8003ef0:	4d0b      	ldr	r5, [pc, #44]	; (8003f20 <__libc_init_array+0x40>)
 8003ef2:	4c0c      	ldr	r4, [pc, #48]	; (8003f24 <__libc_init_array+0x44>)
 8003ef4:	f000 f818 	bl	8003f28 <_init>
 8003ef8:	1b64      	subs	r4, r4, r5
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	2600      	movs	r6, #0
 8003efe:	42a6      	cmp	r6, r4
 8003f00:	d105      	bne.n	8003f0e <__libc_init_array+0x2e>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f08:	4798      	blx	r3
 8003f0a:	3601      	adds	r6, #1
 8003f0c:	e7ee      	b.n	8003eec <__libc_init_array+0xc>
 8003f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f12:	4798      	blx	r3
 8003f14:	3601      	adds	r6, #1
 8003f16:	e7f2      	b.n	8003efe <__libc_init_array+0x1e>
 8003f18:	080ec824 	.word	0x080ec824
 8003f1c:	080ec824 	.word	0x080ec824
 8003f20:	080ec824 	.word	0x080ec824
 8003f24:	080ec828 	.word	0x080ec828

08003f28 <_init>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	bf00      	nop
 8003f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2e:	bc08      	pop	{r3}
 8003f30:	469e      	mov	lr, r3
 8003f32:	4770      	bx	lr

08003f34 <_fini>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr
